@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/gestao-de-pedidos"
@using FrontMenuWeb.Components.Modais.ModaisDeGrupo
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos.Complementos
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos.GrupoDeComplementosNosProdutos
@using FrontMenuWeb.Models.Pedidos
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Extensions.Components
@inject GrupoServices GrupoService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject ProdutoService ProdutoService
@inject AliquotaService AliquotaService
@inject ComplementosServices ComplementosServices
@inject PedidosService PedidosService
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh">
    <MudLayout>
        <MudStack Class="w-100 mb-2 p-3 rounded-2" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="background-color: var(--mud-palette-surface)">
            <MudText Typo="Typo.h4" Style="font-weight: 300">Últimos pedidos</MudText>
            <MudDivider DividerType="DividerType.FullWidth" Light=true />
        </MudStack>
        <MudStack Class="w-100 p-3 rounded-2" Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="background-color: var(--mud-palette-surface)">
            <MudStack Class="w-50" Row=true>
                <MudTextField Class="w-100 mt-2 rounded-2" Label="Pesquisa" Adornment="Adornment.Start" PlaceHolder="Pesquise por nome de cliente, número ou pedido" Variant="Variant.Filled" T="string" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor=Color.Primary Immediate=true></MudTextField>
            </MudStack>
            <MudStack Justify="Justify.FlexStart">
                <MudButton StartIcon="@Icons.Material.Filled.AddBox" Variant="Variant.Filled" Color="Color.Primary" Disabled="false" OnClick="@(() => { })">Novo Pedido</MudButton>
            </MudStack>
        </MudStack>


        @if (!Carregando)
        {
            <MudStack Class="w-100 rounded-2 mt-2" Style="background-color: var(--mud-palette-surface); min-height: 520px">
                <MudDropContainer T="ClsDeSuporteParaMostrarPedidos" Items="_items" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                    <ChildContent>
                        @foreach (var etapa in ListaDeEtapasDosPedidos)
                        {
                            <MudPaper Style="background-color: var(--mud-palette-background)" Class="ma-4 rounded-2 flex-grow-1">
                                <MudList T="string" Class="d-flex flex-column mud-height-full p-2">
                                    <MudListSubheader><MudText Color="Color.Primary">@etapa.NomeDaEtapa</MudText></MudListSubheader>
                                    <MudDropZone T="ClsDeSuporteParaMostrarPedidos" Identifier=@etapa.Selector Class="flex-grow-1" AllowReorder="true" />
                                </MudList>
                            </MudPaper>
                        }
                    </ChildContent>
                    <ItemRenderer>
                        <MudCard Class="rouded-2 mb-3">
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="Color.Secondary">@context.Pedido.CriadoPor.Substring(0, 1)</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Color="Color.Primary" Typo="Typo.body1">@context.Pedido.CriadoPor</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                @foreach (var item in context.Pedido.Itens)
                                {
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        @item.Quantidade X @item.Descricao
                                    </MudStack>
                                    <MudDivider DividerType="DividerType.FullWidth" Light=true />
                                    if (item.Complementos.Count > 0)
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                        <MudText Align="Align.Center" Typo="Typo.caption" Color="Color.Secondary">Complementos:</MudText>
                                        </MudStack>
                                        foreach (var complemento in item.Complementos)
                                        {
                                            <MudStack Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                                                @complemento.Quantidade X @complemento.Descricao - @complemento.PrecoTotal.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                                            </MudStack>
                                        }
                                        <MudDivider DividerType="DividerType.FullWidth" Light=true />
                                    }

                                    <MudStack Row="true" Justify="Justify.Center" Style="color:  var(--mud-palette-primary)" AlignItems="AlignItems.Center">
                                        Unitário: @item.PrecoUnitario.ToString("C", CultureInfo.GetCultureInfo("pt-BR")) /  Total: @item.PrecoTotal.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                                    </MudStack>
                                }
                            </MudCardContent>
                            <MudCardActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                                <MudIconButton Icon="@Icons.Material.Filled.List" Color="Color.Primary" />
                            </MudCardActions>
                        </MudCard>

                    </ItemRenderer>
                </MudDropContainer>
            </MudStack>
        }
        else
        {
            @*Carregando*@
            <MudStack Class="w-100 rounded-2 mt-2 h-100" Style="background-color: var(--mud-palette-surface); min-height: 520px" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            </MudStack>
        }

    </MudLayout>
</MudPaper>

@code {
    public bool Carregando { get; set; } = true;
    private List<ClsDeSuporteParaMostrarPedidos> _items = new List<ClsDeSuporteParaMostrarPedidos>();
    public List<ClsDeSuporteParaVizualicacaoDePedidos> ListaDeEtapasDosPedidos = new List<ClsDeSuporteParaVizualicacaoDePedidos>
    {
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "NOVO", Selector = "NOVO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "PREPARANDO", Selector = "PREPARANDO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "DESPACHADO", Selector = "DESPACHADO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "FINALIZADO", Selector = "FINALIZADO" },
    };





    protected override async Task OnInitializedAsync()
    {
        await CarregarPedidos();
    }

    public async Task CarregarPedidos()
    {
        try
        {
            var result = await PedidosService.GetPedidosPorPaginaAsync(new QuerysDePedidos());

            if (result?.Data?.Any() == true)
            {
                _items = result.Data.Select(p => new ClsDeSuporteParaMostrarPedidos
                {
                    Pedido = p,
                    Selector = p.EtapaPedido
                }).ToList();
            }
            else
            {
                Snackbar.Add("Nenhum pedido encontrado.", Severity.Warning);
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Nenhum pedido encontrado.", Severity.Warning);
        }
        finally
        {
            Carregando = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private void ItemUpdated(MudItemDropInfo<ClsDeSuporteParaMostrarPedidos> dropItem)
    {
        dropItem.Item!.Selector = dropItem.DropzoneIdentifier;
    }


    //Lógicas se precisar de responsividade
    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    //Lógica do Drawer de edição de produto
    private bool carregandoProdutoParaEdicao = true;
    private ClsProduto? ProdutoSelecionadoParaEdicao = null!;
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }
    private bool _open;
    private Anchor _anchor;
    private string _height = "100%";
    private int _width = 0;
    private string _drawerWidth = "65%";
    private string TitleDoMudStepperPrincipal = "Principal";
    private string TitleDoMudStepperPrecos = "Preços";
    private string TitleDoMudStepperTributacoes = "Tributações";
    private string TitleDoMudStepperFicha = "Ficha Técnica";
    //--------------------------------------------------------------------------------------

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
        => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs args)
    {
        _width = args.BrowserWindowSize.Width;

        // Atualiza o tamanho do drawer com base na largura
        _drawerWidth = _width < 768 ? "95%" : "65%";

        if (_width < 768)
        {
            TitleDoMudStepperPrincipal = "";
            TitleDoMudStepperPrecos = "";
            TitleDoMudStepperTributacoes = "";
            TitleDoMudStepperFicha = "";
        }
        else
        {
            TitleDoMudStepperPrincipal = "Principal";
            TitleDoMudStepperPrecos = "Preços";
            TitleDoMudStepperTributacoes = "Tributações";
            TitleDoMudStepperFicha = "Ficha Técnica";
        }

        return InvokeAsync(StateHasChanged);
    }


    public class ClsDeSuporteParaVizualicacaoDePedidos
    {
        public string NomeDaEtapa = string.Empty;
        public string Selector { get; set; } = "1";
    }


}
