@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/gestao-de-pedidos"
@using FrontMenuWeb.Components.Modais.ModaisDeGrupo
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos.Complementos
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos.GrupoDeComplementosNosProdutos
@using FrontMenuWeb.Models.Pedidos
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Extensions.Components
@inject GrupoServices GrupoService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject ProdutoService ProdutoService
@inject AliquotaService AliquotaService
@inject ComplementosServices ComplementosServices
@inject PedidosService PedidosService
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh">
    <MudLayout>
        <MudStack Class="w-100 mb-2 p-3 rounded-2" AlignItems="AlignItems.Start" Justify="Justify.Center" Style="background-color: var(--mud-palette-surface)">
            <MudText Typo="Typo.h4" Style="font-weight: 300">Últimos pedidos</MudText>
            <MudDivider DividerType="DividerType.FullWidth" Light=true />
        </MudStack>
        <MudStack Class="w-100 p-3 rounded-2" Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="background-color: var(--mud-palette-surface)">
            <MudStack Class="w-50" Row=true>
                <MudTextField Class="w-100 mt-2 rounded-2" Label="Pesquisa" Adornment="Adornment.Start" PlaceHolder="Pesquise por nome de cliente, número ou pedido" Variant="Variant.Filled" T="string" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor=Color.Primary Immediate=true></MudTextField>
            </MudStack>
            <MudStack Justify="Justify.FlexStart">
                <MudButton StartIcon="@Icons.Material.Filled.AddBox" Variant="Variant.Filled" Color="Color.Primary" Disabled="false" OnClick="@(() => { })">Novo Pedido</MudButton>
            </MudStack>
        </MudStack>

        @if (!Carregando)
        {
            <MudGrid Class="w-100 mt-2">
                @foreach (var etapa in ListaDeEtapasDosPedidos)
                {
                    <MudItem xs="12" md="6" xl="3">
                        <MudCard Style="min-height: 520px">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText>@etapa.NomeDaEtapa</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudCheckBox T="bool" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                @{
                                    var items = _items.Where(p => p.Selector == etapa.Selector).ToList();
                                    if (items.Count > 0)
                                    {
                                        foreach (var pedido in items)
                                        {
                                            <MudCard Class="rouded-2 mb-3" Style="background-color: var(--mud-palette-background)">
                                                <MudCardHeader>
                                                    <CardHeaderAvatar>
                                                        <MudAvatar Color="Color.Primary">
                                                            <MudImage Src="/images/SOPHOSLOGOLOGIN.jpg"></MudImage>
                                                        </MudAvatar>
                                                    </CardHeaderAvatar>
                                                    <CardHeaderContent>
                                                        <MudText Color="Color.Primary" Typo="Typo.body1">@pedido.Pedido.CriadoPor - @pedido.Pedido.TipoDePedido</MudText>
                                                        @if (pedido.Pedido.Cliente is not null)
                                                        {
                                                            <MudText Color="Color.Default" Typo="Typo.caption">@pedido.Pedido.Cliente.Nome</MudText>
                                                        }
                                                    </CardHeaderContent>
                                                    <CardHeaderActions>
                                                        @if (!pedido.UltimaEtapa)
                                                        {
                                                            <MudCheckBox ValueChanged=@(() => { pedido.Selecionado = !pedido.Selecionado; if (pedido.Selecionado) { ItensSelecionadosPArAProximaEtapa.Add(pedido); } else { ItensSelecionadosPArAProximaEtapa.Remove(pedido); } }) T="bool" Value=@pedido.Selecionado />
                                                        }
                                                    </CardHeaderActions>
                                                </MudCardHeader>
                                                <MudCardContent>
                                                    @foreach (var item in pedido.Pedido.Itens)
                                                    {
                                                        <MudStack Class="w-100" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                            <MudText>@($"{item.Quantidade}X {item.Descricao}")</MudText>
                                                            <MudText>@($"{item.PrecoUnitario.ToString("C")}")</MudText>
                                                        </MudStack>
                                                        <MudDivider DividerType="DividerType.FullWidth" Light=true />
                                                        if (item.Complementos.Count > 0)
                                                        {
                                                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                                                <MudText Align="Align.Center" Typo="Typo.caption">Complementos:</MudText>
                                                            </MudStack>
                                                            foreach (var complemento in item.Complementos)
                                                            {
                                                                <MudStack Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                                                                    <MudText Typo="Typo.caption">@($"{complemento.Quantidade}X {complemento.Descricao} - {complemento.PrecoUnitario.ToString("C")}")</MudText>
                                                                </MudStack>
                                                            }
                                                            <MudDivider DividerType="DividerType.FullWidth" Light=true />
                                                        }

                                                        <MudStack Style="color:  var(--mud-palette-primary)" AlignItems="AlignItems.Center">
                                                            <MudStack Spacing="2" Class="w-100">
                                                                <MudButton OnClick="@(() => { OnExpandCollapseClick(pedido); })" StartIcon="@Icons.Material.Filled.ArrowDropDown">@(!@pedido.Expandido ? "Ver infos de pags" : "Esconder infos de pag")</MudButton>
                                                                <MudDivider />
                                                                <MudCollapse Expanded="@pedido.Expandido">
                                                                    <MudStack Class="w-100">
                                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                            <MudText Typo="Typo.subtitle2">Subtotal:</MudText>
                                                                            <MudText Typo="Typo.subtitle2">@(0.ToString("C"))</MudText>
                                                                        </MudStack>
                                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                            <MudText Typo="Typo.subtitle2">Desconto:</MudText>
                                                                            <MudText Typo="Typo.subtitle2">@(0.ToString("C"))</MudText>
                                                                        </MudStack>
                                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                            <MudText Typo="Typo.subtitle2">Acrescimo:</MudText>
                                                                            <MudText Typo="Typo.subtitle2">@(0.ToString("C"))</MudText>
                                                                        </MudStack>
                                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                            <MudText Typo="Typo.subtitle2">Taxa de entrega:</MudText>
                                                                            <MudText Typo="Typo.subtitle2">@(0.ToString("C"))</MudText>
                                                                        </MudStack>
                                                                        <MudDivider />
                                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                            <MudText Typo="Typo.h6" Style="font-weight: 600">Total:</MudText>
                                                                            <MudText Typo="Typo.h6" Style="font-weight: 600">@(0.ToString("C"))</MudText>
                                                                        </MudStack>
                                                                    </MudStack>
                                                                </MudCollapse>
                                                            </MudStack>
                                                        </MudStack>
                                                    }
                                                </MudCardContent>
                                                <MudCardActions>
                                                    <MudStack Class="w-100" Row=true AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                        <MudStack Row=true>
                                                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                                                <MudMenuItem Icon="@Icons.Material.Filled.Print" Label="Imprimir" />
                                                                <MudMenuItem Icon="@Icons.Material.Filled.ReceiptLong" Label="Cupom Fiscal" />
                                                                <MudMenuItem Icon="@Icons.Material.Filled.LocalShipping" Label="Enviar Para Entrega" />
                                                                <MudMenuItem Icon="@Icons.Material.Filled.Edit" Label="Editar" />
                                                                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" Label="Cancelar" />
                                                            </MudMenu>
                                                        </MudStack>
                                                        <MudStack>
                                                            <MudTooltip Color="Color.Primary" Text="Clique para enviar pedido para proxima etapa!">
                                                                @if (!pedido.UltimaEtapa)
                                                                {
                                                                    <MudIconButton OnClick="@(async () => { await MudaEtapaDoPedido(pedido); })" Size="Size.Large" Icon="@Icons.Material.Filled.ArrowCircleRight" Color="Color.Primary" />

                                                                }
                                                            </MudTooltip>
                                                        </MudStack>
                                                    </MudStack>
                                                </MudCardActions>
                                            </MudCard>
                                        }
                                    }
                                    else
                                    {
                                        <MudStack AlignItems="AlignItems.Center"
                                                  Justify="Justify.Center"
                                                  Style="width: 100%; height: 100%; opacity: 0.4;">
                                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" Class="mb-2" />
                                            <MudText Typo="Typo.subtitle1" Align="Align.Center">
                                                Nenhum pedido nesta etapa
                                            </MudText>
                                            <MudText Typo="Typo.caption" Align="Align.Center">
                                                Seus pedidos aparecerão aqui quando estiverem nessa etapa.
                                            </MudText>
                                        </MudStack>
                                    }
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            @*Carregando*@
            <MudStack Class="w-100 rounded-2 mt-2 h-100" Style="background-color: var(--mud-palette-surface); min-height: 520px" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            </MudStack>
        }

        @if (ItensSelecionadosPArAProximaEtapa.Count > 0)
        {
            <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center align-items-center px-4 py-2"
                      Style="position: fixed; bottom: 0; left: 0; width: 100%; z-index: 1300; background-color: var(--mud-palette-surface); box-shadow: 0 -2px 5px rgba(0,0,0,0.1);">
                <MudText>Você selecionou @ItensSelecionadosPArAProximaEtapa.Count pedidos, deseja envia-los para proxima etapa ?</MudText>

                <MudPaper Elevation="0" Square="false">

                    <MudButton Color="Color.Default" OnClick="@(async () => { ItensSelecionadosPArAProximaEtapa.Clear();})">Descartar</MudButton>
                    <MudButton Color="Color.Success" OnClick="@(async () => { await MudaEtapaDoPedido();})" Class="ml-2">Enviar para proxima etapa</MudButton>

                </MudPaper>
            </MudPaper>
        }

    </MudLayout>
</MudPaper>

@code {
    public bool Carregando { get; set; } = true;
    private List<ClsDeSuporteParaMostrarPedidos> _items = new List<ClsDeSuporteParaMostrarPedidos>();
    public List<ClsDeSuporteParaVizualicacaoDePedidos> ListaDeEtapasDosPedidos = new List<ClsDeSuporteParaVizualicacaoDePedidos>
    {
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "NOVO", Selector = "NOVO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "PREPARANDO", Selector = "PREPARANDO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "DESPACHADO", Selector = "DESPACHADO" },
        new ClsDeSuporteParaVizualicacaoDePedidos { NomeDaEtapa = "FINALIZADO", Selector = "FINALIZADO" },
    };
    public List<ClsDeSuporteParaMostrarPedidos> ItensSelecionadosPArAProximaEtapa = new List<ClsDeSuporteParaMostrarPedidos>();

    private void OnExpandCollapseClick(ClsDeSuporteParaMostrarPedidos sup)
    {
        sup.Expandido = !sup.Expandido;
    }


    protected override async Task OnInitializedAsync()
    {
        await CarregarPedidos();
    }

    public async Task CarregarPedidos()
    {
        try
        {
            var result = await PedidosService.GetPedidosPorPaginaAsync(new QuerysDePedidos());

            if (result?.Data?.Any() == true)
            {
                _items = result.Data.Select(p => new ClsDeSuporteParaMostrarPedidos
                {
                    Pedido = p,
                    Selector = p.EtapaPedido
                }).ToList();
            }
            else
            {
                Snackbar.Add("Nenhum pedido encontrado.", Severity.Warning);
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Nenhum pedido encontrado.", Severity.Warning);
        }
        finally
        {
            Carregando = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task MudaEtapaDoPedido(ClsDeSuporteParaMostrarPedidos? Supor = null)
    {
        if (Supor is not null)
        {
            Snackbar.Add($"Mudando etapa do pedido {Supor.Pedido.Id}...", Severity.Info);

            if (Supor.Selector == "NOVO")
            {
                Supor.Selector = "PREPARANDO";
                await InvokeAsync(StateHasChanged);
                return;
            }

            if (Supor.Selector == "PREPARANDO")
            {
                Supor.Selector = "DESPACHADO"; // Exemplo de mudança de etapa
                await InvokeAsync(StateHasChanged);
                return;
            }

            if (Supor.Selector == "DESPACHADO")
            {
                Supor.Selector = "FINALIZADO";
                Supor.UltimaEtapa = true;
                await InvokeAsync(StateHasChanged);
                return;
            }
        }else if (ItensSelecionadosPArAProximaEtapa.Count > 0)
        {
            foreach (var item in ItensSelecionadosPArAProximaEtapa)
            {
                if (item.Selector == "NOVO")
                {
                    item.Selector = "PREPARANDO";
                    item.Selecionado = false;
                    await InvokeAsync(StateHasChanged);
                    continue;
                }

                if (item.Selector == "PREPARANDO")
                {
                    item.Selector = "DESPACHADO"; // Exemplo de mudança de etapa
                    item.Selecionado = false;
                    await InvokeAsync(StateHasChanged);
                    continue;
                }

                if (item.Selector == "DESPACHADO")
                {
                    item.Selector = "FINALIZADO";
                    item.UltimaEtapa = true;
                    item.Selecionado = false;
                    await InvokeAsync(StateHasChanged);
                    continue;
                }
            }

            ItensSelecionadosPArAProximaEtapa.Clear();
            await InvokeAsync(StateHasChanged);
        }

    }


    //Lógicas se precisar de responsividade
    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    //Lógica do Drawer de edição de produto
    private bool carregandoProdutoParaEdicao = true;
    private ClsProduto? ProdutoSelecionadoParaEdicao = null!;
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }
    private bool _open;
    private Anchor _anchor;
    private string _height = "100%";
    private int _width = 0;
    private string _drawerWidth = "65%";
    private string TitleDoMudStepperPrincipal = "Principal";
    private string TitleDoMudStepperPrecos = "Preços";
    private string TitleDoMudStepperTributacoes = "Tributações";
    private string TitleDoMudStepperFicha = "Ficha Técnica";
    //--------------------------------------------------------------------------------------

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
        => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs args)
    {
        _width = args.BrowserWindowSize.Width;

        // Atualiza o tamanho do drawer com base na largura
        _drawerWidth = _width < 768 ? "95%" : "65%";

        if (_width < 768)
        {
            TitleDoMudStepperPrincipal = "";
            TitleDoMudStepperPrecos = "";
            TitleDoMudStepperTributacoes = "";
            TitleDoMudStepperFicha = "";
        }
        else
        {
            TitleDoMudStepperPrincipal = "Principal";
            TitleDoMudStepperPrecos = "Preços";
            TitleDoMudStepperTributacoes = "Tributações";
            TitleDoMudStepperFicha = "Ficha Técnica";
        }

        return InvokeAsync(StateHasChanged);
    }


    public class ClsDeSuporteParaVizualicacaoDePedidos
    {
        public string NomeDaEtapa = string.Empty;
        public string Selector { get; set; } = "1";
    }


}
