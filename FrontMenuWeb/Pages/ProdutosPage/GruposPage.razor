@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/grupos"
@using FrontMenuWeb.Components.Modais.ModaisDeGrupo
@using FrontMenuWeb.Services
@inject GrupoServices GrupoService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh;">
    <MudLayout>
        <div class="mt-5">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <MudText Typo="Typo.h4" Class="mb-3">Grupos</MudText>
                    <MudText Typo="Typo.body1" Class="mb-3">Lista de grupos cadastrados.</MudText>
                </div>
                <div>
                    <MudButton Disabled="IsLoading ? true : false" @onclick="OpenDialogAddGrupoAsync" Variant="Variant.Filled" Color="Color.Primary">Novo Grupo</MudButton>
                </div>
            </div>

            @if (grupos is null || grupos.Count == 0)
            {
                <AvisoDeDadosVazios ReferenciaDados="grupos" />
            }

            <MudDataGrid Loading=IsLoading Striped="true" T="ClsGrupo" Items="@grupos" class="rounded-3">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Descricao" Title="Nome" />
                    <PropertyColumn Property="x => x.CodigoInterno" Title="Codigo" />
                    <TemplateColumn T="ClsGrupo" Hidden="false" Title="Ultiliza Carro Chefe">
                        <CellTemplate Context="context">
                            @(@context.Item.UltilizarCarroChefe ? "Sim" : "Não")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ClsGrupo" Hidden="false" Title="Editar">
                        <CellTemplate Context="context">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           OnClick="@(() => EditaGrupo(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ClsGrupo" Title="Deletar">
                        <CellTemplate Context="context">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="@(() => RemoveGrupo(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </div>
    </MudLayout>
</MudPaper>

<MudOverlay @bind-Visible="AvisoDeGrupoAlteradoComSucesso" LockScroll="false" DarkBackground="false" AutoClose="true" OnClosed="OnOverlayClosed" />
@code {
    List<ClsGrupo> grupos = new();
    private bool AvisoDeGrupoAlteradoComSucesso = false;
    private string? MensagemDeAlteracaoDeGrupo = String.Empty;
    Color Color = Color.Success;
    private bool IsLoading = true;

    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AtualizaGrupos();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar grupos: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }

    }

    private async Task AtualizaGrupos(bool GrupoFoiExcluidoOuAdicionado = false)
    {
        grupos = await GrupoService.GetGrupos();

        if (grupos is not null)
            grupos = grupos.OrderBy(x => x.CodigoInterno).ToList();
        else
        {
            grupos = new List<ClsGrupo>();
        }
    }

    private async Task OpenDialogAddGrupoAsync()
    {
        var parameters = new DialogParameters
        {
            { "Grupos", grupos }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeAdicionarGrupo>("Adicionar Grupo", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            AvisoDeGrupoAlteradoComSucesso = true;
            Snackbar.Add($"Grupo adicionado com sucesso!", Severity.Success);
            StateHasChanged();
            await AtualizaGrupos();
        }

    }

    private async Task RemoveGrupo(ClsGrupo grupo)
    {
        var parameters = new DialogParameters<ModalDeExcluir>
        {
            { x => x.ContentText, $"Você tem certeza que deseja excluir o grupo {grupo.Descricao}? Essa operação não pode ser desfeita. " },
            { x => x.ButtonText, "sim" },
            { x => x.Color, Color.Error}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            AvisoDeGrupoAlteradoComSucesso = true;
            Snackbar.Add($"Grupo {grupo.Descricao} exclúido com sucesso!", Severity.Success);
            StateHasChanged();
            await GrupoService.DeletarGrupo(grupo);
            await AtualizaGrupos(true);
        }


    }

    private async Task EditaGrupo(ClsGrupo grupo)
    {
        var parameters = new DialogParameters
        {
            { "Grupo", grupo }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeEditarGrupo>("Editar Grupo", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            AvisoDeGrupoAlteradoComSucesso = true;
            Snackbar.Add($"Grupo {grupo.Descricao} alterado com sucesso!", Severity.Success);
            StateHasChanged();
            await AtualizaGrupos(true);
        }
    }


    public void OnOverlayClosed()
    {

    }
}
