@page "/adicionarproduto/{idDeProdutoReaproveitado}"
@page "/adicionarproduto"
@using FrontMenuWeb.Components.Modais.ModaisDeGrupo
@using FrontMenuWeb.Services
@using System.Globalization
@inject ProdutoService ProdutoService
@inject GrupoServices GrupoService
@inject AliquotaService AliquotaService


<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>
        @if (!isLoading)
        {
            <div class="w-100 mb-3"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@(async () => await BackToPage(false)) EndIcon="@Icons.Material.Filled.ArrowBack">Voltar</MudButton></div>
        }

        @if (isLoading)
        {
            <div class="w-100 min-vh-100 d-flex align-items-center justify-content-center">
                <MudProgressLinear Class="mb-3" Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            </div>
        }
        else
        {
            <MudTabs Style="max-height: 100%; overflow: auto;" @ref="_tabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="p-2">
                <MudTabPanel Text="Principais">
                    <MudStack Class="d-flex flex-column justify-content-around w-100">
                        <MudStack>

                            <MudGrid Class="d-flex align-items-stretch px-4">
                                <MudItem xs="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.LastChild">
                                            <MudTextField @bind-Value=@NovoCodigoRecomendado Disabled="true" Class="w-25 m-2" Label="Codigo do produto" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                            <MudTextField @bind-Value=@Produto.Descricao Class="w-75 m-2" Label="Nome do produto" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                        </MudFocusTrap>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12">
                                    @*Codigo de barras*@
                                    <MudExpansionPanels>
                                        <MudExpansionPanel Text="Código de Barras" MaxHeight="150" Expanded="false">
                                            <MudTextField @bind-Value=@Produto.CodBarras Class="m-2" Label="Código de Barras" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                            <div class="barcode">@Produto.CodBarras</div>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>


                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex flex-column  align-center justify-center mud-width-full py-8">
                                        <MudPaper Elevation="0" Square="false" Class="w-100 p-2">
                                            <MudSelect @bind-Value="Produto.Grupo"
                                                       T="ClsGrupo"
                                                       ToStringFunc="g=> g.Descricao"
                                                       Label="Grupo selecionado"
                                                       HelperText="Grupo"
                                                       Placeholder="Escolha seu grupo"
                                                       AdornmentIcon="@Icons.Material.Filled.Fastfood"
                                                       AdornmentColor="Color.Success">

                                                @foreach (var grupo in Grupos)
                                                {
                                                    <MudSelectItem Value="@grupo">@grupo.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>


                                        <MudButton OnClick=OpenDialogAddGrupoAsync StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled">Cadastrar</MudButton>
                                    </MudPaper>

                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.Categoria"
                                                   T="Categoria"
                                                   Class="m-3"
                                                   ToStringFunc="g=> g.Descricao"
                                                   Label="Categoria selecionada"
                                                   HelperText="Categoria"
                                                   Placeholder="Categoria Selecionada"
                                                   AdornmentIcon="@Icons.Material.Filled.FoodBank"
                                                   AdornmentColor="Color.Success"
                                                   Disabled="false">

                                            @foreach (var categoria in Categorias)
                                            {
                                                <MudSelectItem Value="@categoria">@categoria.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="12" Class="h-100">
                                    <MudPaper Class="h-100">
                                        <MudPaper Elevation="0" Square="false" Class="d-flex align-items-center justify-content-center fw-bold"> Impressoras </MudPaper>
                                        <MudPaper Elevation="0" Square="false" Class="d-flex flex-wrap gap-2 justify-between mud-width-full py-8">



                                            <MudSelect Class="m-2"
                                                       @bind-Value="@Produto.ImpressoraComanda1"
                                                       T="string"
                                                       Label="Comanda 1"
                                                       HelperText="Local de impressão"
                                                       Placeholder="Local de impressão"
                                                       AdornmentIcon="@Icons.Material.Filled.ShareLocation"
                                                       AdornmentColor="Color.Success">

                                                <MudSelectItem Value="@("Cz1")">Cozinha 1</MudSelectItem>
                                                <MudSelectItem Value="@("Cz2")">Cozinha 2</MudSelectItem>
                                                <MudSelectItem Value="@("Cz3")">Cozinha 3</MudSelectItem>
                                                <MudSelectItem Value="@("Bar")">Bar</MudSelectItem>
                                                <MudSelectItem Value="@("Nao")">Não Imprime</MudSelectItem>

                                            </MudSelect>

                                            <MudSelect Class="m-2"
                                                       @bind-Value="@Produto.ImpressoraComanda2"
                                                       T="string"
                                                       Label="Comanda 2"
                                                       HelperText="Local de impressão"
                                                       Placeholder="Local de impressão"
                                                       AdornmentIcon="@Icons.Material.Filled.ShareLocation"
                                                       AdornmentColor="Color.Success">

                                                <MudSelectItem Value="@("Cz1")">Cozinha 1</MudSelectItem>
                                                <MudSelectItem Value="@("Cz2")">Cozinha 2</MudSelectItem>
                                                <MudSelectItem Value="@("Cz3")">Cozinha 3</MudSelectItem>
                                                <MudSelectItem Value="@("Bar")">Bar</MudSelectItem>
                                                <MudSelectItem Value="@("Nao")">Não Imprime</MudSelectItem>

                                            </MudSelect>





                                        </MudPaper>

                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                    <MudPaper Class="d-flex flex-wrap gap-2 justify-content-around mud-width-full py-8">
                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Tamanho unico? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup T="bool"
                                                           Value="Produto.TamanhoUnico"
                                                           ValueChanged="@(valor => {Produto.TamanhoUnico = valor; })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Item fracionado ? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup T="bool"
                                                           Value="Produto.Fracionado"
                                                           ValueChanged="@(valor => { Produto.Fracionado = valor; })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Tipo de venda </MudText>
                                            </MudPaper>
                                            <MudRadioGroup T="string"
                                                           Value="Produto.TipoDeVenda"
                                                           ValueChanged="@(valor => { Produto.TipoDeVenda = valor;})">
                                                <MudRadio Value="@("Q")" Color="Color.Success" Dense="true">
                                                    Qtd
                                                </MudRadio>
                                                <MudRadio Value="@("V")" Color="Color.Success" Dense="false">
                                                    Valor
                                                </MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Obs na venda? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup T="bool"
                                                           Value="Produto.ObsNaVenda"
                                                           ValueChanged="@(valor => { Produto.ObsNaVenda = valor; })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>


                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Forma de venda </MudText>
                                            </MudPaper>

                                            <MudRadioGroup T="string"
                                                           Value="Produto.FormaDeVenda"
                                                           ValueChanged="@(valor => { Produto.FormaDeVenda = valor; })">
                                                <MudRadio Value="@("unidade")" Color="Color.Success" Dense="true">
                                                    Unidade
                                                </MudRadio>
                                                <MudRadio Value="@("peso")" Color="Color.Success" Dense="false">
                                                    Peso
                                                </MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                    </MudPaper>
                                </MudItem>


                                <MudItem xs="12" sm="12">
                                    <MudPaper Class="d-flex flex-wrap gap-2 justify-content-around mud-width-full py-8">
                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Item Resgatavel por pontos ? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                           Value="Produto.ItemResgatavel"
                                                           ValueChanged="@(async valor => {Produto.ItemResgatavel = valor;})">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Item Vende Pela Internet ? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                           Value="false"
                                                           ValueChanged="@(valor => { })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Ultiliza produto na balança ? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                           Value="Produto.UltilizaProdutoNaBalanca"
                                                           ValueChanged="@(async valor => { Produto.UltilizaProdutoNaBalanca = valor; })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudText Class="d-flex align-items-center justify-content-center"> Ocultar item no app ? </MudText>
                                            </MudPaper>
                                            <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                           Value="Produto.OcultaTablet"
                                                           ValueChanged="@(async valor => { Produto.OcultaTablet = valor; })">
                                                <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>

                                        <MudPaper Elevation="0" Square="false">
                                            <MudNumericField Immediate="false"
                                                             Variant="Variant.Outlined"
                                                             Label="Valor da Embalagem"
                                                             Format="N2"
                                                             Culture="_pt"
                                                             T="float"
                                                             HideSpinButtons="true"
                                                             @bind-Value="Produto.TaxaDeViagem" />
                                        </MudPaper>

                                        @if (Produto.ItemResgatavel)
                                        {
                                            <MudPaper Elevation="0" Class="w-25" Square="false">
                                                <MudPaper Elevation="0" Class="w-100" Square="false">
                                                    <MudNumericField Class="w-100"
                                                                     T="int"
                                                                     Value="Produto.AcumulaQuanto"
                                                                     Immediate="false"
                                                                     ValueChanged="@(async valor => {Produto.AcumulaQuanto = valor;})"
                                                                     Label="Qtd que acumula"
                                                                     Variant="Variant.Outlined"
                                                                     Step="1"
                                                                     Min="0"
                                                                     Max="100" />
                                                </MudPaper>

                                            </MudPaper>
                                        }

                                    </MudPaper>
                                </MudItem>

                            </MudGrid>



                        </MudStack>

                        <div>
                            <MudButton OnClick="IrParaProximaAba" Color="Color.Primary" Class="mt-4">Próxima Aba</MudButton>

                        </div>
                    </MudStack>
                </MudTabPanel>
                <MudTabPanel Text="Preços">
                    <div class="d-flex flex-column justify-content-around ">
                        @*Div de informações precos*@
                        <div>
                            <MudGrid>

                                @if (!Produto.TamanhoUnico)
                                {
                                    if (Produto.Precos.Count == 0)
                                    {
                                        Produto.Precos.Add(new Preco()
                                        {
                                            DescricaoDoTamanho = "Sem preços definido",
                                            Valor = 0f
                                        });

                                    }

                                    @foreach (var preco in Produto.Precos)
                                    {

                                        <MudItem xs="12">
                                            <MudPaper Class="d-flex flex-wrap gap-2 align-center justify-center mud-width-full py-8">


                                                <MudTextField @bind-Value="preco.DescricaoDoTamanho"
                                                              Disabled="false"
                                                              Class="w-25 m-2"
                                                              Label="Descrição do Tamanho"
                                                              HelperText="Descrição do tamanho"
                                                              Variant="Variant.Text"
                                                              Margin="Margin.Dense" />

                                                <MudTextField @bind-Value="preco.CustosDoInsumo" Disabled="true" Class="w-25 m-2" Label="Custos Insumo" HelperText="Custos dos insumos" Variant="Variant.Text" Margin="Margin.Dense" />

                                                <MudTextField @bind-Value="preco.CustoReal" Disabled="true" Class="w-25 m-2" Label="Custos reais" HelperText="Custos reais" Variant="Variant.Text" Margin="Margin.Dense" />

                                                <MudTextField @bind-Value="preco.PorcentagemDeLucro" Disabled="true" Class="w-25 m-2" Label="% de lucro" HelperText="% de lucro" Variant="Variant.Text" Margin="Margin.Dense" />

                                                <MudNumericField Immediate="false"
                                                                 Label="Valor do tamanho"
                                                                 Format="N2"
                                                                 Culture="_pt"
                                                                 T="float"
                                                                 HideSpinButtons="true"
                                                                 @bind-Value="preco.Valor" />


                                                <MudPaper Elevation="0" Square="false" Class="d-flex w-100 mb-3 justify-content-center align-content-center">
                                                    <MudButton OnClick=@(async p => { await DeletaPreco(preco); }) Color="Color.Error" Variant="Variant.Filled">
                                                        <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Surface" />
                                                    </MudButton>
                                                </MudPaper>

                                            </MudPaper>
                                        </MudItem>
                                    }

                                }
                                else
                                {
                                    var precoMenor = Produto.Precos
                                    .OrderBy(x => x.Valor)
                                    .FirstOrDefault();

                                    if (precoMenor is null)
                                    {
                                        var NovoPreco = new Preco()
                                        {
                                            DescricaoDoTamanho = "Padrão",
                                            Valor = 0f
                                        };

                                        Produto.Precos.Add(NovoPreco);
                                        precoMenor = NovoPreco;
                                    }

                                    <MudItem xs="12">
                                        <MudPaper Class="d-flex flex-wrap gap-2 align-center justify-center mud-width-full py-8">


                                            <MudTextField @bind-Value="precoMenor.DescricaoDoTamanho"
                                                          Disabled="false"
                                                          Class="w-25 m-2"
                                                          Label="Descrição do Tamanho"
                                                          HelperText="Descrição do tamanho"
                                                          Variant="Variant.Text"
                                                          Margin="Margin.Dense" />

                                            <MudTextField @bind-Value="precoMenor.CustosDoInsumo" Disabled="true" Class="w-25 m-2" Label="Custos Insumo" HelperText="Custos dos insumos" Variant="Variant.Text" Margin="Margin.Dense" />

                                            <MudTextField @bind-Value="precoMenor.CustoReal" Disabled="true" Class="w-25 m-2" Label="Custos reais" HelperText="Custos reais" Variant="Variant.Text" Margin="Margin.Dense" />

                                            <MudTextField @bind-Value="precoMenor.PorcentagemDeLucro" Disabled="true" Class="w-25 m-2" Label="% de lucro" HelperText="% de lucro" Variant="Variant.Text" Margin="Margin.Dense" />

                                            <MudNumericField Immediate="false"
                                                             Label="Valor do tamanho"
                                                             Format="N2"
                                                             Culture="_pt"
                                                             T="float"
                                                             HideSpinButtons="true"
                                                             @bind-Value="precoMenor.Valor" />


                                        </MudPaper>
                                    </MudItem>

                                }

                                @if (!Produto.TamanhoUnico)
                                {
                                    <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center align-items-center mud-width-full py-8 mt-2">
                                        <MudButton OnClick="AdicionarNovoPreco" Variant="Variant.Filled" Color="Color.Primary" Class="rounded-1 " style="color: white">Adicionar Preço</MudButton>
                                    </MudPaper>
                                }
                            </MudGrid>
                        </div>

                        <div>
                            <MudButton OnClick="IrParaProximaAba" Color="Color.Primary" Class="mt-4">Próxima Aba</MudButton>

                        </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Tributação">
                    <div class="d-flex flex-column justify-content-around ">
                        @*Div de informações de tributação*@
                        <div>

                            <MudGrid Class="d-flex align-items-stretch">
                                <MudItem xs="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudTextField @bind-Value=@Produto.NCM Disabled="false" Class="w-25 m-2" Label="NCM" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                        <MudTextField @bind-Value=@Produto.CEST Class="w-75 m-2" Label="CEST" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                    </MudPaper>
                                </MudItem>


                                <MudItem xs="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.CSOSNSelected"
                                                   T="CSOSN"
                                                   Class="m-3"
                                                   ToStringFunc="g=> g.Descricao"
                                                   Label="CSOSN"
                                                   Placeholder="Defina o CSOSN">

                                            @foreach (var CSOCN in ListaDeCSOSN)
                                            {
                                                <MudSelectItem Value="@CSOCN">@CSOCN.Id - @CSOCN.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.CSTSelected"
                                                   T="CST"
                                                   Class="m-3"
                                                   ToStringFunc="g=> g.Descricao"
                                                   Label="CST"
                                                   Placeholder="Defina o CST">

                                            @foreach (var CST in ListaDeCSTS)
                                            {
                                                <MudSelectItem Value="@CST">@CST.Id - @CST.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>

                                </MudItem>

                                <MudItem xs="12" sm="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.Aliquota"
                                                   T="ClsAliquota"
                                                   Class="m-3"
                                                   ToStringFunc="g=> g.Descricao"
                                                   Label="Aliquota selecionado"
                                                   HelperText="Aliquota"
                                                   Placeholder="Escolha a alíquota correspondente"
                                                   AdornmentIcon="@Icons.Material.Filled.Percent"
                                                   AdornmentColor="Color.Success">

                                            @foreach (var Aliquota in ListaDeAliquotas)
                                            {
                                                <MudSelectItem Value="@Aliquota">@Aliquota.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.TribPisCofinsSelected"
                                                   T="ClsTribPisConfins"
                                                   ToStringFunc="g => g.Descricao"
                                                   Label="Tibutação Pis/Confins"
                                                   HelperText="SELECIONE"
                                                   Placeholder="SELECIONE A TRIB. PIS/CONFINS CORRESPONDENTE"
                                                   AdornmentColor="Color.Success"
                                                   FullWidth="true"
                                                   Class="m-2"
                                                   ClearIcon="@Icons.Material.Filled.Close"
                                                   Clearable="true"
                                                   FitContent="false">


                                            @foreach (var tibPisCOnfins in ListaDeTibPisCOnfins)
                                            {
                                                <MudSelectItem Value="@tibPisCOnfins">@tibPisCOnfins.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="12">
                                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                        <MudSelect @bind-Value="Produto.OrigemProdutoSelected"
                                                   T="ClsOrigemProduto"
                                                   ToStringFunc="g => g.Descricao"
                                                   Label="Origem do produto"
                                                   HelperText="SELECIONE"
                                                   Placeholder="SELECIONE A ORIGEEM DO PRODUTO."
                                                   AdornmentColor="Color.Success"
                                                   FullWidth="true"
                                                   Class="m-2"
                                                   ClearIcon="@Icons.Material.Filled.Close"
                                                   Clearable="true"
                                                   FitContent="false">


                                            @foreach (var origemProd in ListaDeOrigemDoProdutos)
                                            {
                                                <MudSelectItem Value="@origemProd">@origemProd.Descricao</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>

                        </div>

                        <div>
                            <MudButton OnClick="IrParaProximaAba" Color="Color.Primary" Class="mt-4">Próxima Aba</MudButton>

                        </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Ficha Técnica">
                    <div class="d-flex flex-column justify-content-around ">
                        @*Div de informações de ficha tecnica*@
                        <div>
                        </div>

                        <div>
                            <MudButton OnClick="IrParaProximaAba" Color="Color.Primary" Class="mt-4">Próxima Aba</MudButton>

                        </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Finalizar">
                    <div class="d-flex flex-column justify-content-around">
                        <div>
                            <MudText style="font-weight:bold" Class="text-center">Revise as informações do produto antes de adicionar.</MudText>
                            <MudText style="font-weight:bold" Class="text-center">Certifique-se de que todos os campos obrigatórios estejam preenchidos corretamente.</MudText>
                            <MudText style="font-weight:bold" Class="text-center">Após adicionar, o produto estará disponível para uso no sistema.</MudText>
                            <MudText style="font-weight:bold" Class="text-center">Se precisar de ajuda, consulte a documentação ou entre em contato com o suporte.</MudText>
                            <MudText style="font-weight:bold" Class="text-center">Clique no botão "Adicionar Produto" para concluir o processo.</MudText>
                            <div class="d-flex flex-column justify-content-center align-items-start mt-3">
                                <MudText style="font-weight:bold">Infos do produto:</MudText>
                                <MudText>Descrição: @Produto.Descricao</MudText>
                                <MudText>Categoria: @Produto.Categoria?.Descricao</MudText>
                                <MudText>Grupo: @Produto.Grupo?.Descricao</MudText>
                                <MudText>Código Interno: @Produto.CodigoInterno</MudText>
                                <MudText>Preço(s): @string.Join(", ", Produto.Precos.Select(p => $"{p.DescricaoDoTamanho}: {p.Valor.ToString("C", _pt)}"))</MudText>
                                <MudText>CST: @Produto.CSTSelected?.Descricao</MudText>
                                <MudText>CSOSN: @Produto.CSOSNSelected?.Descricao</MudText>
                                <MudText>ALíquota: @Produto.Aliquota.Descricao</MudText>
                                <MudText>Origem do Produto: @Produto.OrigemProdutoSelected?.Descricao</MudText>
                                <MudText>Tributação Pis/Confins: @Produto.TribPisCofinsSelected?.Descricao</MudText>
                                <MudText>Impressora Comanda 1: @Produto.ImpressoraComanda1</MudText>
                                <MudText>Impressora Comanda 2: @Produto.ImpressoraComanda2</MudText>
                                <MudText>Taxa de Viagem: @Produto.TaxaDeViagem.ToString("C", _pt)</MudText>
                                <MudText>Tamanho Único: @(Produto.TamanhoUnico ? "Sim" : "Não")</MudText>
                                <MudText>Fracionado: @(Produto.Fracionado ? "Sim" : "Não")</MudText>
                                <MudText>Tipo de Venda: @Produto.TipoDeVenda</MudText>
                                <MudText>Obs na Venda: @(Produto.ObsNaVenda ? "Sim" : "Não")</MudText>
                                <MudText>Forma de Venda: @Produto.FormaDeVenda</MudText>
                                <div class="barcode">@Produto.CodBarras</div>
                            </div>
                        </div>
                        <div class="d-flex gap-3 align-items-center justify-content-center">
                            <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center align-items-center mud-width-full py-8 mt-2">
                                <MudButton OnClick="@(() => BackToPage(false))" Variant="Variant.Outlined" Color="Color.Primary" Class="rounded-1 " style="color: red">Cancelar</MudButton>
                                <MudButton OnClick=@(async p => { await AdicionarProduto(); }) Variant="Variant.Filled" Color="Color.Primary" Class="rounded-1 " style="color: white">Adicionar Produto</MudButton>
                            </MudPaper>
                        </div>
                    </div>
                </MudTabPanel>
            </MudTabs>



        }

    </MudLayout>
</MudPaper>



@code {
    [Parameter] public string? idDeProdutoReaproveitado { get; set; }  //id recebido da página de produtos para reaproveitar os dados do produto
    [Parameter][SupplyParameterFromQuery] public string? cilp { get; set; }  //id recebido da página de produtos para reaproveitar os dados do produto
    private ClsProduto Produto { get; set; } = new ClsProduto();
    private bool isLoading = true;
    private MudTabs _tabs;
    public CultureInfo _pt = CultureInfo.GetCultureInfo("pt-BR");
    private string NovoCodigoRecomendado = "0000";
    private List<ClsGrupo> Grupos { get; set; } = new List<ClsGrupo>();
    private List<Categoria> Categorias { get; set; } = new List<Categoria>() { new Categoria { Descricao = "INSUMO", Id = 1 }, new Categoria { Descricao = "CARDÁPIO", Id = 2 }, new Categoria { Descricao = "INSUMO/CARDÁPIO", Id = 3 } };
    public List<CST> ListaDeCSTS = CST.Lista;
    public List<CSOSN> ListaDeCSOSN = CSOSN.Lista;
    public List<ClsAliquota> ListaDeAliquotas { get; set; } = new List<ClsAliquota>();
    public List<ClsTribPisConfins> ListaDeTibPisCOnfins = ClsTribPisConfins.Lista;
    public List<ClsOrigemProduto> ListaDeOrigemDoProdutos = ClsOrigemProduto.Lista;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (idDeProdutoReaproveitado is not null)
            {
                Produto = await ProdutoService.GetProdutoAsync(idDeProdutoReaproveitado);
                Produto.Id = null; // Garantindo que o ID seja nulo para criar um novo produto
            }

            if (cilp is not null)
            {
                //0001

                var ultimoCodigo = cilp.Trim();
                if (int.TryParse(ultimoCodigo, out int codigo))
                {
                    codigo++;
                    NovoCodigoRecomendado = codigo.ToString("D4"); // Formata para 4 dígitos com zeros à esquerda
                    Produto.CodigoInterno = NovoCodigoRecomendado; // Atribui o novo código ao produto
                }
                else
                {
                    ExibeErro("Não foi possivel converter para um código de produto recomendado");
                    NovoCodigoRecomendado = "0000"; // Valor padrão se a conversão falhar
                    Produto.CodigoInterno = NovoCodigoRecomendado; // Atribui o novo código ao produto
                }

            }

            if (Produto.Categoria is null)
            {
                {
                    Produto.Categoria = new Categoria() { Id = 2, Descricao = "CARDÁPIO" };
                    Produto.CategoriaId = Produto.Categoria.Id;
                }
            }
            else
            {
                Produto.CategoriaId = Produto.Categoria.Id;

            }

            if (Produto.Grupo is not null)
            {
                Produto.GrupoId = Produto.Grupo.Id;
            }


            if (Produto.CST is not null)
            {
                var valorDoCst = int.TryParse(Produto.CST, out int result) ? result : 0;
                Produto.CSTSelected = ListaDeCSTS.FirstOrDefault(x => x.Id == valorDoCst) ?? new CST { Id = 0, Descricao = "Não definido" };
            }
            else
            {
                Produto.CSTSelected = new CST { Id = 0, Descricao = "Não definido" };

            }

            if (Produto.csosn is not null)
            {
                var valorDoCsosn = int.TryParse(Produto.csosn, out int result) ? result : 0;
                Produto.CSOSNSelected = ListaDeCSOSN.FirstOrDefault(x => x.Id == valorDoCsosn) ?? new CSOSN { Id = 0, Descricao = "Não definido" };
            }
            else
            {
                Produto.CSOSNSelected = new CSOSN { Id = 0, Descricao = "Não definido" };

            }

            if (Produto.OrigemProduto is not null)
            {
                var iDdAoRIGEMdopROPDUTO = int.TryParse(Produto.OrigemProduto, out int result) ? result : 0;
                Produto.OrigemProdutoSelected = ListaDeOrigemDoProdutos.FirstOrDefault(x => x.Id == iDdAoRIGEMdopROPDUTO) ?? new ClsOrigemProduto { Id = 12, Descricao = "Não definido" };
            }
            else
            {
                Produto.OrigemProdutoSelected = new ClsOrigemProduto { Id = 12, Descricao = "Não definido" };

            }

            if (Produto.TribPisCofins is not null)
            {
                var IdTribPisCOnfins = int.TryParse(Produto.TribPisCofins, out int result) ? result : 0;
                Produto.TribPisCofinsSelected = ListaDeTibPisCOnfins.FirstOrDefault(x => x.Id == IdTribPisCOnfins) ?? new ClsTribPisConfins { Id = 0, Descricao = "Não definido" };
            }
            else
            {
                Produto.TribPisCofinsSelected = new ClsTribPisConfins { Id = 0, Descricao = "Não definido" };

            }

            if (Produto.ImpressoraComanda1 is null)
            {
                Produto.ImpressoraComanda1 = "Não imprime";
            }
            if (Produto.ImpressoraComanda2 is null)
            {
                Produto.ImpressoraComanda2 = "Não imprime";
            }


            await AtualizaGrupos();
            await AtualizaAliquotas();


        }
        catch (Exception ex)
        {
            ExibeErro(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AtualizaGrupos()
    {
        try
        {
            Grupos = await GrupoService.GetGrupos() ?? new List<ClsGrupo>();
        }
        catch (Exception ex)
        {
            ExibeErro(ex.Message);
        }
    }

    private async Task AtualizaAliquotas()
    {
        try
        {
            ListaDeAliquotas = await AliquotaService.GetAliquotas() ?? new List<ClsAliquota>();
        }
        catch (Exception ex)
        {
            ExibeErro(ex.Message);
        }
    }

    private void AdicionarNovoPreco()
    {
        Produto.Precos.Add(new Preco
        {
            DescricaoDoTamanho = "Novo Tamanho",
            Valor = 0
        });
    }

    private async Task DeletaPreco(Preco preco)
    {
        if (Produto.Precos.Count > 1)
        {
            Produto.Precos.Remove(preco);
        }
        else
        {

            Snackbar.Add("Não é possível remover o último preço.", Severity.Error);
        }
    }

    private async Task AdicionarProduto()
    {
        try
        {
            Produto.Id = null;
            foreach (var preco in Produto.Precos)
            {
                preco.Id = null; // Garantindo que os IDs dos preços sejam nulos para criar novos preços
            }
            Produto.CategoriaId = Produto.Categoria?.Id ?? 1; // Garantindo que a categoria seja definida
            Produto.GrupoId = Produto.Grupo?.Id ?? 1; // Garantindo que o grupo seja definido

            var resposta = await ProdutoService.AdicionaProdutoAsync(Produto);

            if (resposta.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto adicionado com sucesso!", Severity.Success);
                await BackToPage(true);
            }
            else
            {
                var errorMessage = await resposta.Content.ReadAsStringAsync();
                throw new Exception($"Erro ao adicionar produto: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ExibeErro(ex.Message);
        }
    }

    private async Task BackToPage(bool depoisDeAdicioarProduto)
    {
        if (!depoisDeAdicioarProduto)
        {
            var parameters = new DialogParameters<ModalDeExcluir>
          {
              { x => x.ContentText, $"Ao sair da página, este produto não será criado. Ele e as informações cadastradas serão perdidas." },
              { x => x.ButtonText, "Sim" },
              { x => x.Color, Color.Error}
          };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Sair da página", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {

                Navigation.NavigateTo("/produtos");
            }
        }
        else
        {
            Navigation.NavigateTo("/produtos", forceLoad: false);

        }
    }

    private void ExibeErro(string mensagemDeErro)
    {
        Snackbar.Add(mensagemDeErro, Severity.Error);
    }


    private void IrParaProximaAba()
    {
        if (_tabs == null) return;

        var totalAbas = _tabs.Panels.Count;
        var proxima = _tabs.ActivePanelIndex + 1;

        // Pula abas desabilitadas
        while (proxima < totalAbas && _tabs.Panels[proxima].Disabled)
        {
            proxima++;
        }

        if (proxima < totalAbas)
        {
            _tabs.ActivePanelIndex = proxima;
        }
    }

    private async Task OpenDialogAddGrupoAsync()
    {
        var parameters = new DialogParameters
        {
            { "Grupos", Grupos }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeAdicionarGrupo>("Adicionar Grupo", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            Snackbar.Add($"Grupo adicionado com sucesso!", Severity.Success);
            await AtualizaGrupos();
            StateHasChanged();
        }

    }
}
