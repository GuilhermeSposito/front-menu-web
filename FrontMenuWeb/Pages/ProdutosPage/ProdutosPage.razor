@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/produtos"
@using FrontMenuWeb.Components.Modais.ModaisDeGrupo
@using FrontMenuWeb.Components.Modais.ModaisDeProdutos
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Extensions.Components
@inject GrupoServices GrupoService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject ProdutoService ProdutoService
@inject AliquotaService AliquotaService
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <MudText Typo="Typo.h4">Produtos</MudText>
                <MudText Class="mb-3" Typo="Typo.body1">Lista de produtos cadastrados.</MudText>
            </div>
            <div class="d-flex">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="carregandoProduto ? true : false" OnClick="@(() => { AddProduto(produtoParaReultilizar: null); })">Novo Produto</MudButton>
            </div>
        </div>

        <MudDataGrid T="ClsProduto"
                     @ref="dataGridRef"
                     EditTrigger="DataGridEditTrigger.Manual"
                     MultiSelection="false"
                     SelectOnRowClick=true
                     Class="rounded-3 custom-striped"
                     Loading="carregandoProduto"
                     Hover
                     ServerData="LoadServerData">
            <ToolBarContent>

                <MudAutocomplete T="string"
                                 SearchFunc="Search"
                                 @bind-Value="StringDePesquisa"
                                 @bind-Value:after="@(() => RecarregarProdutosAposPesquisa())"
                                 Variant="Variant.Outlined"
                                 Label="Produto"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Outlined.Search"
                                 Placeholder="Pesquisar Produto"
                                 MinCharacters="2"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true"
                                 Dense="true"
                                 Clearable />


                <MudSelect @bind-Value="_selectedGrupo" Clearable="true" @bind-Value:after="FiltroDeGrupoAcionado" Label="Filtre Por Grupo" Placeholder="Use Filtro por Grupo" Variant="Variant.Outlined">
                    @foreach (var grupo in Grupos)
                    {
                        <MudSelectItem Value="@grupo">@grupo.Descricao</MudSelectItem>
                    }
                </MudSelect>

            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Descricao" Title="Nome"></PropertyColumn>
                <PropertyColumn Property="x => x.CodigoInterno" Title="Codigo" />
                <TemplateColumn T="ClsProduto" Hidden="false" Title="Preço">
                    <CellTemplate Context="context">
                        @if (context.Item.TamanhoUnico)
                        {
                            var precoMenor = context.Item.Precos
                            .OrderBy(x => x.Valor)
                            .FirstOrDefault() ?? new Preco() { DescricaoDoTamanho = "Sem preço definido", Valor = 0.0 };
                            <MudPaper Elevation="0" Square="false" Class="d-flex w-50 justify-content-center align-items-center">
                                <MudNumericField Immediate="false"
                                                 Variant="Variant.Outlined"
                                                 Format="N2"
                                                 Culture="_pt"
                                                 T="double"
                                                 HideSpinButtons="true"
                                                 @bind-Value="precoMenor.Valor"
                                                 @onfocusout="@(() => AtualizaValorDoProduto(precoMenor, true, context.Item.Id))" />
                            </MudPaper>
                        }
                        else
                        {
                            var CountDeQtdDePrecos = context.Item.Precos.Count;

                            <MudPaper Elevation="0" Square="false" Class="d-flex flex-column justify-content-center align-items-start">
                                <MudText Class="fw-light">Diponivel em</MudText>
                                <MudText Class="fw-bold">@CountDeQtdDePrecos tamanhos</MudText>
                            </MudPaper>




                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsProduto" Title="Ativo">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para ativar/desativar o produto" Color="Color.Primary">
                            <MudSwitch T="bool" Value=@context.Item.Ativo Color="Color.Success" ValueChanged="@(async valor => { context.Item.Ativo = valor; await OnSaveChanges(context.Item); })" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsProduto" Title="Deletar">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para deletar o produto" Color="Color.Error">
                            <MudIconButton OnClick=@(async p => { await DeletaProduto(context.Item); }) Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error" />
                        </MudTooltip>

                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsProduto">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para mais" Color="Color.Primary">
                            <MudMenu Dense
                                     Variant="Variant.Text"
                                     Size="Size.Medium"
                                     Color="Color.Inherit"
                                     Icon="@Icons.Material.TwoTone.MoreVert">

                                <MudMenuItem OnClick=@(async p => AddProduto(context.Item))
                                             Icon="@Icons.Material.TwoTone.CopyAll"
                                             IconColor="Color.Primary"
                                             Label="Reutilizar Dados" />

                                <MudTooltip Text="Clique para editar" Color="Color.Primary">
                                    <MudMenuItem OnClick=@(async p => { await AbrirDrawerAPartirDoBotaoDeEdicao(context.Item); })
                                                 Icon="@Icons.Material.TwoTone.Edit"
                                                 IconColor="Color.Primary"
                                                 Label="Editar Produto" />
                                </MudTooltip>

                            </MudMenu>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>

                <MudDataGridPager T="ClsProduto" RowsPerPageString="Produtos por página" ShowPageNumber="false" AllItemsText="Teste" PageSizeOptions=@(new int[] { 10, 20 }) />

            </PagerContent>
        </MudDataGrid>

    </MudLayout>

    @if (PrecoFoiModificado)
    {
        <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center align-items-center px-4 py-2"
                  Style="position: fixed; bottom: 0; left: 0; width: 100%; z-index: 1300; background-color: var(--mud-palette-surface); box-shadow: 0 -2px 5px rgba(0,0,0,0.1);">
            <MudText>Você alterou @PrecosParaModificar.Count preço. Deseja salvar as alterações?</MudText>

            <MudPaper Elevation="0" Square="false">

                <MudButton Color="Color.Default" OnClick="DescartarPrecos">Descartar</MudButton>
                <MudButton Color="Color.Success" OnClick=@(async p => { await SalvarPrecos(); }) Class="ml-2">Salvar</MudButton>

            </MudPaper>
        </MudPaper>
    }








</MudPaper>




<MudOverlay @bind-Visible="Aviso" LockScroll="false" DarkBackground="false" AutoClose="true" />
@code {
    List<ClsProduto>? Produtos = new();
    private List<Categoria> Categorias { get; set; } = new List<Categoria>() { new Categoria { Descricao = "INSUMO", Id = 1 }, new Categoria { Descricao = "CARDÁPIO", Id = 2 }, new Categoria { Descricao = "INSUMO/CARDÁPIO", Id = 3 } };
    private MudDataGrid<ClsProduto>? dataGridRef;
    private string StringDePesquisa = string.Empty;
    ClsProduto? ExpandedProduto;
    private bool _enableHeaderToggle = true;
    private int NumAba = 1;
    private List<ClsGrupo> Grupos = new();
    private bool Aviso = false;
    public CultureInfo _pt = CultureInfo.GetCultureInfo("pt-BR");
    public bool PrecoFoiModificado = false;
    public List<Preco> PrecosParaModificar = new List<Preco>();
    private bool ReutilizarInfosDoProdutoParaAdicionarNovo = false;
    private bool _editTriggerRowClick; //propriedade que libera o click na coluna
    private ClsProduto? ProdutoSelecionado = new ClsProduto();
    private bool carregandoProduto = true;
    public List<CST> ListaDeCSTS = CST.Lista;
    public List<CSOSN> ListaDeCSOSN = CSOSN.Lista;
    public List<ClsAliquota> ListaDeAliquotas { get; set; } = new List<ClsAliquota>();
    public List<ClsTribPisConfins> ListaDeTibPisCOnfins = ClsTribPisConfins.Lista;
    public List<ClsOrigemProduto> ListaDeOrigemDoProdutos = ClsOrigemProduto.Lista;
    private ClsGrupo _selectedGrupo = null!;

    private void AddProduto(ClsProduto? produtoParaReultilizar)
    {
        try
        {
            if (produtoParaReultilizar is null)
            {
                var ultimoproduto = Produtos?.OrderBy(x => x.CodigoInterno).LastOrDefault() ?? new ClsProduto() { CodigoInterno = "0000" };
                Navigation.NavigateTo($"/adicionarproduto?cilp={ultimoproduto!.CodigoInterno}");

            }
            else
            {
                ProdutoSelecionado = produtoParaReultilizar;
                ReutilizarInfosDoProdutoParaAdicionarNovo = true;

                var ultimoproduto = Produtos?.OrderBy(x => x.CodigoInterno).LastOrDefault();

                Navigation.NavigateTo($"/adicionarproduto/{produtoParaReultilizar.Id}?cilp={ultimoproduto!.CodigoInterno}");
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar produto: {ex.Message}", Severity.Error);
        }
        finally
        {
            carregandoProduto = false;
        }
    }


    private async Task<GridData<ClsProduto>> LoadServerData(GridState<ClsProduto> state)
    {
        try
        {
            carregandoProduto = true;

            int page = state.Page + 1;
            int pageSize = state.PageSize;

            var result = await ProdutoService.GetProdutosPorPaginaAsync(page, pageSize, StringDePesquisa, _selectedGrupo?.Id);



            return new GridData<ClsProduto>
            {
                Items = result.Data,
                TotalItems = result.Total
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar produtos: {ex.Message}", Severity.Error);
            return new GridData<ClsProduto>
            {

            };

        }
        finally
        {
            carregandoProduto = false;
        }

    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AtualizaGrupos();
            await AtualizaAliquotas();
            AtualizaProdutos(); //não aguardar

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao inicializar a página de produtos: {ex.Message}", Severity.Error);
        }
    }

    private async Task AtualizaAliquotas()
    {
        try
        {
            ListaDeAliquotas = await AliquotaService.GetAliquotas();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar alíquotas: {ex.Message}", Severity.Error);
        }
    }

    private async Task AtualizaProdutos(bool ProdutoFoiModificado = false)
    {
        try
        {

            Produtos = await ProdutoService.GetProdutosAsync();

            if (Produtos is not null)
            {
                foreach (var produto in Produtos)
                {
                    if (produto.CST is not null)
                    {
                        var valorDoCst = int.TryParse(produto.CST, out int result) ? result : 0;
                        produto.CSTSelected = ListaDeCSTS.FirstOrDefault(x => x.Id == valorDoCst) ?? new CST { Id = 0, Descricao = "Não definido" };
                    }
                    else
                    {
                        produto.CSTSelected = new CST { Id = 0, Descricao = "Não definido" };

                    }

                    if (produto.csosn is not null)
                    {
                        var valorDoCsosn = int.TryParse(produto.csosn, out int result) ? result : 0;
                        produto.CSOSNSelected = ListaDeCSOSN.FirstOrDefault(x => x.Id == valorDoCsosn) ?? new CSOSN { Id = 0, Descricao = "Não definido" };
                    }
                    else
                    {
                        produto.CSOSNSelected = new CSOSN { Id = 0, Descricao = "Não definido" };

                    }

                    if (produto.OrigemProduto is not null)
                    {
                        var iDdAoRIGEMdopROPDUTO = int.TryParse(produto.OrigemProduto, out int result) ? result : 0;
                        produto.OrigemProdutoSelected = ListaDeOrigemDoProdutos.FirstOrDefault(x => x.Id == iDdAoRIGEMdopROPDUTO) ?? new ClsOrigemProduto { Id = 12, Descricao = "Não definido" };
                    }
                    else
                    {
                        produto.OrigemProdutoSelected = new ClsOrigemProduto { Id = 12, Descricao = "Não definido" };

                    }

                    if (produto.TribPisCofins is not null)
                    {
                        var IdTribPisCOnfins = int.TryParse(produto.TribPisCofins, out int result) ? result : 0;
                        produto.TribPisCofinsSelected = ListaDeTibPisCOnfins.FirstOrDefault(x => x.Id == IdTribPisCOnfins) ?? new ClsTribPisConfins { Id = 0, Descricao = "Não definido" };
                    }
                    else
                    {
                        produto.TribPisCofinsSelected = new ClsTribPisConfins { Id = 0, Descricao = "Não definido" };

                    }




                    if (produto.ImpressoraComanda1 is null)
                    {
                        produto.ImpressoraComanda1 = "Não imprime";
                    }
                    if (produto.ImpressoraComanda2 is null)
                    {
                        produto.ImpressoraComanda2 = "Não imprime";
                    }
                }

                Produtos = Produtos?.OrderBy(x => x.CodigoInterno).ToList();
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao atualizar produto", Severity.Error);
        }
        finally
        {

            carregandoProduto = false;
        }

    }

    private async Task AtualizaGrupos(bool ProdutoFoiModificado = false)
    {
        Grupos = await GrupoService.GetGrupos();
    }


    private async void FiltroDeGrupoAcionado()
    {
        try
        {
            if (dataGridRef != null)
            {
                await dataGridRef.ReloadServerData();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao aplicar filtro de grupo: {ex.Message}", Severity.Error);
        }

    }

    private async Task RecarregarProdutosAposPesquisa()
    {
        try
        {
            if (dataGridRef != null)
            {
                await dataGridRef.ReloadServerData();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao recarregar produtos.", Severity.Error);
        }

    }



    private async Task TrocaAbaDeInfosDoProduto(int numAba = 1)
    {
        NumAba = numAba;
    }

    private async Task OnSaveChanges(ClsProduto produtoModificado)
    {
        try
        {
            Console.WriteLine(produtoModificado.CodigoInterno);

            produtoModificado.ImpressoraComanda1 = TraduzImpressora(produtoModificado.ImpressoraComanda1!);
            produtoModificado.ImpressoraComanda2 = TraduzImpressora(produtoModificado.ImpressoraComanda2!);
            var response = await ProdutoService.EditaProduto(produtoModificado);
            var responseAsString = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add($"{responseAsString}", Severity.Error);
            }
            else
            {
                Snackbar.Add($"Produto {produtoModificado.Descricao} alterado com sucesso!", Severity.Success);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar alterações: {ex.Message}", Severity.Error);
        }

    }

    private async Task AdicionarNovoValor(ClsProduto prod)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "Produto", prod }
            };

            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

            var dialog = await DialogService.ShowAsync<ModalDeAdicionarValor>($"Adicionar valor para o produto {prod.Descricao}", parameters, options: options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {

                Snackbar.Add($"Novo valor adicionado com sucesso!", Severity.Success);
                await AtualizaProdutos();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar alterações: {ex.Message}", Severity.Error);
        }


    }


    private async Task DeletaPreco(Preco preco, ClsProduto produto)
    {
        try
        {
            if (produto.Precos.Count > 1)
            {
                var parameters = new DialogParameters<ModalDeExcluir>
             {
              { x => x.ContentText, $"Você tem certeza que deseja excluir esse preco de {preco.Valor}? Essa operação não pode ser desfeita. " },
              { x => x.ButtonText, "Sim" },
              { x => x.Color, Color.Error}
             };
                var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
                var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
                var result = await dialog.Result;

                if (!result!.Canceled && result.Data is bool sucesso && sucesso)
                {

                    var response = await ProdutoService.DeletaPreco(preco);
                    if (!response.IsSuccessStatusCode)
                    {
                        var ResponseAsString = await response.Content.ReadAsStringAsync();
                        Snackbar.Add($"Erro ao excluir preço: {ResponseAsString}", Severity.Error);
                    }
                    else
                    {
                        Snackbar.Add($"preço de {preco.Valor} exclúido com sucesso!", Severity.Error);
                        await AtualizaProdutos();
                    }

                }

                StateHasChanged();
            }
            else
            {

                Snackbar.Add("Não é possível remover o último preço.", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao excluir preço: {ex.Message}", Severity.Error);
        }
    }

    private string TraduzImpressora(string CodImpressora)
    {
        switch (CodImpressora)
        {
            case "Caixa":
                return "Cai";
            case "Cozinha 1":
                return "Cz1";
            case "Cozinha 2":
                return "Cz2";
            case "Cozinha 3":
                return "Cz3";
            case "Bar":
                return "Bar";
            case "Não":
                return "Nao";
            default:
                return CodImpressora;
        }

    }

    private async Task AtualizaValorDoProduto(Preco preco, bool eMudancaRapida = false, string? idProduto = null)
    {
        try
        {
            if (eMudancaRapida && Produtos is not null)
            {
                if (idProduto is not null)
                {
                    ClsProduto produto = await ProdutoService.GetProdutoAsync(idProduto);
                    var precoAntigo = produto.Precos.FirstOrDefault(x => x.Id == preco.Id);

                    if (preco.Valor != precoAntigo!.Valor)
                    {
                        PrecoFoiModificado = true;
                        PrecosParaModificar.Add(preco);
                    }
                }

            }
            else
            {
                var response = await ProdutoService.EditaPrecoDoProduto(preco);
                var responseAsString = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"{responseAsString}", Severity.Error);
                }
                else
                {
                    Snackbar.Add($"valor alterado com sucesso!", Severity.Success);
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            Snackbar.Add($"Erro ao atualizar valor do produto: {ex.Message}", Severity.Error);
        }


    }

    private async Task DeletaProduto(ClsProduto Prod)
    {
        try
        {
            var parameters = new DialogParameters<ModalDeExcluir>
            {
                  { x => x.ContentText, $"Você tem certeza que deseja excluir o produto {Prod.Descricao}? Essa operação não pode ser desfeita. " },
                  { x => x.ButtonText, "Sim" },
                  { x => x.Color, Color.Error}
             };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {

                var response = await ProdutoService.DeletaProduto(Prod);
                if (!response.IsSuccessStatusCode)
                {
                    var ResponseAsString = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Erro ao excluir produto: {ResponseAsString}", Severity.Error);
                }
                else
                {
                    Snackbar.Add($"Produto {Prod.Descricao} exclúido com sucesso!", Severity.Error);
                    await AtualizaProdutos();
                }

            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao excluir produto: {ex.Message}", Severity.Error);
        }


    }

    public async void DescartarPrecos()
    {
        PrecoFoiModificado = false;
        PrecosParaModificar.Clear();
        await AtualizaProdutos();
        Snackbar.Add("Alterações descartadas.", Severity.Warning);
        StateHasChanged();
    }

    public async Task SalvarPrecos()
    {
        try
        {
            if (PrecosParaModificar.Count > 0)
            {
                foreach (var preco in PrecosParaModificar)
                {
                    var response = await ProdutoService.EditaPrecoDoProduto(preco);
                    if (!response.IsSuccessStatusCode)
                    {
                        var ResponseAsString = await response.Content.ReadAsStringAsync();
                        Snackbar.Add($"Erro ao salvar preço: {ResponseAsString}", Severity.Error);
                    }
                    else
                    {
                        Snackbar.Add($"Preço {preco.Valor} salvo com sucesso!", Severity.Success);
                    }
                }
                PrecoFoiModificado = false;
                PrecosParaModificar.Clear();
                await AtualizaProdutos();
            }
            else
            {
                Snackbar.Add("Nenhum preço foi modificado.", Severity.Warning);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar preços: {ex.Message}", Severity.Error);
        }

    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        try
        {
            if (string.IsNullOrEmpty(value))
            {
                return Produtos.Select(x => x.Descricao!).Distinct();
            }

            return Produtos
                .Where(x =>
                    (x.CodigoInterno?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Descricao?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false))
                .Select(x => x.Descricao!)
                .Distinct();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao pesquisar produtos: {ex.Message}", Severity.Error);
            return Enumerable.Empty<string>();
        }
    }



    //----------------------------------------------------------------------- Definir impressoras

    private string _value;
    private Margin _margin;
    private bool _dense;
    private bool _disabled;
    private bool _readonly;
    private bool _placeholder;
    private bool _helperText;
    private bool _helperTextOnFocus;
    private bool _clearable;
    private bool _fitContent;
    private bool _modal = true;
    private bool _fixed = false;
    private OverflowBehavior _overflowBehavior = OverflowBehavior.FlipOnOpen;
    private DropdownWidth _dropdownWidth = DropdownWidth.Relative;
    private Snackbar _ProdutoModificadoSnackBar;
    private DropdownSettings _dropdownSettings => new DropdownSettings() { Fixed = _fixed, OverflowBehavior = _overflowBehavior, };


    private readonly string[] _states =
    {
        "Cz1","Cz2","Cz3","Bar","Cai","Nao"
    };




    private Categoria _SelectedCategoria;

    private async void FiltroDeCategoriaAcionado()
    {
        try
        {
            if (Produtos is not null && _SelectedCategoria is not null)
            {
                Produtos = Produtos.FindAll(x => x.Categoria!.Id == _SelectedCategoria.Id);
                Snackbar.Add($"Filtro de categoria acionado: {_SelectedCategoria.Descricao}", Severity.Info);
            }

            await AtualizaProdutos();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao aplicar filtro de categoria: {ex.Message}", Severity.Error);
        }

    }



    //Lógica do expand do codigo de barras
    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    //Lógica do Drawer de edição de produto
    private bool carregandoProdutoParaEdicao = true;
    private ClsProduto? ProdutoSelecionadoParaEdicao = null!;
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }
    private bool _open;
    private Anchor _anchor;
    private string _height = "100%";
    private int _width = 0;
    private string _drawerWidth = "65%";
    private string TitleDoMudStepperPrincipal = "Principal";
    private string TitleDoMudStepperPrecos = "Preços";
    private string TitleDoMudStepperTributacoes = "Tributações";
    private string TitleDoMudStepperFicha = "Ficha Técnica";
    //--------------------------------------------------------------------------------------

    private async Task AbrirDrawer(DataGridRowClickEventArgs<ClsProduto> args)
    {
        try
        {
            // Reseta o estado de edição para não editável ao abrir o drawer
            carregandoProdutoParaEdicao = true;

            OpenDrawer(Anchor.End);

            ProdutoSelecionadoParaEdicao = await ProdutoService.GetProdutoAsync(args.Item.Id ?? "");


            carregandoProdutoParaEdicao = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private async Task AbrirDrawerAPartirDoBotaoDeEdicao(ClsProduto produto)
    {
        try
        {
            carregandoProdutoParaEdicao = true;

            OpenDrawer(Anchor.End);

            ProdutoSelecionadoParaEdicao = await ProdutoService.GetProdutoAsync(produto.Id ?? "");

            // Verifica se o produto selecionado para edição não é nulo e atribui os valores das listas de seleção
            if (ProdutoSelecionadoParaEdicao is not null)
            {
                ProdutoSelecionadoParaEdicao.CSOSNSelected = ListaDeCSOSN.FirstOrDefault(c => c.Id.ToString() == ProdutoSelecionadoParaEdicao.csosn);
                ProdutoSelecionadoParaEdicao.CSTSelected = ListaDeCSTS.FirstOrDefault(c => c.Id.ToString() == ProdutoSelecionadoParaEdicao.CST);
                ProdutoSelecionadoParaEdicao.OrigemProdutoSelected = ListaDeOrigemDoProdutos.FirstOrDefault(c => c.Id.ToString() == ProdutoSelecionadoParaEdicao.OrigemProduto);
                ProdutoSelecionadoParaEdicao.TribPisCofinsSelected = ListaDeTibPisCOnfins.FirstOrDefault(c => c.Id.ToString() == ProdutoSelecionadoParaEdicao.TribPisCofins);
                ProdutoSelecionadoParaEdicao.OrigemProdutoSelected = ListaDeOrigemDoProdutos.FirstOrDefault(c => c.Id.ToString() == ProdutoSelecionadoParaEdicao.OrigemProduto);

            }


            carregandoProdutoParaEdicao = false;


        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
        => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs args)
    {
        _width = args.BrowserWindowSize.Width;

        // Atualiza o tamanho do drawer com base na largura
        _drawerWidth = _width < 768 ? "95%" : "65%";

        if (_width < 768)
        {
            TitleDoMudStepperPrincipal = "";
            TitleDoMudStepperPrecos = "";
            TitleDoMudStepperTributacoes = "";
            TitleDoMudStepperFicha = "";
        }
        else
        {
            TitleDoMudStepperPrincipal = "Principal";
            TitleDoMudStepperPrecos = "Preços";
            TitleDoMudStepperTributacoes = "Tributações";
            TitleDoMudStepperFicha = "Ficha Técnica";
        }

        return InvokeAsync(StateHasChanged);
    }

}


<MudDrawer Style="background-color: var(--mud-palette-background);" @bind-Open="@_open" Width="@_drawerWidth" Height="@_height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        @if (carregandoProdutoParaEdicao)
        {
            <MudSkeleton Class="w-50" />
        }
        else
        {
            <MudStack Class="w-100" Justify="Justify.SpaceBetween" Row=true>
                <MudText Typo="Typo.h6">@ProdutoSelecionadoParaEdicao!.Descricao</MudText>


                <MudTooltip Text="Fechar" Color="Color.Primary">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => { _open = false; NumAba = 1; })" Color="Color.Primary" />
                </MudTooltip>

            </MudStack>
        }

    </MudDrawerHeader>
    <MudDrawerContainer>
        <MudCard>
            <MudCardHeader>
                @*-----------------------------PRIMEIRA ETAPA FOTO----------------------------------------*@
                <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center w-100">
                    @if (carregandoProdutoParaEdicao)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                        <MudSkeleton Class="w-50" />
                        <MudSkeleton Class="w-50" />
                    }
                    else
                    {
                        <MudAvatar Size="Size.Large">
                            @(ProdutoSelecionadoParaEdicao!.Descricao!.Length > 1 ? ProdutoSelecionadoParaEdicao.Descricao.Substring(0, 1) : "")
                        </MudAvatar>
                        <MudText Color="Color.Primary">
                            @ProdutoSelecionadoParaEdicao!.Descricao
                        </MudText>
                        <MudText style="font-weight:30; font-size: 10px">
                            Produto Adicionado em 17/01/2000 15:30
                        </MudText>
                    }
                </MudPaper>
                @*-----------------------------PRIMEIRA ETAPA FOTO----------------------------------------*@

            </MudCardHeader>
            <MudCardContent>
                @if (!carregandoProdutoParaEdicao && ProdutoSelecionadoParaEdicao is not null)
                {
                    <MudCard Class="w-100 p-0" style="background-color: var(--mud-palette-background);">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudItem xs="12">
                                    <MudPaper Class="d-flex flex-column align-center justify-center mud-width-fulloverflow-hidden" style="word-break: break-word;">

                                        <MudStepper NonLinear Ripple="false" ScrollableNavigation="false" Class=" align-center justify-center mud-width-full" style="overflow-x: auto;">
                                            <ChildContent>
                                                <MudStep onclick="@(() => TrocaAbaDeInfosDoProduto(1))" Completed="false" Title="@TitleDoMudStepperPrincipal">Informações do produto, como nome, valores, impressão e etc ...</MudStep>
                                                <MudStep onclick="@(() => TrocaAbaDeInfosDoProduto(2))" Completed="false" Title="@TitleDoMudStepperPrecos">Informações do valor do produto.</MudStep>
                                                <MudStep onclick="@(() => TrocaAbaDeInfosDoProduto(3))" Completed="false" Title="@TitleDoMudStepperTributacoes">Informações de tributação do produto</MudStep>
                                                <MudStep onclick="@(() => TrocaAbaDeInfosDoProduto(4))" Completed="false" Title="@TitleDoMudStepperFicha">Ficha técnica do produto</MudStep>
                                            </ChildContent>
                                            <ActionContent Context="stepper">

                                            </ActionContent>
                                        </MudStepper>


                                    </MudPaper>
                                </MudItem>
                            </CardHeaderContent>
                        </MudCardHeader>

                        <MudCardContent>
                            @if (NumAba == 1)
                            {
                                <MudGrid Class="d-flex align-items-stretch">
                                    <MudItem xs="12">
                                        <MudPaper Class="d-flex align-center justify-center py-8">

                                            <MudTextField @bind-Value=@ProdutoSelecionadoParaEdicao.CodigoInterno Disabled="true" Class="w-25 m-2" Label="Codigo do produto" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                            <MudTextField @bind-Value=@ProdutoSelecionadoParaEdicao.Descricao @onfocusout=@(async prop => await OnSaveChanges(ProdutoSelecionadoParaEdicao)) Class="w-75 m-2" Label="Nome do produto" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudExpansionPanels>
                                            <MudExpansionPanel Text="Código de Barras" MaxHeight="150" Expanded="false">
                                                <MudTextField @bind-Value=@ProdutoSelecionadoParaEdicao.CodBarras @onfocusout=@(async prop => await OnSaveChanges(ProdutoSelecionadoParaEdicao)) Class="m-2" Label="Código de Barras" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                                                <div class="barcode">@ProdutoSelecionadoParaEdicao.CodBarras</div>
                                            </MudExpansionPanel>
                                        </MudExpansionPanels>


                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.Grupo"
                                                       SelectedValuesChanged=@(prop=> OnSaveChanges(ProdutoSelecionadoParaEdicao))
                                                       T="ClsGrupo"
                                                       Class="m-3"
                                                       ToStringFunc="g=> g.Descricao"
                                                       Label="Grupo selecionado"
                                                       HelperText="Grupo"
                                                       Placeholder="Escolha seu grupo"
                                                       AdornmentIcon="@Icons.Material.Filled.Fastfood"
                                                       AdornmentColor="Color.Success">

                                                @foreach (var grupo in Grupos)
                                                {
                                                    <MudSelectItem Value="@grupo">@grupo.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.Categoria"
                                                       SelectedValuesChanged=@(async prop=>{ProdutoSelecionadoParaEdicao.CategoriaId = ProdutoSelecionadoParaEdicao.Categoria!.Id; await OnSaveChanges(ProdutoSelecionadoParaEdicao);})
                                                       T="Categoria"
                                                       Class="m-3"
                                                       ToStringFunc="g=> g.Descricao"
                                                       Label="Categoria selecionada"
                                                       HelperText="Categoria"
                                                       Placeholder="Categoria Selecionada"
                                                       AdornmentIcon="@Icons.Material.Filled.FoodBank"
                                                       AdornmentColor="Color.Success"
                                                       Disabled="false">


                                                @foreach (var categoria in Categorias)
                                                {
                                                    <MudSelectItem Value="@categoria">@categoria.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12" Class="h-100">
                                        <MudPaper Class="h-100">
                                            <MudPaper Elevation="0" Square="false" Class="d-flex align-items-center justify-content-center fw-bold"> Impressoras </MudPaper>
                                            <MudPaper Elevation="0" Square="false" Class="d-flex flex-wrap gap-2 justify-between mud-width-full py-8">



                                                <MudSelect Class="m-2"
                                                           @bind-Value="@ProdutoSelecionadoParaEdicao.ImpressoraComanda1"
                                                           T="string"
                                                           SelectedValuesChanged=@(prop=> OnSaveChanges(ProdutoSelecionadoParaEdicao))
                                                           Label="Comanda 1"
                                                           HelperText="Local de impressão"
                                                           Placeholder="Local de impressão"
                                                           AdornmentIcon="@Icons.Material.Filled.ShareLocation"
                                                           AdornmentColor="Color.Success">

                                                    <MudSelectItem Value="@("Cz1")">Cozinha 1</MudSelectItem>
                                                    <MudSelectItem Value="@("Cz2")">Cozinha 2</MudSelectItem>
                                                    <MudSelectItem Value="@("Cz3")">Cozinha 3</MudSelectItem>
                                                    <MudSelectItem Value="@("Bar")">Bar</MudSelectItem>
                                                    <MudSelectItem Value="@("Nao")">Não Imprime</MudSelectItem>

                                                </MudSelect>

                                                <MudSelect Class="m-2"
                                                           @bind-Value="@ProdutoSelecionadoParaEdicao.ImpressoraComanda2"
                                                           T="string"
                                                           SelectedValuesChanged=@(prop=> OnSaveChanges(ProdutoSelecionadoParaEdicao))
                                                           Label="Comanda 2"
                                                           HelperText="Local de impressão"
                                                           Placeholder="Local de impressão"
                                                           AdornmentIcon="@Icons.Material.Filled.ShareLocation"
                                                           AdornmentColor="Color.Success">

                                                    <MudSelectItem Value="@("Cz1")">Cozinha 1</MudSelectItem>
                                                    <MudSelectItem Value="@("Cz2")">Cozinha 2</MudSelectItem>
                                                    <MudSelectItem Value="@("Cz3")">Cozinha 3</MudSelectItem>
                                                    <MudSelectItem Value="@("Bar")">Bar</MudSelectItem>
                                                    <MudSelectItem Value="@("Nao")">Não Imprime</MudSelectItem>

                                                </MudSelect>





                                            </MudPaper>


                                            <MudPaper Class="h-100">
                                                <MudPaper Elevation="0" Square="false" Class="d-flex align-items-center justify-content-center fw-bold"> Cardápío do dia </MudPaper>


                                                <MudPaper Elevation="0" Square="false" Class="d-flex align-items-center justify-content-center mt-4">

                                                    <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center" Elevation="0" Square="false">
                                                        <MudRadioGroup T="bool"
                                                                       Value="ProdutoSelecionadoParaEdicao.CardapioDoDia"
                                                                       ValueChanged="@(valor => { ProdutoSelecionadoParaEdicao.CardapioDoDia = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                            <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                            <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                        </MudRadioGroup>
                                                    </MudPaper>

                                                </MudPaper>

                                                @if (ProdutoSelecionadoParaEdicao.CardapioDoDia)
                                                {
                                                    <MudPaper Elevation="0" Class="d-flex flex-wrap gap-1 justify-content-around align-items-center w-100 mt-2" Square="false">

                                                        <MudPaper Elevation="0" Class="w-100" Square="false">
                                                            <MudNumericField T="int"
                                                                             Value="ProdutoSelecionado.QtdBase"
                                                                             Immediate="false"
                                                                             ValueChanged="@(valor => {ProdutoSelecionadoParaEdicao.QtdBase = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao);})"
                                                                             Label="Qtd Base"
                                                                             Variant="Variant.Outlined"
                                                                             Step="1"
                                                                             Min="0"
                                                                             Max="100" />
                                                        </MudPaper>

                                                        <MudPaper Elevation="0" Class="w-100" Square="false">
                                                            <MudNumericField T="int"
                                                                             Value="ProdutoSelecionado.QtdGuarnicao"
                                                                             Immediate="false"
                                                                             ValueChanged="@(valor => {ProdutoSelecionadoParaEdicao.QtdGuarnicao = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao);})"
                                                                             Label="Qtd Guarnição"
                                                                             Variant="Variant.Outlined"
                                                                             Step="1"
                                                                             Min="0"
                                                                             Max="100" />
                                                        </MudPaper>


                                                        <MudPaper Elevation="0" Class="w-100" Square="false">
                                                            <MudNumericField T="int"
                                                                             Value="ProdutoSelecionadoParaEdicao.QtdCarnes"
                                                                             Immediate="false"
                                                                             ValueChanged="@(valor => {ProdutoSelecionadoParaEdicao.QtdCarnes = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao);})"
                                                                             Label="Qtd Carnes"
                                                                             Variant="Variant.Outlined"
                                                                             Step="1"
                                                                             Min="0"
                                                                             Max="100" />
                                                        </MudPaper>




                                                    </MudPaper>
                                                }


                                            </MudPaper>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="6" sm="6" Class="h-100">
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex flex-wrap gap-2 justify-content-around mud-width-full py-8">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Tamanho unico? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.TamanhoUnico"
                                                               ValueChanged="@(valor => { ProdutoSelecionadoParaEdicao.TamanhoUnico = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Item fracionado ? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.Fracionado"
                                                               ValueChanged="@(valor => { ProdutoSelecionadoParaEdicao.Fracionado = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Tipo de venda </MudText>
                                                </MudPaper>
                                                <MudRadioGroup T="string"
                                                               Value="ProdutoSelecionadoParaEdicao.TipoDeVenda"
                                                               ValueChanged="@(valor => {ProdutoSelecionadoParaEdicao.TipoDeVenda = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="@("Q")" Color="Color.Success" Dense="true">
                                                        Qtd
                                                    </MudRadio>
                                                    <MudRadio Value="@("V")" Color="Color.Success" Dense="false">
                                                        Valor
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Obs na venda? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.ObsNaVenda"
                                                               ValueChanged="@(valor => { ProdutoSelecionadoParaEdicao.ObsNaVenda = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>


                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Forma de venda </MudText>
                                                </MudPaper>

                                                <MudRadioGroup T="string"
                                                               Value="ProdutoSelecionadoParaEdicao.FormaDeVenda"
                                                               ValueChanged="@(valor => { ProdutoSelecionadoParaEdicao.FormaDeVenda = valor; OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="@("unidade")" Color="Color.Success" Dense="true">
                                                        Unidade
                                                    </MudRadio>
                                                    <MudRadio Value="@("peso")" Color="Color.Success" Dense="false">
                                                        Peso
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                        </MudPaper>
                                    </MudItem>


                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex flex-wrap gap-2 justify-content-around mud-width-full py-8">
                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Item Resgatavel por pontos ? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.ItemResgatavel"
                                                               ValueChanged="@(async valor => { ProdutoSelecionadoParaEdicao.ItemResgatavel = valor;await OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Item Vende Pela Internet ? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                               Value="false"
                                                               ValueChanged="@(valor => { })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Ultiliza produto na balança ? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.UltilizaProdutoNaBalanca"
                                                               ValueChanged="@(async valor => { ProdutoSelecionadoParaEdicao.UltilizaProdutoNaBalanca = valor; await OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudPaper Elevation="0" Square="false">
                                                    <MudText Class="d-flex align-items-center justify-content-center"> Ocultar item no app ? </MudText>
                                                </MudPaper>
                                                <MudRadioGroup Class="d-flex justify-content-center align-items-center" T="bool"
                                                               Value="ProdutoSelecionadoParaEdicao.OcultaTablet"
                                                               ValueChanged="@(async valor => { ProdutoSelecionadoParaEdicao.OcultaTablet = valor; await OnSaveChanges(ProdutoSelecionadoParaEdicao); })">
                                                    <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                                                    <MudRadio Value="false" Color="Color.Error" Dense="false">Não</MudRadio>
                                                </MudRadioGroup>
                                            </MudPaper>

                                            <MudPaper Elevation="0" Square="false">
                                                <MudNumericField Immediate="false"
                                                                 Variant="Variant.Outlined"
                                                                 Label="Valor da Embalagem"
                                                                 Format="N2"
                                                                 Culture="_pt"
                                                                 T="float"
                                                                 HideSpinButtons="true"
                                                                 @bind-Value="ProdutoSelecionadoParaEdicao.TaxaDeViagem"
                                                                 @onfocusout="@(async () => await OnSaveChanges(ProdutoSelecionadoParaEdicao))" />
                                            </MudPaper>

                                            @if (ProdutoSelecionadoParaEdicao.ItemResgatavel)
                                            {
                                                <MudPaper Elevation="0" Class="w-25" Square="false">
                                                    <MudPaper Elevation="0" Class="w-100" Square="false">
                                                        <MudNumericField Class="w-100"
                                                                         T="int"
                                                                         Value="ProdutoSelecionadoParaEdicao.AcumulaQuanto"
                                                                         Immediate="false"
                                                                         ValueChanged="@(async valor => {ProdutoSelecionadoParaEdicao.AcumulaQuanto = valor; await OnSaveChanges(ProdutoSelecionadoParaEdicao);})"
                                                                         Label="Qtd que acumula"
                                                                         Variant="Variant.Outlined"
                                                                         Step="1"
                                                                         Min="0"
                                                                         Max="100" />
                                                    </MudPaper>

                                                </MudPaper>
                                            }

                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>

                            }
                            else if (NumAba == 2)
                            {



                                <MudItem xs="12">
                                    <MudGrid>

                                        @if (!ProdutoSelecionadoParaEdicao.TamanhoUnico)
                                        {
                                            @foreach (var preco in ProdutoSelecionadoParaEdicao.Precos)
                                            {
                                                <MudItem xs="12">
                                                    <MudPaper Class="d-flex flex-wrap gap-2 align-center justify-center mud-width-full py-8">


                                                        <MudTextField @onfocusout="@(() => AtualizaValorDoProduto(preco))"
                                                                      @bind-Value="preco.DescricaoDoTamanho"
                                                                      Disabled="false"
                                                                      Class="w-25 m-2"
                                                                      Label="Descrição do Tamanho"
                                                                      HelperText="Descrição do tamanho"
                                                                      Variant="Variant.Text"
                                                                      Margin="Margin.Dense" />

                                                        <MudTextField @bind-Value="preco.CustosDoInsumo" Disabled="true" Class="w-25 m-2" Label="Custos Insumo" HelperText="Custos dos insumos" Variant="Variant.Text" Margin="Margin.Dense" />

                                                        <MudTextField @bind-Value="preco.CustoReal" Disabled="true" Class="w-25 m-2" Label="Custos reais" HelperText="Custos reais" Variant="Variant.Text" Margin="Margin.Dense" />

                                                        <MudTextField @bind-Value="preco.PorcentagemDeLucro" Disabled="true" Class="w-25 m-2" Label="% de lucro" HelperText="% de lucro" Variant="Variant.Text" Margin="Margin.Dense" />

                                                        <MudNumericField Immediate="false"
                                                                         Label="Valor do tamanho"
                                                                         Format="N2"
                                                                         Culture="_pt"
                                                                         T="double"
                                                                         HideSpinButtons="true"
                                                                         @bind-Value="preco.Valor"
                                                                         @onfocusout="@(() => AtualizaValorDoProduto(preco))" />


                                                    </MudPaper>
                                                    <MudPaper Elevation="0" Square="false" Class="d-flex w-100 mb-3 justify-content-center align-content-center">
                                                        <MudButton OnClick=@(async p => { await DeletaPreco(preco, ProdutoSelecionadoParaEdicao); }) Color="Color.Error" Variant="Variant.Filled">
                                                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Surface" />
                                                        </MudButton>
                                                    </MudPaper>
                                                </MudItem>
                                            }

                                        }
                                        else
                                        {
                                            var precoMenor = ProdutoSelecionadoParaEdicao.Precos
                                            .OrderBy(x => x.Valor)
                                            .FirstOrDefault() ?? new Preco() { DescricaoDoTamanho = "Sem preço definido", Valor = 0.0 };

                                            <MudItem xs="12">
                                                <MudPaper Class="d-flex flex-wrap gap-2 align-center justify-center mud-width-full py-8">


                                                    <MudTextField @onfocusout="@(() => AtualizaValorDoProduto(precoMenor))"
                                                                  @bind-Value="precoMenor.DescricaoDoTamanho"
                                                                  Disabled="false"
                                                                  Class="w-25 m-2"
                                                                  Label="Descrição do Tamanho"
                                                                  HelperText="Descrição do tamanho"
                                                                  Variant="Variant.Text"
                                                                  Margin="Margin.Dense" />

                                                    <MudTextField @bind-Value="precoMenor.CustosDoInsumo" Disabled="true" Class="w-25 m-2" Label="Custos Insumo" HelperText="Custos dos insumos" Variant="Variant.Text" Margin="Margin.Dense" />

                                                    <MudTextField @bind-Value="precoMenor.CustoReal" Disabled="true" Class="w-25 m-2" Label="Custos reais" HelperText="Custos reais" Variant="Variant.Text" Margin="Margin.Dense" />

                                                    <MudTextField @bind-Value="precoMenor.PorcentagemDeLucro" Disabled="true" Class="w-25 m-2" Label="% de lucro" HelperText="% de lucro" Variant="Variant.Text" Margin="Margin.Dense" />

                                                    <MudNumericField Immediate="false"
                                                                     Label="Valor do tamanho"
                                                                     Format="N2"
                                                                     Culture="_pt"
                                                                     T="double"
                                                                     HideSpinButtons="true"
                                                                     @bind-Value="precoMenor.Valor"
                                                                     @onfocusout="@(() => AtualizaValorDoProduto(precoMenor))" />


                                                </MudPaper>
                                            </MudItem>

                                        }
                                    </MudGrid>
                                </MudItem>
                                @if (!ProdutoSelecionadoParaEdicao.TamanhoUnico)
                                {
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex flex-wrap gap-2 justify-content-center align-items-center mud-width-full py-8">
                                            <MudButton OnClick=@(async p => { await AdicionarNovoValor(ProdutoSelecionadoParaEdicao); }) Variant="Variant.Filled" Color="Color.Primary" Class="rounded-1 " style="color: white">Adicionar Preço</MudButton>
                                        </MudPaper>
                                    </MudItem>
                                }
                            }
                            else if (NumAba == 3)
                            {
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudTextField Class="m-2" Label="NCM" @bind-value=ProdutoSelecionadoParaEdicao.NCM @onfocusout=@(async prop => await OnSaveChanges(ProdutoSelecionadoParaEdicao)) />
                                            <MudTextField Class="m-2" Label="CEST" @bind-value=ProdutoSelecionadoParaEdicao.CEST @onfocusout=@(async prop => await OnSaveChanges(ProdutoSelecionadoParaEdicao)) />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.CSTSelected"
                                                       SelectedValuesChanged="@(prop => OnSaveChanges(ProdutoSelecionadoParaEdicao))"
                                                       T="CST"
                                                       ToStringFunc="g => g.Descricao?.Length > 10 ? g.Descricao.Substring(0, 10) : g.Descricao"
                                                       Label="CST"
                                                       HelperText="SELECIONE"
                                                       Placeholder="SELECIONE O CST CORRESPONDENTE"
                                                       AdornmentColor="Color.Success"
                                                       FullWidth="true"
                                                       ClearIcon="@Icons.Material.Filled.Close"
                                                       Clearable="true"
                                                       Class="m-2"
                                                       FitContent="false">


                                                @foreach (var CST in ListaDeCSTS)
                                                {
                                                    <MudSelectItem Value="@CST">@CST.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.CSOSNSelected"
                                                       SelectedValuesChanged="@(prop => OnSaveChanges(ProdutoSelecionadoParaEdicao))"
                                                       T="CSOSN"
                                                       ToStringFunc="g => g.Descricao"
                                                       Label="CSOSN"
                                                       HelperText="SELECIONE"
                                                       Placeholder="SELECIONE O CSOSN CORRESPONDENTE"
                                                       AdornmentColor="Color.Success"
                                                       FullWidth="true"
                                                       Class="m-2"
                                                       ClearIcon="@Icons.Material.Filled.Close"
                                                       Clearable="true"
                                                       FitContent="false">



                                                @foreach (var CSOSN in ListaDeCSOSN)
                                                {

                                                    <MudSelectItem Value="@CSOSN">@CSOSN.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.Aliquota"
                                                       SelectedValuesChanged=@(prop=> OnSaveChanges(ProdutoSelecionadoParaEdicao))
                                                       T="ClsAliquota"
                                                       Class="m-3"
                                                       ToStringFunc="g=> g.Descricao"
                                                       Label="Aliquota selecionado"
                                                       HelperText="Aliquota"
                                                       Placeholder="Escolha a alíquota correspondente"
                                                       AdornmentIcon="@Icons.Material.Filled.Percent"
                                                       AdornmentColor="Color.Success">

                                                @foreach (var Aliquota in ListaDeAliquotas)
                                                {
                                                    <MudSelectItem Value="@Aliquota">@Aliquota.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.TribPisCofinsSelected"
                                                       SelectedValuesChanged="@(prop => OnSaveChanges(ProdutoSelecionadoParaEdicao))"
                                                       T="ClsTribPisConfins"
                                                       ToStringFunc="g => g.Descricao"
                                                       Label="Tibutação Pis/Confins"
                                                       HelperText="SELECIONE"
                                                       Placeholder="SELECIONE A TRIB. PIS/CONFINS CORRESPONDENTE"
                                                       AdornmentColor="Color.Success"
                                                       FullWidth="true"
                                                       Class="m-2"
                                                       ClearIcon="@Icons.Material.Filled.Close"
                                                       Clearable="true"
                                                       FitContent="false">


                                                @foreach (var tibPisCOnfins in ListaDeTibPisCOnfins)
                                                {
                                                    <MudSelectItem Value="@tibPisCOnfins">@tibPisCOnfins.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                            <MudSelect @bind-Value="ProdutoSelecionadoParaEdicao.OrigemProdutoSelected"
                                                       SelectedValuesChanged="@(prop => OnSaveChanges(ProdutoSelecionadoParaEdicao))"
                                                       T="ClsOrigemProduto"
                                                       ToStringFunc="g => g.Descricao"
                                                       Label="Origem do produto"
                                                       HelperText="SELECIONE"
                                                       Placeholder="SELECIONE A ORIGEEM DO PRODUTO."
                                                       AdornmentColor="Color.Success"
                                                       FullWidth="true"
                                                       Class="m-2"
                                                       ClearIcon="@Icons.Material.Filled.Close"
                                                       Clearable="true"
                                                       FitContent="false">


                                                @foreach (var origemProd in ListaDeOrigemDoProdutos)
                                                {
                                                    <MudSelectItem Value="@origemProd">@origemProd.Descricao</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            }
                            else if (NumAba == 4)
                            {
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">Aba de ficha técnica</MudPaper>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudCardContent>
                    </MudCard>
                }
                else
                {
                    //--------------------------------------Faz a movimentação de produto carregando---------------------------------///////////////

                    <MudCard Class="w-100 p-0" style="background-color: var(--mud-palette-background);">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudItem xs="12">
                                    <MudPaper Class="d-flex flex-column align-center justify-center mud-width-fulloverflow-hidden" style="word-break: break-word;">

                                        <MudSkeleton Class="w-100" Height="90px" />


                                    </MudPaper>
                                </MudItem>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Class="d-flex align-items-stretch">
                                <MudItem xs="12">
                                    <MudStack Class="w-100" Row=true>
                                        <MudSkeleton Class="w-25" Height="70px" />
                                        <MudSkeleton Class="w-75" Height="70px" />
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12">
                                    <MudSkeleton Class="w-100" Height="90px" />
                                </MudItem>


                                <MudItem xs="12" sm="6">
                                    <MudSkeleton Class="w-100" Height="250px" />
                                </MudItem>


                                <MudItem xs="12" sm="6">
                                    <MudSkeleton Class="w-100" Height="250px" />

                                </MudItem>

                                <MudItem xs="12" sm="12" Class="h-100">
                                    <MudPaper Class="h-100">
                                        <MudPaper Elevation="0" Square="false" Class="d-flex align-items-center justify-content-center fw-bold"> <MudSkeleton Class="w-100"></MudSkeleton> </MudPaper>
                                        <MudPaper Elevation="0" Square="false" Class="d-flex flex-wrap gap-2 justify-between mud-width-full py-8">

                                            <MudSkeleton Height="250px" />
                                            <MudSkeleton Height="250px" />


                                        </MudPaper>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            </MudCardContent>
        </MudCard>
    </MudDrawerContainer>
</MudDrawer>














@*
                    // Parte de edição do produto para depois separar 
                     <ChildRowContent>
               
            </ChildRowContent>


           
                *@