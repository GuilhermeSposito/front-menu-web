@page "/signalr-demo"
@inject IJSRuntime JS

<h3>Conexão Socket.IO</h3>

<p>@status</p>
<p>Última mensagem: @lastMessage</p>

<button @onclick="Connect">Conectar</button>

@code {
    private string status = "Desconectado";
    private string lastMessage = "";

    [JSInvokable]
    public static Task ReceiveMessage(string msg)
    {
        Console.WriteLine($"📩 Mensagem recebida: {msg}");
        return Task.CompletedTask;
    }

    private async Task Connect()
    {
        await JS.InvokeVoidAsync("socketIO.connectSocketIO", "http://localhost:3030");
        status = "Conectado ao servidor Socket.IO";
    }

}














@*@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/claims"
@using System.Security.Claims
@using FrontMenuWeb.Models.Merchant
@using System.Text.Json

<h3>Claims do Usuário</h3>

@if (claims != null)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li><strong>@claim.Type</strong>: @claim.Value</li>
        }
    </ul>
}
else
{
    <p>Carregando...</p>
}

@code {
    private IEnumerable<Claim> claims;
    ClsMerchant merchant = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            claims = user.Claims;

            // Pega a claim do Merchant
            var merchantClaim = claims.FirstOrDefault(c => c.Type == "Merchant");
            if (merchantClaim != null)
            {
                merchant = JsonSerializer.Deserialize<ClsMerchant>(
                    merchantClaim.Value,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );

                // Salva no AppState
                AppState.MerchantLogado = merchant;
            }
        }
    }
}
*@