@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/financeiro/contas"
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeConta
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services.FinanceroServices
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Pessoas
@using MudBlazor.Extensions.Services
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Services
@using MudBlazor.Extensions.Components
@inject ContasService ContasService



<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <MudText Typo="Typo.h4">Contas</MudText>
                <MudText Class="mb-3" Typo="Typo.body1">Lista de Contas Cadastradas</MudText>
            </div>
            <div class="d-flex">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="CarregandoContas ? true : false" OnClick="@(async () => { await AbreModalDeAdicionarConta(); })">Nova Conta</MudButton>
            </div>
        </div>


        <MudDataGrid SelectOnRowClick=true
                     MultiSelection="false"
                     Loading=CarregandoContas
                     Hover
                     T="ClsConta"
                     EditTrigger="DataGridEditTrigger.Manual"
                     Items="@Contas"
                     class="rounded-3"
                     RowClick="@(async (row) => await AbrirEdicaoDeConta(row.Item))">


            <Columns>
                <TemplateColumn Title="Banco">
                    <CellTemplate Context="context">
                        <img src="@AppState.GetBancoIcon(context.Item.CodIconeDoBanco)"
                             alt="Banco"
                             style="width:32px;height:32px;" />
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.Id" Title="Código" />
                <PropertyColumn Property="x => x.NomeConta" Title="Nome" />
                <PropertyColumn Property="x => x.DataInicial" Title="Data Inicial" />


                <TemplateColumn T="ClsConta" Title="Deletar">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para excluir conta" Color="Color.Error">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="@(async () => {await DeletarConta(context.Item);})" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn T="ClsConta">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para mais" Color="Color.Primary">
                            <MudMenu Dense
                                     Variant="Variant.Text"
                                     Size="Size.Medium"
                                     Color="Color.Inherit"
                                     Icon="@Icons.Material.TwoTone.MoreVert">


                                <MudTooltip Text="Clique para editar" Color="Color.Primary">
                                    <MudMenuItem OnClick=@(async p => { await AbrirEdicaoDeConta(context.Item); })
                                                 Icon="@Icons.Material.TwoTone.Edit"
                                                 IconColor="Color.Primary"
                                                 Label="Editar Conta" />
                                </MudTooltip>

                            </MudMenu>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
   

        </MudDataGrid>


    </MudLayout>
</MudPaper>

@code {
    private List<ClsConta> Contas { get; set; } = new List<ClsConta>();
    private bool CarregandoContas { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AtualizarContas();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar contas: {ex.Message}", Severity.Error);
        }
        finally
        {
            CarregandoContas = false;
        }
    }

    private async Task AtualizarContas()
    {
        try
        {
            Contas = await ContasService.GetContasAsync() ?? new List<ClsConta>();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private async Task DeletarConta(ClsConta conta)
    {
        try
        {
            var parameters = new DialogParameters<ModalDeExcluir>
                {
                    { x => x.ContentText, $"Você tem certeza que deseja excluir a conta {conta.NomeConta}? Essa operação não pode ser desfeita. " },
                    { x => x.ButtonText, "sim" },
                    { x => x.Color, Color.Error}
                };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {
                RetornoApiContas responseApi = await ContasService.DeletaContaAsync(conta.Id);

                if (responseApi.Status == "success")
                {
                    await AtualizarContas();
                    Snackbar.Add($"Conta {conta.NomeConta} deletada com sucesso!", Severity.Success);
                }
                else
                {
                    string mensagemDeErro = string.Join(", ", responseApi.Messages);
                    Snackbar.Add(mensagemDeErro, Severity.Error);
                }

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao deletar conta: {ex.Message}", Severity.Error);
        }
    }

    private async Task AbrirEdicaoDeConta(ClsConta conta)
    {
        try
        {
            var parameters = new DialogParameters
                {
                    { "IdConta", conta.Id }
                };

            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };

            var dialog = await DialogService.ShowAsync<ModalDeEditarConta>("Editar Conta", parameters, options: options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {
                Snackbar.Add($"Conta atualizada com sucesso!", Severity.Success);
                await AtualizarContas();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao abrir edição de conta: {ex.Message}", Severity.Error);
        }
    }

    private async Task AbreModalDeAdicionarConta()
    {

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeAdicionarConta>("Adicionar Conta", options: options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            Snackbar.Add($"Conta adicionada com sucesso!", Severity.Success);
            await AtualizarContas();
            StateHasChanged();
        }
    }



    
}
