@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/financeiro/lancamentos"
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeCategorias
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeConta
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeFormas
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeLancamentos
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services.FinanceroServices
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Pessoas
@using MudBlazor.Extensions.Services
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Services
@using MudBlazor.Extensions.Components
@inject LancamentoFinanceiroService LancamentoFinanceiroService

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <MudText Typo="Typo.h4">Lançamentos Financeiro</MudText>
                <MudText Class="mb-3" Typo="Typo.body1">Lista de Lançamentos financeiro cadastrados.</MudText>
            </div>
            <div class="d-flex">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="false" OnClick="@(async () => { await AbreModalDeAdicionarOuEditar(true); })">Novo Lançamento</MudButton>
            </div>
        </div>

        <MudPaper Class="p-2 mb-2 w-100">
            <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" class="w-100">

                <MudStack Class="w-100">
                    <MudStack AlignItems=AlignItems.Center Justify="Justify.Center" Row=true Class="w-100">
                        <MudSelect Placeholder="Nenhum filtro selecionado" SelectedValuesChanged="OnFiltrosChanged" Clearable=true Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" ToStringFunc="c => c?.NomeDoFiltro" HelperText="Selecione os filtros que você deseja aplicar" T="ClsFiltros" Label="Filtros" MultiSelection=true>
                            @foreach (var filtro in Filtros.filtros)
                            {
                                <MudSelectItem T="ClsFiltros" Value="@filtro">@filtro.NomeDoFiltro</MudSelectItem>
                            }
                        </MudSelect>

                        <MudButton Disabled=@(FiltrosSelecionados.Count() == 0 ? true : false) Variant="Variant.Filled" Color="Color.Primary" OnClick="OnCLickFiltro">
                            <MudIcon Icon="@Icons.Material.Filled.FilterList" />
                            Filtrar
                        </MudButton>
                    </MudStack>

                    <MudStack Class="w-100">
                        @foreach (var filtro in FiltrosSelecionados)
                        {
                            <MudCard Style="background-color: var(--mud-palette-background);" Class="p-2 m-1">
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Primary">@filtro.NomeDoFiltro.Substring(0,1)</MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">@filtro.NomeDoFiltro</MudText>                                    
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @switch (filtro.NomeDoFiltro)
                                    {
                                        case "Periodo":
                                            <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                <MudDatePicker @bind-Date="FiltroDateTimeInicial" Label="Data Inicial" />
                                                <MudDatePicker @bind-Date="FiltroDateTimeFinal" Label="Data Final" />
                                            </MudStack>
                                            break;
                                        case "Data de Emissão":
                                            <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                <MudDatePicker @bind-Date="FiltroDataDeEmissão" Label="Data emissão" />
                                            </MudStack>
                                            break;
                                        case "Situação":
                                            <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                <MudRadioGroup @bind-Value=FiltroPago T="bool?">
                                                    <MudRadio T="bool?" Value="true" Color="Color.Primary">Pagos</MudRadio>
                                                    <MudRadio T="bool?" Value="false" Color="Color.Primary">Não Pagos</MudRadio>
                                                </MudRadioGroup>
                                            </MudStack>
                                            break;
                                        case "Descrição":
                                            <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                <MudTextField OnKeyDown="@(e => HandleKeyDown(e))" T="string" @bind-Value=FiltroDescricao Immediate=true Label="Descrição" Placeholder="Digite parte ou a descrição completa do lançamento" />
                                            </MudStack>
                                            break;
                                        default:
                                            <MudText>Filtro não implementado ainda</MudText>
                                            break;
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudStack>

                </MudStack>

            </MudStack>
        </MudPaper>

        <MudDataGrid T="ClsLancamentoFinanceiro"
                     @ref="dataGridRef"
                     EditTrigger="DataGridEditTrigger.Manual"
                     MultiSelection="false"
                     SelectOnRowClick=true
                     Class="rounded-3 custom-striped"
                     Loading="CarregandoLancamentos"
                     Hover
                     HorizontalScrollbar="false"
                     ServerData="LoadServerData"
                     RowClick="@(async (row) => { await AbreModalDeAdicionarOuEditar(false, row.Item); })">
            <ToolBarContent>

            </ToolBarContent>
            <Columns>
                <TemplateColumn Title="Banco">
                    <CellTemplate Context="context">
                        <img src="@AppState.GetBancoIcon(context.Item.Conta.CodIconeDoBanco)"
                             alt="Banco"
                             style="width:32px;height:32px;" />
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Id" Title="Código"></PropertyColumn>
                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Descrição">
                    <CellTemplate Context="context">
                        <MudText>@context.Item.Descricao</MudText>
                        @if (!String.IsNullOrEmpty(context.Item.Identificado))
                        {
                            <MudText> - @context.Item.Identificado</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.TipoDeLancamento.Descricao" Title="Tipo"></PropertyColumn>
                <PropertyColumn Property="x => x.Valor" Title="Valor" Format="C" Culture="@System.Globalization.CultureInfo.GetCultureInfo("pt-BR")"></PropertyColumn>
                <PropertyColumn Property="x => x.DataDeEmissao" Title="Emissão" Format="dd/MM/yyyy"></PropertyColumn>
                <PropertyColumn Property="x => x.DataDeVencimento" Title="Vencimento" Format="dd/MM/yyyy"></PropertyColumn>

                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Ações">
                    <CellTemplate Context="context">

                        @if (context.Item.Pago)
                        {
                            <MudTooltip Text="Clique para declarar como não pago" Color="Color.Primary">
                                <MudIconButton OnClick=@(async p => { context.Item.Pago = false; }) Icon="@Icons.Material.Filled.ThumbUp"
                                               Color="Color.Success" />
                            </MudTooltip>
                        }
                        else
                        {

                            <MudTooltip Text="Clique para declarar como pago" Color="Color.Primary">
                                <MudIconButton OnClick=@(async p => { context.Item.Pago = true; }) Icon="@Icons.Material.Filled.ThumbDown"
                                               Color="Color.Error" />
                            </MudTooltip>
                        }

                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Deletar">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para deletar o lançamento" Color="Color.Error">
                            <MudIconButton OnClick=@(async p => { await DeletaLancamento(context.Item); }) Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error" />
                        </MudTooltip>

                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn T="ClsLancamentoFinanceiro">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para mais" Color="Color.Primary">
                            <MudMenu Dense
                                     Variant="Variant.Text"
                                     Size="Size.Medium"
                                     Color="Color.Inherit"
                                     Icon="@Icons.Material.TwoTone.MoreVert">



                                <MudTooltip Text="Clique para editar" Color="Color.Primary">
                                    <MudMenuItem OnClick=@(async p => { await AbreModalDeAdicionarOuEditar(false, context.Item); })
                                                 Icon="@Icons.Material.TwoTone.Edit"
                                                 IconColor="Color.Primary"
                                                 Label="Editar" />
                                </MudTooltip>

                            </MudMenu>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>

                <MudDataGridPager T="ClsLancamentoFinanceiro" RowsPerPageString="Lançamentos por página" ShowPageNumber="false" AllItemsText="Teste" PageSizeOptions=@(new int[] { 10, 20 }) />

            </PagerContent>
        </MudDataGrid>

    </MudLayout>



</MudPaper>




@code {
    private bool CarregandoLancamentos = false;
    private IEnumerable<ClsLancamentoFinanceiro> LancamentosFinanceiros = new List<ClsLancamentoFinanceiro>();
    private MudDataGrid<ClsLancamentoFinanceiro>? dataGridRef = new();

    private IEnumerable<ClsFiltros> FiltrosSelecionados { get; set; } = new HashSet<ClsFiltros>();


    //lógica do filtros
    private DateTime? FiltroDateTimeInicial = null;
    private DateTime? FiltroDateTimeFinal = null;
    private DateTime? FiltroDataDeEmissão = null;
    private bool? FiltroPago = null;
    private string? FiltroDescricao = null;

    private async Task<GridData<ClsLancamentoFinanceiro>> LoadServerData(GridState<ClsLancamentoFinanceiro> state)
    {
        try
        {
            CarregandoLancamentos = true;

            int page = state.Page + 1;
            int pageSize = state.PageSize;


            var result = await LancamentoFinanceiroService
                                            .GetLancamentosPorPagina(page,
                                                pageSize,
                                                DataInicial: FiltroDateTimeInicial,
                                                DataFinal: FiltroDateTimeFinal,
                                                DataEmissao: FiltroDataDeEmissão,
                                                Pagos: FiltroPago,
                                                FiltroDescricao: FiltroDescricao
                                            );

            return new GridData<ClsLancamentoFinanceiro>
            {
                Items = result.Data,
                TotalItems = result.Total
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar lançamentos: {ex.Message}", Severity.Error);
            return new GridData<ClsLancamentoFinanceiro>
            {

            };

        }
        finally
        {
            CarregandoLancamentos = false;
        }

    }

    private async Task AbreModalDeAdicionarOuEditar(bool CriandoLancamento = false, ClsLancamentoFinanceiro? LancamentoParaEditar = null)
    {
        var IdDoLancamento = 0;

        if (LancamentoParaEditar is not null)
        {
            IdDoLancamento = LancamentoParaEditar.Id;
        }

        var parameters = new DialogParameters
        {
           { "IdDoLancamento", IdDoLancamento},
           { "ECriacao", CriandoLancamento}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeEditarEAdicionarLacamento>(CriandoLancamento ? "Adicionar Lançamento" : "Editar Lançamento", parameters, options: options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            await dataGridRef.ReloadServerData();
            StateHasChanged();
        }
    }

    private async Task DeletaLancamento(ClsLancamentoFinanceiro Lancamento)
    {
        try
        {
            var parameters = new DialogParameters<ModalDeExcluir>
                {
                    { x => x.ContentText, $"Você tem certeza que deseja excluir o lançamento {Lancamento.Descricao}? Atenção, essa ação não pode ser desfeita" },
                    { x => x.ButtonText, "Sim" },
                    { x => x.Color, Color.Error}
                };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {
                var respostaApi = await LancamentoFinanceiroService.DeleteLancamentoAsync(Lancamento);

                string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);

                if (respostaApi.Status == "success")
                    await dataGridRef.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao excluir Lançamento: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnCLickFiltro()
    {
        await dataGridRef!.ReloadServerData();
    }

    private async Task OnFiltrosChanged(IEnumerable<ClsFiltros> filtros)
    {
        if (filtros.Count() == 0)
        {
            FiltroDateTimeInicial = null;
            FiltroDateTimeFinal = null;
            FiltroDataDeEmissão = null;
            FiltroPago = null;
            FiltroDescricao = null;

            await dataGridRef!.ReloadServerData();
        }

        FiltrosSelecionados = filtros;


    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnCLickFiltro();
        }
    }

}
