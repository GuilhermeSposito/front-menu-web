@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/financeiro/lancamentos"
@inject IJSRuntime JS
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeCategorias
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeConta
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeFormas
@using FrontMenuWeb.Components.Modais.ModaisDoFinanceiro.ModaisDeLancamentos
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services.FinanceroServices
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Pessoas
@using MudBlazor.Extensions.Services
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Services
@using MudBlazor.Extensions.Components
@inject LancamentoFinanceiroService LancamentoFinanceiroService
@inject PessoasService PessoasService
@inject MetodosDePagMerchantService MetodosDePagMerchantService

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>

        <div class="d-flex align-items-center justify-content-between">
            <div>
                <MudText Typo="Typo.h4">Lançamentos Financeiro</MudText>
                <MudText Class="mb-3" Typo="Typo.body1">Lista de Lançamentos financeiro cadastrados.</MudText>
            </div>
            <div class="d-flex">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="false" OnClick="@(async () => { await AbreModalDeAdicionarOuEditar(true); })">Novo Lançamento</MudButton>
            </div>
        </div>




        <MudPaper Class="p-2 mb-2 w-100">
            <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" class="w-100">

                <MudStack Class="w-100">
                    <MudStack AlignItems=AlignItems.Center Justify="Justify.Center" Row=true Class="w-100">
                        <MudSelect T="ClsFiltros"
                                   Label="Filtros"
                                   Placeholder="Nenhum filtro selecionado"
                                   MultiSelection="true"
                                   Clearable="true"
                                   ClearIcon="@Icons.Material.Filled.Delete"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Outlined.Search"
                                   HelperText="Selecione os filtros que você deseja aplicar"
                                   ToStringFunc="c => c?.NomeDoFiltro"
                                   SelectedValuesChanged="OnFiltrosChanged"
                                   SelectedValues="FiltrosSelecionados">
                            @foreach (var filtro in Filtros.filtros)
                            {
                                <MudSelectItem Value="@filtro">@filtro.NomeDoFiltro</MudSelectItem>
                            }
                        </MudSelect>

                        <MudButton Disabled=@(FiltrosSelecionados.Count() == 0 ? true : false) Variant="Variant.Filled" Color="Color.Primary" OnClick="OnCLickFiltro">
                            <MudIcon Icon="@Icons.Material.Filled.FilterList" />
                            Filtrar
                        </MudButton>
                    </MudStack>

                    <MudStack Class="w-100">
                        @foreach (var filtro in FiltrosSelecionados)
                        {
                            <MudCard Style="background-color: var(--mud-palette-background);">
                                @if (filtro.NomeDoFiltro == "Periodo")
                                {
                                    <MudTabs ActivePanelIndexChanged="AtualizarPeriodoRapido" Rounded="true" Centered="true" Color="Color.Primary">
                                        <MudTabPanel Text="Mês Passado" />
                                        <MudTabPanel Text="Semana Passada" />
                                        <MudTabPanel Text="Hoje" />
                                        <MudTabPanel Text="Esta Semana" />
                                        <MudTabPanel Text="Semana Que Vem" />
                                        <MudTabPanel Text="Este Mês" />
                                    </MudTabs>
                                }
                                <MudCard Elevation="0" Style="background-color: var(--mud-palette-background);" Class="p-2 m-1">

                                    <MudCardHeader>

                                        <CardHeaderAvatar>
                                            <MudAvatar Color="Color.Primary">@filtro.NomeDoFiltro.Substring(0, 1)</MudAvatar>
                                        </CardHeaderAvatar>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.body1">@filtro.NomeDoFiltro</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        @switch (filtro.NomeDoFiltro)
                                        {
                                            case "Periodo":
                                                <MudStack>
                                                    <MudSelect T="ClsFiltros"
                                                               Label="Filtros de Periodo"
                                                               Placeholder="Nenhum filtro selecionado"
                                                               MultiSelection="false"
                                                               Clearable="true"
                                                               Variant="Variant.Filled"
                                                               AdornmentColor="Color.Primary"
                                                               ClearIcon="@Icons.Material.Filled.Delete"
                                                               Adornment="Adornment.Start"
                                                               AdornmentIcon="@Icons.Material.Outlined.Search"
                                                               HelperText="Selecione os filtros por periodo que você deseja aplicar"
                                                               ToStringFunc="c => c?.NomeDoFiltro"
                                                               SelectedValuesChanged="onFiltroPorPeriodoChenged"
                                                               SelectedValues="FiltroPorPeriodoSelecionados">
                                                        @foreach (var filtro in Filtros.FiltrosDePeriodo)
                                                        {
                                                            <MudSelectItem Value="@filtro">@filtro.NomeDoFiltro</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudStack>
                                                <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                    <MudDatePicker @bind-Date="FiltroDateTimeInicial" Label="Data Inicial" />
                                                    <MudDatePicker @bind-Date="FiltroDateTimeFinal" Label="Data Final" />
                                                </MudStack>
                                                break;
                                            case "Data de Emissão":
                                                <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                    <MudDatePicker @bind-Date="FiltroDataDeEmissão" Label="Data emissão" />
                                                </MudStack>
                                                break;
                                            case "Situação":
                                                <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                    <MudRadioGroup @bind-Value=FiltroPago T="bool?">
                                                        <MudRadio T="bool?" Value="true" Color="Color.Primary">Pagos</MudRadio>
                                                        <MudRadio T="bool?" Value="false" Color="Color.Primary">Não Pagos</MudRadio>
                                                    </MudRadioGroup>
                                                </MudStack>
                                                break;
                                            case "Descrição":
                                                <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                    <MudTextField OnKeyDown="@(e => HandleKeyDown(e))" T="string" @bind-Value=FiltroDescricao Immediate=true Label="Descrição" Placeholder="Digite parte ou a descrição completa do lançamento" HelperText="Clique no botão de filtro ou aperte enter para buscar!" />
                                                </MudStack>
                                                break;
                                            case "Data de Pagamento":
                                                <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                    <MudDatePicker @bind-Date="FiltroDataDePagamento" Label="Data De Pagamento" />
                                                </MudStack>
                                                break;
                                            case "Data de Vencimento":
                                                <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                                                    <MudDatePicker @bind-Date="FiltroDataDeVencimento" Label="Data De Vencimento" />
                                                </MudStack>
                                                break;
                                            case "Fornecedor":
                                                <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                    <MudAutocomplete T="ClsPessoas"
                                                                     SearchFunc="Search"
                                                                     Value="PessoaSelecionadaParaOFiltro"
                                                                     ToStringFunc="p => p?.Nome"
                                                                     Label="Fornecedores / Clientes"
                                                                     Placeholder="Digite o nome do fornecedor ou cliente"
                                                                     HelperText="Procure pelo cliente ou pelo fornecedor"
                                                                     Dense="true"
                                                                     DebounceInterval="200"
                                                                     Clearable
                                                                     Adornment="Adornment.End"
                                                                     AdornmentIcon="@Icons.Material.Outlined.Search"
                                                                     ResetValueOnEmptyText="true"
                                                                     CoerceText="true"
                                                                     ValueChanged="@(async p => await OnPessoaSelecionada(p))"
                                                                     ShowProgressIndicator="true">
                                                        <ProgressIndicatorTemplate>
                                                            <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
                                                        </ProgressIndicatorTemplate>
                                                    </MudAutocomplete>
                                                </MudStack>
                                                break;
                                            case "Método de Pagamento":
                                                <MudSelect T="ClsMetodosDePagMerchant"
                                                           Label="Método de Pagamento"
                                                           Value="MetodoSelecionadoraOFiltro"
                                                           Placeholder="Nenhum filtro para Método selecionado selecionado"
                                                           MultiSelection="false"
                                                           Clearable="true"
                                                           ClearIcon="@Icons.Material.Filled.Delete"
                                                           Adornment="Adornment.Start"
                                                           AdornmentIcon="@Icons.Material.Outlined.Search"
                                                           HelperText="Selecione os métodos para filtrar o que você deseja"
                                                           ToStringFunc="c => c?.Descricao"
                                                           ValueChanged="@(async (metodo) => await OnMetodoSelecionado(metodo))">
                                                    @foreach (var metodo in MetodosDePagamentosParaOFiltro)
                                                    {
                                                        <MudSelectItem Value="@metodo">@metodo.Descricao</MudSelectItem>
                                                    }
                                                </MudSelect>
                                                break;
                                            case "Tipo de Lançamento":
                                                <MudStack Class="w-100" Row=true AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                                    <MudRadioGroup @bind-Value=FiltroTipoDeLancamento T="int?">
                                                        <MudRadio T="int?" Value="2" Color="Color.Primary">Despesa</MudRadio>
                                                        <MudRadio T="int?" Value="1" Color="Color.Primary">Receita</MudRadio>
                                                    </MudRadioGroup>
                                                </MudStack>
                                                break;
                                            default:
                                                <MudText>Filtro não implementado ainda</MudText>
                                                break;
                                        }
                                    </MudCardContent>

                                </MudCard>
                            </MudCard>
                        }
                    </MudStack>

                </MudStack>

            </MudStack>
        </MudPaper>

        <MudPaper Class="mb-3 p-3 mt-3 w-100">
            <MudStack Class="p-2 w-100" Breakpoint="Breakpoint.Sm">

                <MudStack AlignItems=AlignItems.Start Justify="Justify.FlexStart">
                    <MudStack Class="w-100" Row=true AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                        <MudStack Class="w-25" Row=true AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                            <MudText>Seleção de Lançamentos</MudText>
                            <MudSwitch T="bool" Value=@MultiSelecao Color="Color.Success" ValueChanged="@(async valor => { MultiSelecao = valor; LancamentosSelecionados.Clear(); })" />
                        </MudStack>
                        <MudStack Class="w-75" AlignItems="AlignItems.End" Justify="Justify.Center">
                            @if (MultiSelecao)
                            {
                                <MudStack>
                                    <MudText Color="Color.Error" Typo="Typo.h6">Valor Despesas: @LancamentosSelecionados.Where(x => x.TipoDeLancamento.fator == -1).Sum(x => x.Valor).ToString("C")</MudText>
                                    <MudText Color="Color.Success" Typo="Typo.h6">Valor Receitas: @LancamentosSelecionados.Where(x => x.TipoDeLancamento.fator == 1).Sum(x => x.Valor).ToString("C")</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudStack>
                    <MudStack Wrap="Wrap.Wrap" Row=true AlignItems="AlignItems.Center">
                        @foreach (var lancamento in LancamentosSelecionados)
                        {
                            <MudChip Value=@lancamento OnClose="Closed" T="ClsLancamentoFinanceiro" Color="Color.Info" Variant="Variant.Text" Class="m-1">@lancamento.Descricao</MudChip>
                        }
                    </MudStack>
                </MudStack>
                @if (LancamentosSelecionados.Count > 0)
                {
                    <MudStack Row=true>
                        <MudButton Color="Color.Primary" OnClick=@(async p => { await DeclaraPagos(); }) Variant="Variant.Filled">Declarar Todos como pago</MudButton>
                        <MudButton Color="Color.Primary" OnClick=@(async p => { await ApagaTodos(); }) Variant="Variant.Filled">Excluir Selecionados</MudButton>
                        <MudButton Color="Color.Primary" OnClick=@(async p => { await GerarPdf(); }) Variant="Variant.Filled">Gerar Relatório</MudButton>
                    </MudStack>
                }
            </MudStack>
        </MudPaper>


        <MudDataGrid T="ClsLancamentoFinanceiro"
                     @ref="dataGridRef"
                     EditTrigger="DataGridEditTrigger.Manual"
                     MultiSelection=@MultiSelecao
                     SelectOnRowClick=@MultiSelecao
                     Class="rounded-3 custom-striped"
                     Loading="CarregandoLancamentos"
                     Hover
                     HorizontalScrollbar="false"
                     ServerData="LoadServerData"
                     SelectedItems="LancamentosSelecionados"
                     SelectedItemsChanged="SelectedItemsChanged">
            <NoRecordsContent>
                <AvisoDeDadosVazios ReferenciaDados="Lançamentos financeiro" />
            </NoRecordsContent>
            <ToolBarContent>

            </ToolBarContent>
            <Columns>
                @if (MultiSelecao)
                {
                    <SelectColumn T="ClsLancamentoFinanceiro" />
                }

                <TemplateColumn Title="Banco">
                    <CellTemplate Context="context">
                        <img src="@AppState.GetBancoIcon(context.Item.Conta.CodIconeDoBanco)"
                             alt="Banco"
                             style="width:32px;height:32px;" />
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Id" Title="Código"></PropertyColumn>
                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Descrição">
                    <CellTemplate Context="context">
                        <MudStack Class="w-100" Spacing="0">
                            @if (context.Item.Parcelado)
                            {
                                <MudText>@context.Item.QtdAtualDaParcela / @context.Item.QtdParcelas</MudText>
                                <MudDivider Light=true Class="my-2" />
                            }
                            else if (context.Item.EDespesaFixa)
                            {
                                @*   <MudText>@context.Item.QtdAtualDaParcela / @context.Item.QtdMesesDeDespesaFixa</MudText>
                                <MudDivider Light=true Class="my-2" />*@
                            }



                            <MudItem xs="12" sm="6" md="4">
                                <MudText>@context.Item.Descricao</MudText>
                            </MudItem>


                            @if (!String.IsNullOrEmpty(context.Item.Identificado))
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudDivider Light=true Class="my-2" />
                                    <MudText> @context.Item.Identificado</MudText>
                                </MudItem>

                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Tipo">
                    <CellTemplate Context="context">
                        <MudText Color=@(context.Item.TipoDeLancamento.fator == 1 ? Color.Success : Color.Error)>@context.Item.TipoDeLancamento.Descricao</MudText>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Valor">
                    <CellTemplate Context="context">
                        <MudText Style="font-weight:600" Color=@(context.Item.TipoDeLancamento.fator == 1 ? Color.Success : Color.Error)>@context.Item.Valor.ToString("C")</MudText>
                    </CellTemplate>
                </TemplateColumn>
                @* <PropertyColumn Property="x => x.Valor" Title="Valor" Format="C" CellStyle="color:red;font-weight:600" Culture="@System.Globalization.CultureInfo.GetCultureInfo("pt-BR")"></PropertyColumn>*@
                <PropertyColumn Property="x => x.DataDeEmissao" Title="Emissão" Format="dd/MM/yyyy"></PropertyColumn>
                <PropertyColumn Property="x => x.DataDeVencimento" Title="Vencimento" Format="dd/MM/yyyy"></PropertyColumn>
                <PropertyColumn Property="x => x.MetodoDePagamento.Descricao" Title="Método"></PropertyColumn>

                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Ações">
                    <CellTemplate Context="context">

                        @if (context.Item.Pago)
                        {
                            <MudTooltip Text="Clique para declarar como não pago" Color="Color.Primary">
                                <MudIconButton OnClick=@(async p => { context.Item.Pago = false; await AtualizaLancamnto(context.Item, true); }) Icon="@Icons.Material.Filled.ThumbUp"
                                               Color="Color.Success" />
                            </MudTooltip>
                        }
                        else
                        {

                            <MudTooltip Text="Clique para declarar como pago" Color="Color.Primary">
                                <MudIconButton Disabled=@(CarregandoLancamentos) OnClick=@(async p => { context.Item.Pago = true; await AtualizaLancamnto(context.Item, true); }) Icon="@Icons.Material.Filled.ThumbDown"
                                               Color="Color.Error" />
                            </MudTooltip>
                        }

                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn T="ClsLancamentoFinanceiro" Title="Deletar">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para deletar o lançamento" Color="Color.Error">
                            <MudIconButton OnClick=@(async p => { await DeletaLancamento(context.Item); }) Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error" />
                        </MudTooltip>

                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn T="ClsLancamentoFinanceiro">
                    <CellTemplate Context="context">
                        <MudTooltip Text="Clique para mais" Color="Color.Primary">
                            <MudMenu Dense
                                     Variant="Variant.Text"
                                     Size="Size.Medium"
                                     Color="Color.Inherit"
                                     Icon="@Icons.Material.TwoTone.MoreVert">



                                <MudTooltip Text="Clique para editar" Color="Color.Primary">
                                    <MudMenuItem OnClick=@(async p => { await AbreModalDeAdicionarOuEditar(false, context.Item); })
                                                 Icon="@Icons.Material.TwoTone.Edit"
                                                 IconColor="Color.Primary"
                                                 Label="Editar" />
                                </MudTooltip>

                            </MudMenu>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>

                <MudDataGridPager T="ClsLancamentoFinanceiro" RowsPerPageString="Lançamentos por página" ShowPageNumber="false" AllItemsText="Teste" PageSizeOptions=@(new int[] { 10, 20, 50, 100, 200, 500 }) />

            </PagerContent>
        </MudDataGrid>

        <MudGrid Class="w-100 mt-4" GutterSize="3">
            <!-- Total Pagos -->
            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="rounded-2xl shadow-lg" Style="background: linear-gradient(135deg, #1B7FDB, #4AA8F0); color:white;">
                    <MudCardContent Class="flex flex-col items-center justify-center h-36">
                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="@Size.Medium" Class="mb-2 text-green-300" />
                        <MudText Typo="Typo.h6" Class="opacity-90">Total Pagos</MudText>
                        <MudText Typo="Typo.h4" Style="font-weight:600;">@TotalPagos.ToString("C")</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Total Não Pagos -->
            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="rounded-2xl shadow-lg" Style="background: linear-gradient(135deg, #409B44, #66BB6A); color:white;">
                    <MudCardContent Class="flex flex-col items-center justify-center h-36">
                        <MudIcon Icon="@Icons.Material.Filled.PendingActions" Size="@Size.Medium" Class="mb-2 text-red-300" />
                        <MudText Typo="Typo.h6" Class="opacity-90">Total Em Aberto</MudText>
                        <MudText Typo="Typo.h4" Style="font-weight:600;">@TotalNaoPagos.ToString("C")</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Total Geral -->
            <MudItem xs="12" sm="12" md="4">
                <MudCard Class="rounded-2xl shadow-lg" Style="background: linear-gradient(135deg, #F88113, #FFB347); color:white;">
                    <MudStack Row=true>
                        <MudCardContent Class="flex flex-col items-center justify-center h-36">
                            <MudIcon Icon="@Icons.Material.Filled.Summarize" Size="@Size.Medium" Class="mb-2 text-yellow-200" />
                            <MudText Typo="Typo.h6" Class="opacity-90">Total Receita</MudText>
                            <MudText Typo="Typo.h4" Style="font-weight:600;">@TotalReceitas.ToString("C")</MudText>
                        </MudCardContent>
                        <MudCardContent Class="flex flex-col items-center justify-center h-36">
                            <MudIcon Icon="@Icons.Material.Filled.Summarize" Size="@Size.Medium" Class="mb-2 text-yellow-200" />
                            <MudText Typo="Typo.h6" Class="opacity-90">Total Despesas</MudText>
                            <MudText Typo="Typo.h4" Style="font-weight:800;">@TotalDespesas.ToString("C")</MudText>
                        </MudCardContent>
                    </MudStack>
                </MudCard>
            </MudItem>
        </MudGrid>



    </MudLayout>



</MudPaper>




@code {
    private bool CarregandoLancamentos = false;
    private IEnumerable<ClsLancamentoFinanceiro> LancamentosFinanceiros = new List<ClsLancamentoFinanceiro>();
    private MudDataGrid<ClsLancamentoFinanceiro>? dataGridRef = new();

    private IEnumerable<ClsFiltros> FiltrosSelecionados { get; set; } = new HashSet<ClsFiltros>() { Filtros.filtros.FirstOrDefault(x => x.NomeDoFiltro == "Periodo")! };
    private IEnumerable<ClsFiltros> FiltroPorPeriodoSelecionados { get; set; } = new HashSet<ClsFiltros>() { Filtros.FiltrosDePeriodo.FirstOrDefault(x => x.NomeDoFiltro == "Data de Vencimento")! };
    private bool MultiSelecao = false;
    ClsConta ContaMaisUsada = new ClsConta();

    //lógica do filtros
    private DateTime? FiltroDateTimeInicial = null;
    private DateTime? FiltroDateTimeFinal = null;
    private DateTime? FiltroDataDeEmissão = null;
    private DateTime? FiltroDataDePagamento = null;
    private DateTime? FiltroDataDeVencimento = null;
    private int? FiltroTipoDeLancamento = null; // 1 = Receita, 2 = Despesa
    private bool? FiltroPago = null;
    private string? FiltroDescricao = null;
    private ClsPessoas? PessoaSelecionadaParaOFiltro = null;
    private List<ClsPessoas> PessoasParaOFiltro = new List<ClsPessoas>();
    private List<ClsMetodosDePagMerchant> MetodosDePagamentosParaOFiltro = new List<ClsMetodosDePagMerchant>();
    private ClsMetodosDePagMerchant? MetodoSelecionadoraOFiltro = null;

    //Valores de retorno
    private float TotalPagos = 0;
    private float TotalNaoPagos = 0;
    private float TotalGeral = 0;
    private float TotalDespesas = 0;
    private float TotalReceitas = 0;


    private async Task<GridData<ClsLancamentoFinanceiro>> LoadServerData(GridState<ClsLancamentoFinanceiro> lancamentos)
    {
        try
        {
            CarregandoLancamentos = true;

            int page = lancamentos.Page + 1;
            int pageSize = lancamentos.PageSize;


            var result = await LancamentoFinanceiroService
                                            .GetLancamentosPorPagina(page,
                                                pageSize,
                                                DataInicial: FiltroDateTimeInicial,
                                                DataFinal: FiltroDateTimeFinal,
                                                DataEmissao: FiltroDataDeEmissão,
                                                Pagos: FiltroPago,
                                                FiltroDescricao: FiltroDescricao,
                                                FiltroDataPagamento: FiltroDataDePagamento,
                                                FiltroDataDeVencimento: FiltroDataDeVencimento,
                                                FiltroDePessoa: PessoaSelecionadaParaOFiltro,
                                                FiltroDeMetodoDePagamento: MetodoSelecionadoraOFiltro,
                                                FiltroDeTipoDeLancamento: FiltroTipoDeLancamento,
                                                TiposDeFiltrosDePeriodo: FiltroPorPeriodoSelecionados
                                            );


            TotalPagos = result.totalPago;
            TotalNaoPagos = result.totalNaoPago;
            TotalGeral = result.totalEmLancamentos;
            TotalDespesas = result.totalDespesa;
            TotalReceitas = result.totalReceita;

            StateHasChanged();

            return new GridData<ClsLancamentoFinanceiro>
            {
                Items = result.Data,
                TotalItems = result.Total
            };

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar lançamentos: {ex.Message}", Severity.Error);
            return new GridData<ClsLancamentoFinanceiro>
            {

            };

        }
        finally
        {
            CarregandoLancamentos = false;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await MetodosDePagMerchantService.GetMetodosAsync();
            MetodosDePagamentosParaOFiltro = result ?? new List<ClsMetodosDePagMerchant>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar métodos de pagamento: {ex.Message}", Severity.Error);
        }

    }

    private async Task AbreModalDeAdicionarOuEditar(bool CriandoLancamento = false, ClsLancamentoFinanceiro? LancamentoParaEditar = null)
    {
        bool TemPermissao = await VerificaPermissao();
        if (!TemPermissao)
        {
            await AbreMensagemDeAcessoNegado();
            return;
        }

        var IdDoLancamento = 0;

        if (LancamentoParaEditar is not null)
        {
            IdDoLancamento = LancamentoParaEditar.Id;
        }

        var parameters = new DialogParameters
        {
           { "IdDoLancamento", IdDoLancamento},
           { "ECriacao", CriandoLancamento}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeEditarEAdicionarLacamento>(CriandoLancamento ? "Adicionar Lançamento" : "Editar Lançamento", parameters, options: options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            await dataGridRef.ReloadServerData();
            StateHasChanged();
        }
    }

    private async Task DeletaLancamento(ClsLancamentoFinanceiro Lancamento)
    {
        try
        {
            bool TemPermissao = await VerificaPermissao();
            if (!TemPermissao)
            {
                await AbreMensagemDeAcessoNegado();
                return;
            }

            var parameters = new DialogParameters<ModalDeExcluir>
                {
                    { x => x.ContentText, $"Você tem certeza que deseja excluir o lançamento {Lancamento.Descricao}? Atenção, essa ação não pode ser desfeita" },
                    { x => x.ButtonText, "Sim" },
                    { x => x.Color, Color.Error}
                };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {
                var respostaApi = await LancamentoFinanceiroService.DeleteLancamentoAsync(Lancamento);

                string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);

                if (respostaApi.Status == "success")
                    await dataGridRef!.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao excluir Lançamento: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnCLickFiltro()
    {
        await dataGridRef!.ReloadServerData();
    }

    private async Task OnFiltrosChanged(IEnumerable<ClsFiltros> filtros)
    {
        if (filtros.Count() == 0)
        {
            FiltroDateTimeInicial = null;
            FiltroDateTimeFinal = null;
            FiltroDataDeEmissão = null;
            FiltroPago = null;
            FiltroDescricao = null;
            FiltroDataDePagamento = null;
            FiltroDataDeVencimento = null;
            PessoaSelecionadaParaOFiltro = null;
            MetodoSelecionadoraOFiltro = null;
            FiltroTipoDeLancamento = null;

            await dataGridRef!.ReloadServerData();
        }

        FiltrosSelecionados = filtros;


    }

    private async Task onFiltroPorPeriodoChenged(IEnumerable<ClsFiltros> filtros)
    {
        if (filtros.Count() == 0)
        {
            FiltroDateTimeInicial = null;
            FiltroDateTimeFinal = null;

            await dataGridRef!.ReloadServerData();
        }

        FiltroPorPeriodoSelecionados = filtros;


    }

    void Closed(MudChip<ClsLancamentoFinanceiro> chip)
    {
        if (chip.Value is not null)
        {
            LancamentosSelecionados.Remove(chip.Value);
            StateHasChanged();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnCLickFiltro();
        }
    }


    private async Task AtualizaLancamnto(ClsLancamentoFinanceiro lancamento, bool atualizandoPago = false)
    {
        bool TemPermissao = await VerificaPermissao();
        if (!TemPermissao)
        {
            await AbreMensagemDeAcessoNegado();
            return;
        }

        if (atualizandoPago && lancamento.Pago)
        {
            lancamento.DataDePagamento = DateTime.Today;

        }
        else if (atualizandoPago && !lancamento.Pago)
        {
            lancamento.DataDePagamento = null;
        }


        var ResponsaApi = await LancamentoFinanceiroService.UpdateLancamentoAsync(lancamento);

        string MensagemDeRetorno = string.Join(", ", ResponsaApi.Status == "success" ? ResponsaApi.Data.Messages : ResponsaApi.Messages);
        Snackbar.Add(MensagemDeRetorno, ResponsaApi.Status == "success" ? Severity.Success : Severity.Error);
        if (ResponsaApi.Status == "success")
            await dataGridRef!.ReloadServerData();
    }

    private async Task DeclaraPagos()
    {
        try
        {
            bool TemPermissao = await VerificaPermissao();
            if (!TemPermissao)
            {
                await AbreMensagemDeAcessoNegado();
                return;
            }

            if (LancamentosSelecionados is not null)
            {
                var LancamentosComoLista = LancamentosSelecionados.ToList();

                foreach (var lancamento in LancamentosComoLista)
                {
                    lancamento.Pago = true;

                    var ResponsaApi = await LancamentoFinanceiroService.UpdateLancamentoAsync(lancamento);

                }

                Snackbar.Add($"Todos os lançamentos selecionados foram atualizados!", Severity.Success);
                await dataGridRef!.ReloadServerData();

                LancamentosSelecionados.Clear();
                MultiSelecao = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao atualizar lançamentos {ex.Message}", Severity.Error);
        }

    }

    private async Task ApagaTodos()
    {
        try
        {
            bool TemPermissao = await VerificaPermissao();
            if (!TemPermissao)
            {
                await AbreMensagemDeAcessoNegado();
                return;
            }

            var parameters = new DialogParameters<ModalDeExcluir>
                {
                    { x => x.ContentText, $"Você tem certeza que deseja excluir os lançamento selecionados? Atenção, essa ação não pode ser desfeita" },
                    { x => x.ButtonText, "Sim" },
                    { x => x.Color, Color.Error}
                };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {

                if (LancamentosSelecionados is not null)
                {
                    foreach (var lancamento in LancamentosSelecionados)
                    {
                        var ResponsaApi = await LancamentoFinanceiroService.DeleteLancamentoAsync(lancamento);
                    }

                    Snackbar.Add($"Todos os lançamentos selecionados foram apagados!", Severity.Success);
                    await dataGridRef!.ReloadServerData();

                    LancamentosSelecionados.Clear();
                    MultiSelecao = false;
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add($"Erro ao apagar lançamentos", Severity.Error);
        }

    }


    private async Task GerarPdf()
    {
        await JS.InvokeVoidAsync("generatePdfFromHtml", "conteudoPdf", "RelatorioPedidos.pdf");
    }



    private HashSet<ClsLancamentoFinanceiro> LancamentosSelecionados = new HashSet<ClsLancamentoFinanceiro>();
    void SelectedItemsChanged(HashSet<ClsLancamentoFinanceiro> items)
    {
        LancamentosSelecionados = items;

        ContaMaisUsada = LancamentosSelecionados
      .GroupBy(l => l.Conta)
      .OrderByDescending(g => g.Count())
      .Select(g => new ClsConta
      {
          NomeConta = g.Key.NomeConta
      })
      .FirstOrDefault();
    }

    private async Task AtualizarPeriodoRapido(int index)
    {

        switch (index)
        {
            case 0: // Mês Passado
                var mesPassado = DateTime.Today.AddMonths(-1);
                FiltroDateTimeInicial = new DateTime(mesPassado.Year, mesPassado.Month, 1);
                FiltroDateTimeFinal = FiltroDateTimeInicial.Value.AddMonths(1).AddDays(-1);
                break;
            case 1: // Semana Passada
                var lastWeekStart = DateTime.Today.StartOfWeek(DayOfWeek.Monday).AddDays(-7);
                FiltroDateTimeInicial = lastWeekStart;
                FiltroDateTimeFinal = lastWeekStart.AddDays(6);
                break;
            case 2: // Hoje
                FiltroDateTimeInicial = DateTime.Today;
                FiltroDateTimeFinal = DateTime.Today;
                break;
            case 3: // Esta Semana
                FiltroDateTimeInicial = DateTime.Today.StartOfWeek(DayOfWeek.Monday);
                FiltroDateTimeFinal = FiltroDateTimeInicial.Value.AddDays(6);
                break;
            case 4: // Semana Que Vem
                FiltroDateTimeInicial = DateTime.Today.StartOfWeek(DayOfWeek.Monday).AddDays(7);
                FiltroDateTimeFinal = FiltroDateTimeInicial.Value.AddDays(6);
                break;
            case 5: // Este Mês
                FiltroDateTimeInicial = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                FiltroDateTimeFinal = FiltroDateTimeInicial.Value.AddMonths(1).AddDays(-1);
                break;
        }

        StateHasChanged();
        await dataGridRef!.ReloadServerData();
    }

    private async Task<IEnumerable<ClsPessoas>> Search(string value, CancellationToken token)
    {
        try
        {
            if (value is null)
                value = string.Empty;

            // sempre busca na API, mesmo se value estiver vazio
            var returnApiRefatored = await PessoasService.GetPessoasPaginado(value);

            PessoasParaOFiltro = returnApiRefatored.Data.Lista ?? new List<ClsPessoas>();

            return PessoasParaOFiltro.Where(x => (x.Nome?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false) || (x.NomeFantasia?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao pesquisar Pessoas: {ex.Message}", Severity.Error);
            return Enumerable.Empty<ClsPessoas>();
        }
    }

    private async Task OnPessoaSelecionada(ClsPessoas? pessoa)
    {
        PessoaSelecionadaParaOFiltro = pessoa;
        await dataGridRef!.ReloadServerData();
    }


    private async Task OnMetodoSelecionado(ClsMetodosDePagMerchant? metodo)
    {
        MetodoSelecionadoraOFiltro = metodo;
        await dataGridRef!.ReloadServerData();
    }

    private async Task AbreMensagemDeAcessoNegado()
    {
        try
        {
            var parameters = new DialogParameters<ModalDeAcessoNegado>
            {
                  { x => x.ContentText, $"Desculpe. Infelizmente você não tem acesso a essa ação." },
                  { x => x.ButtonText, "OK" },
                  { x => x.Color, Color.Success}
             };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, Position = DialogPosition.BottomLeft, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeAcessoNegado>("Acesso Negado", parameters, options);
            var result = await dialog.Result;


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao declarar acesso negado: {ex.Message}", Severity.Error);
        }

    }

    private async Task<bool> VerificaPermissao()
    {
        if (AppState.MerchantLogado.FuncionarioLogado is not null)
        {
            if (!AppState.MerchantLogado.FuncionarioLogado.AcessoCadastraLancamento)
            {
                return false;
            }
        }

        return true;
    }

}

@*Relatório dos lançamentos selecionados*@
<div id="conteudoPdf" style="font-family: Arial, sans-serif; font-size: 12px; color: #333; display:none">
    <div class="d-flex flex-column">
        <img src="/images/SOPHOS.png" alt="Logo SOPHOS" style="display: block; margin: 20px auto; width: 150px;" />

        <h2 style="text-align: center; color: #2c3e50; margin-bottom: 20px;">
            Relatório de Lançamentos Financeiros
        </h2>

        <p style="text-align: center; font-size: 14px; margin: 0;">
            @AppState.MerchantLogado.NomeFantasia
        </p>

        @if (AppState.MerchantLogado.FuncionarioLogado is not null)
        {
            <p style="text-align: center; font-size: 14px; margin: 0;">
                Colaborador: @AppState.MerchantLogado.FuncionarioLogado.Nome
            </p>

        }
    </div>


    <!-- Cabeçalho de informações -->
    <div style="text-align: center; margin-bottom: 15px;">
        <span style="font-weight: bold;">Data de emissão:</span>
        @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
    </div>

    <table border="0" cellspacing="0" cellpadding="6" style="width:100%; border-collapse: collapse;">
        <thead>
            <tr style="background-color:#34495e; color:white; text-align:center;">
                <th>Cod</th>
                <th>Descrição</th>
                <th>Tipo</th>
                <th>Valor</th>
                <th>Emissão</th>
                <th>Vencimento</th>
                <th>Método</th>
                <th>Pago</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lancamento in LancamentosSelecionados)
            {
                <tr style="border-bottom: 1px solid #ddd; text-align:center;">
                    <td>@lancamento.Id</td>
                    <td style="text-align:left;">@lancamento.Descricao</td>
                    <td>@lancamento.TipoDeLancamento.Descricao</td>
                    <td style="text-align:right;">@lancamento.Valor.ToString("C")</td>
                    <td>@lancamento.DataDeEmissao?.ToString("dd/MM/yyyy")</td>
                    <td>@lancamento.DataDeVencimento?.ToString("dd/MM/yyyy")</td>
                    <td>@lancamento.MetodoDePagamento.Descricao</td>
                    <td style="color:@(lancamento.Pago ? "#27ae60" : "#c0392b"); font-weight: bold;">
                        @(lancamento.Pago ? "SIM" : "NÃO")
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            @{
                var totalReceitas = LancamentosSelecionados
                .Where(l => l.TipoDeLancamento.Descricao.Equals("Receita", StringComparison.OrdinalIgnoreCase))
                .Sum(l => l.Valor);

                var totalDespesas = LancamentosSelecionados
                .Where(l => l.TipoDeLancamento.Descricao.Equals("Despesa", StringComparison.OrdinalIgnoreCase))
                .Sum(l => l.Valor);

                var saldoFinal = totalReceitas - totalDespesas;
            }

            <tr style="background-color:#ecf0f1; font-weight:bold;">
                <td colspan="3" style="text-align:right;">Total Receitas:</td>
                <td style="text-align:right; color:#27ae60;">
                    @totalReceitas.ToString("C")
                </td>
                <td colspan="4"></td>
            </tr>
            <tr style="background-color:#ecf0f1; font-weight:bold;">
                <td colspan="3" style="text-align:right;">Total Despesas:</td>
                <td style="text-align:right; color:#c0392b;">
                    @totalDespesas.ToString("C")
                </td>
                <td colspan="4"></td>
            </tr>
            <tr style="background-color:#bdc3c7; font-weight:bold;">
                <td colspan="3" style="text-align:right;">Saldo Final:</td>
                <td style="text-align:right; color:@(saldoFinal >= 0 ? "#27ae60" : "#c0392b");">
                    @saldoFinal.ToString("C")
                </td>
                <td colspan="4"></td>
            </tr>
            <tr style="background-color:#f8f9fa; font-weight:bold;">
                <td colspan="3" style="text-align:right;">Conta mais usada:  </td>
                <td colspan="5">
                    @(ContaMaisUsada?.NomeConta ?? "Nenhuma")
                </td>
            </tr>

        </tfoot>
    </table>

    <!-- Rodapé -->
    <div style="margin-top: 30px; text-align: center; font-size: 10px; color: #777;">
        <hr style="border: none; border-top: 1px solid #ccc; margin: 10px 0;">
        <p>Relatório gerado automaticamente SOPHOS - Sistema de Gestão Financeira</p>
    </div>

    <div style="page-break-after: always;"></div>
</div>
