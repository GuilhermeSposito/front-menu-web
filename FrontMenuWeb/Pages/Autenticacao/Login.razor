@page "/login"
@rendermode RenderMode.InteractiveWebAssembly
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@layout LoginLayout


<div class="login-container">
    <div class="w-100">
        <!-- Logo e Título -->
        <div class="text-center mb-4">
            <div class="logo-container">
                <img class="w-100 h-100 rounded-circle" src="/images/SOPHOSLOGOLOGIN.jpg" alt="Sophos" />
            </div>
            <h1 class="company-title">SOPHOS</h1>
            <p class="company-subtitle">Soluções Tecnológicas</p>
        </div>

        <!-- Card de Login -->
        <div class="card login-card mx-auto">
            <div class="card-header text-center">
                <h2 class="card-title">Bem-vindo de volta</h2>
                <p class="card-description">Faça login para acessar sua conta</p>
            </div>

            <div class="card-body px-4 pb-4">
                <EditForm id="loginForm" Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <!-- Campo Email -->
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <div class="input-group">
                            <i class="bi bi-envelope input-icon"></i>
                            <input type="email"
                                   class="form-control  rounded-2"
                                   id="email"
                                   placeholder="seu@email.com"
                                   @bind="loginModel.Email"
                                   required>
                        </div>
                    </div>

                    <!-- Campo Senha -->
                    <div class="mb-3">
                        <label for="password" class="form-label">Senha</label>
                        <div class="input-group password-container">
                            <i class="bi bi-lock input-icon"></i>
                            <input type="@((ShowPassword ? "text" : "password"))"
                                   class="form-control rounded-2"
                                   id="password"
                                   placeholder="Digite sua senha"
                                   @bind="loginModel.Senha"
                                   required>

                            <button type="button"
                                    class="password-toggle"
                                    id="passwordToggleIcon"
                                    @onclick="TogglePasswordVisibility">
                                <i class="bi @(ShowPassword ? "bi-eye-slash" : "bi-eye")"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Lembrar de mim e Esqueci a senha -->
                    <div class="remember-forgot">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="remember">
                            <label class="form-check-label" for="remember">
                                Lembrar de mim
                            </label>
                        </div>                
                    </div>

                    <!-- Botão de Login -->
                    <button type="submit" class="btn btn-login">
                        Entrar
                    </button>

                    @if (!loginSucesso)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                            @MensagemDeErro
                        </MudAlert>
                    }

                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    private LoginModel loginModel = new();
    private bool loginSucesso = true;
    private string MensagemDeErro = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool ShowPassword { get; set; } = false;

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                await LocalStorage.SetItemAsync("authToken", result.Token);
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", result.Token);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var res = await response.Content.ReadAsStringAsync();
                loginSucesso = false;
                MensagemDeErro = res;
            }
        }
        catch (Exception ex)
        {
            loginSucesso = false;
            MensagemDeErro = "Erro ao tentar fazer login. Tente novamente mais tarde.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "O email é obrigatório")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "A senha é obrigatória")]
        public string Senha { get; set; }

        public string IsAdmin { get; set; } = "false"; // Default
    }

    public class LoginResult
    {
        [JsonPropertyName("sucess")]
        public bool Success { get; set; }

        [JsonPropertyName("token")]
        public string Token { get; set; }

        [JsonPropertyName("expiresIn")]
        public int ExpiresIn { get; set; }
    }
}
