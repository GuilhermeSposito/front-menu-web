@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@page "/pessoas"
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@using Microsoft.AspNetCore.Components
@using System.Globalization;
@using MudBlazor.Extensions
@using MudBlazor.Services
@using MudBlazor.Extensions.Components
@inject IHttpClientFactory HttpClientFactory
@inject PessoasService PessoasService
@using MudBlazor.Extensions.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudPaper Square="false" Elevation="0" Style="background-color: var(--mud-palette-background); min-height: 100vh; margin-top:50px">
    <MudLayout>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <MudText Typo="Typo.h4">Pessoas</MudText>
                <MudText Class="mb-3" Typo="Typo.body1">Lista de pessoas Cadastradas</MudText>
            </div>
            <div class="d-flex">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="IsLoading ? true : false" OnClick="@(async () => { await AbreModalDAdicionarPessoa(); })">Nova Pessoa</MudButton>
            </div>
        </div>


        <MudDataGrid RowClick="@AbrirDrawer"
                     SelectOnRowClick=true
                     MultiSelection="false"
                     Loading=IsLoading
                     Hover
                     Striped="true"
                     T="ClsPessoas"
                     EditTrigger="DataGridEditTrigger.Manual"
                     Items="@Pessoas"
                     class="rounded-3">

            <ToolBarContent>

                <div class="gap-2 w-100 d-flex ">
                    <MudAutocomplete T="string" Label="Telefone" @bind-Value="ValorDePesquisaTelefone"
                                     @bind-Value:after="@(() => RecarregarPessoasAposPesquisaDeTelefone())"
                                     MaxItems="10"
                                     SearchFunc="@SearchTelefone"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Variant="Variant.Outlined" ShowProgressIndicator="true" Clearable="true" />

                    <MudAutocomplete T="string" Label="Nome" @bind-Value="ValorDePesquisaNome" SearchFunc="@SearchNome"
                                     @bind-Value:after="@(() => RecarregarPessoasAposPesquisaDeNome())"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     MaxItems="10"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" SelectValueOnTab="@selectedOnTab"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Variant="Variant.Outlined" ShowProgressIndicator="true" Clearable="true" />
                </div>



            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="ClsPessoas" EnableHeaderToggle="@_enableHeaderToggle" />
                <PropertyColumn Property="x => x.Id" Title="Código" />
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
                <TemplateColumn T="ClsPessoas" Title="Telefone">
                    <CellTemplate Context="context">
                        @FormatarTelefone(context.Item.Telefone!)
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsPessoas" Hidden="false" Title="Editar">
                    <CellTemplate Context="context">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       OnClick="@(()=>{})" />
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="ClsPessoas" Title="Deletar">
                    <CellTemplate Context="context">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(async () => {await DeletarPessoa(context.Item);})" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <ChildRowContent>

                <MudCard Class="w-100 p-0" style="background-color: var(--mud-palette-background);">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudPaper Elevation="0" Square="false" Class="d-flex align-center justify-center mud-width-full">  <MudText Color="Color.Primary" Typo="Typo.h6">@context.Item.Nome</MudText> </MudPaper>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>

                        Histórico de compra do cliente

                    </MudCardContent>
                </MudCard>

            </ChildRowContent>

        </MudDataGrid>


        @**************************************************DRAWER NOP FRONTEND********************************************************************************@
        <MudDrawer Style="background-color: var(--mud-palette-background);" @bind-Open="@_open" Width="@_drawerWidth" Height="@_height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
            <MudDrawerHeader>
                @*Aqui vai mostrar o nomeFantasia caso seja fornecedor*@
                @if (PessoaSelecionadaParaEdicao.TipoPessoaId == 1)
                {
                    <MudText Typo="Typo.h6">Cliente</MudText>
                }
                else if (PessoaSelecionadaParaEdicao.TipoPessoaId == 2)
                {
                    <MudText Typo="Typo.h6">Fornecedor</MudText>
                }
                else if (PessoaSelecionadaParaEdicao.TipoPessoaId == 3)
                {
                    <MudText Typo="Typo.h6">Cliente/Fornecedor</MudText>
                }

            </MudDrawerHeader>
            <MudDrawerContainer>
                <MudCard>
                    <MudCardHeader>
                        @*-----------------------------PRIMEIRA ETAPA FOTO----------------------------------------*@
                        <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center w-100">
                            @if (CarregandoPessoaParaEdicao)
                            {
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                                <MudSkeleton Class="w-50" />
                                <MudSkeleton Class="w-50" />
                            }
                            else
                            {
                                <MudAvatar Size="Size.Large">
                                    @(PessoaSelecionadaParaEdicao.Nome.Length > 1 ? PessoaSelecionadaParaEdicao.Nome.Substring(0, 1) : "")
                                </MudAvatar>
                                <MudText Color="Color.Primary">
                                    @PessoaSelecionadaParaEdicao.Nome
                                </MudText>
                                <MudText style="font-weight:30; font-size: 10px">
                                    Cliente desde 18 de mai de 2015
                                </MudText>
                            }
                        </MudPaper>
                        @*-----------------------------PRIMEIRA ETAPA FOTO----------------------------------------*@

                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column align-center gap-3">
                            <MudTabs>
                                @*Aqui vai a informações do perfil de usuario*@
                                <MudTabPanel>
                                    <ChildContent>
                                        <MudPaper Class="d-flex flex-wrap justify-content-center align-items-center w-100">
                                            @if (CarregandoPessoaParaEdicao)
                                            {
                                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                                            }
                                            else
                                            {
                                                <MudPaper Class="w-50">
                                                    Pedidos Feitos
                                                </MudPaper>
                                                <MudPaper Class="w-50">
                                                    Tiket Médio
                                                </MudPaper>
                                                <MudPaper Class="w-50">
                                                    Último pedido
                                                </MudPaper>
                                                <MudPaper Class="w-50">
                                                    média de pedidos
                                                </MudPaper>
                                            }
                                        </MudPaper>
                                    </ChildContent>
                                    <TabContent>
                                        Perfil
                                    </TabContent>
                                </MudTabPanel>
                                @*----------------------------------------------*@
                                <MudTabPanel Text="Pedidos" />
                                <MudTabPanel Text="Avaliações" />
                            </MudTabs>


                        </div>
                    </MudCardContent>
                </MudCard>
            </MudDrawerContainer>
        </MudDrawer>
        @**************************************************DRAWER NOP FRONTEND********************************************************************************@


    </MudLayout>
</MudPaper>

@code {
    private IEnumerable<ClsPessoas> Pessoas = new List<ClsPessoas>();
    private bool IsLoading = true;
    private bool _enableHeaderToggle = true;
    private string ValorDePesquisaTelefone = string.Empty;
    private string ValorDePesquisaNome = string.Empty;
    private bool resetValueOnEmptyText = true;
    private bool coerceText = false;
    private bool coerceValue = false;
    private bool selectedOnTab = false;
    private bool _editTriggerRowClick = true;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AtualizaPessoas();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao buscar pessoas: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;


        }
    }

    private async Task AtualizaPessoas()
    {
        try
        {
            IsLoading = true;

            Pessoas = new List<ClsPessoas>();

            Pessoas = await PessoasService.GetPessoas();
            Pessoas = Pessoas.OrderBy(p => p.Nome);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao buscar pessoas: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }

    }

    private string FormatarTelefone(string telefone)
    {
        if (string.IsNullOrWhiteSpace(telefone))
            return "";

        telefone = new string(telefone.Where(char.IsDigit).ToArray());

        if (telefone.Length == 11)
            return Convert.ToUInt64(telefone).ToString(@"(00) 00000-0000");
        else if (telefone.Length == 10)
            return Convert.ToUInt64(telefone).ToString(@"(00) 0000-0000");
        else
            return telefone; // ou trate como inválido
    }



    private async Task<IEnumerable<string>> SearchTelefone(string value, CancellationToken token)
    {
        try
        {
            var valorNumerico = SomenteNumeros(value);

            return Pessoas
                .Where(p => !string.IsNullOrWhiteSpace(p.Telefone) &&
                            SomenteNumeros(p.Telefone).Contains(valorNumerico))
                .Select(p => FormatarTelefone(p.Telefone!)) // <-- retorna com máscara
                .Distinct();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao pesquisar Pessoa: {ex.Message}", Severity.Error);
            return Enumerable.Empty<string>();
        }
    }
    private async Task<IEnumerable<string>> SearchNome(string value, CancellationToken token)
    {
        try
        {
            if (string.IsNullOrEmpty(value))
            {
                return Pessoas.Select(x => x.Nome!).Distinct();
            }

            return Pessoas
                .Where(x =>
                    (x.Nome?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Telefone?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false))
                .Select(x => x.Nome!)
                .Distinct();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao pesquisar Pessoa: {ex.Message}", Severity.Error);
            return Enumerable.Empty<string>();
        }
    }


    private async Task RecarregarPessoasAposPesquisaDeTelefone()
    {
        if (!string.IsNullOrEmpty(ValorDePesquisaTelefone))
        {
            var valorNumerico = SomenteNumeros(ValorDePesquisaTelefone);

            Pessoas = Pessoas
                .Where(p => !string.IsNullOrWhiteSpace(p.Telefone) &&
                            SomenteNumeros(p.Telefone).Contains(valorNumerico));
        }
        else
        {
            await AtualizaPessoas();
        }
    }

    private async Task RecarregarPessoasAposPesquisaDeNome()
    {
        if (!string.IsNullOrEmpty(ValorDePesquisaNome))
        {
            Pessoas = Pessoas.Where(p => p.Nome?.Contains(ValorDePesquisaNome, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        else
        {
            await AtualizaPessoas();
        }
    }

    private string SomenteNumeros(string input)
    {
        return new string(input?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());
    }


    private async Task AbreModalDAdicionarPessoa()
    {
        var parameters = new DialogParameters
        {
            { "Pessoas", Pessoas }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeAdicionarPessoa>("Cadastrar Pessoa", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            StateHasChanged();
            await AtualizaPessoas();
        }

    }

    private async Task DeletarPessoa(ClsPessoas pessoa)
    {
        try
        {
            var parameters = new DialogParameters<ModalDeExcluir>
            {
                  { x => x.ContentText, $"Você tem certeza que deseja excluir a pessoa {pessoa.NomeFantasia ?? pessoa.Nome}? Essa operação não pode ser desfeita. " },
                  { x => x.ButtonText, "Sim" },
                  { x => x.Color, Color.Error}
             };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Confirmar Exclusão", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {

                IsLoading = true;
                var response = await PessoasService.DeletePessoa(pessoa);

                if (response is null)
                {
                    Snackbar.Add($"Erro ao deletar pessoa", Severity.Error);
                }

                if (response is not null && response.Status != "success")
                {
                    Snackbar.Add($"{response.message}", Severity.Error);

                }

                if (response is not null && response.Status == "success")
                {
                    Snackbar.Add($"{response.Data.Message}", Severity.Error);

                    await AtualizaPessoas();
                    StateHasChanged();
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao deletar pessoa: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }


    /***************************LOGICA DO DRAWER PARA EDITAR PESSOA*************************************************************/

    //*********************** PROPS PARA A LOGICA DE ABRIR O DRAWER DE INFOS E EDITAR CLIENTE OU FORNECEDOR******************************************************/
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }
    private ClsPessoas PessoaSelecionadaParaEdicao = new ClsPessoas();
    private bool _open;
    private Anchor _anchor;
    private string _height = "100%";
    private int _width = 0;
    private string _drawerWidth = "40%";
    private bool CarregandoPessoaParaEdicao = false;
    //*****************************************************************************/

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
        => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs args)
    {
        _width = args.BrowserWindowSize.Width;

        // Atualiza o tamanho do drawer com base na largura
        _drawerWidth = _width < 768 ? "80%" : "45%";

        return InvokeAsync(StateHasChanged);
    }

    private async Task AbrirDrawer(DataGridRowClickEventArgs<ClsPessoas> args)
    {
        try
        {
            CarregandoPessoaParaEdicao = true;

            OpenDrawer(Anchor.End);
            PessoaSelecionadaParaEdicao = await PessoasService.GetPessoaAsync(args.Item.Id);

            CarregandoPessoaParaEdicao = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }



    }
    /***************************FIM DA LOGICA DO DRAWER PARA EDITAR PESSOA*************************************************************/

}
