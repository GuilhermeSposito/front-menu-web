@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.FinanceroServices
@using System.Globalization
@inject ComplementosServices ComplementosServices

<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>
            @if (!CarregandoGrupoDeComplementos)
            {
                <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                        <MudStack Style="background-color: var(--mud-palette-background);" Class="w-100">
                            <MudStack Class="w-100" Row=true>
                                <MudTextField @bind-Value=@GrupoDeComplementos.Descricao Label="Descrição" Required RequiredError="A Descrição é obrigatória" Immediate=true Class="w-75" Variant="Variant.Filled" />
                                <MudSwitch T="bool" Value=@GrupoDeComplementos.Ativo Color="Color.Success" Class="w-25" ValueChanged="@(async valor => { GrupoDeComplementos.Ativo = valor; })" />
                            </MudStack>
                            <MudStack Class="w-100">
                                <MudTextField @bind-Value=@GrupoDeComplementos.GrupoInfo Label="Informações" HelperText="Explique em uma frase curta o propósito do grupo." Immediate=true Class="w-100" Variant="Variant.Filled" />
                            </MudStack>

                        </MudStack>

                    </MudFocusTrap>
                </MudForm>
            }
            else
            {
                <MudStack Class="w-100" Row=true>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="70px" Class="w-75" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="70px" Class="w-25" />
                </MudStack>
                <MudStack Class="w-100 mt-2">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="70px" Class="w-100" />
                </MudStack>

      
            }



        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">@(ECriacao ? "Adicionar" : "Atualizar")</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    public CultureInfo _pt = CultureInfo.GetCultureInfo("pt-BR");
    private MudNumericField<float> _numeric;

    private bool ErroAoAdicionarGrupoDeComplementos = false;
    private string MensagemDeErro = string.Empty;
    private bool CarregandoGrupoDeComplementos = true;

    [Parameter] public bool ECriacao { get; set; }
    [Parameter] public int IdDoGrupo { get; set; } = 0;

    private ClsGrupoDeComplemento GrupoDeComplementos = new ClsGrupoDeComplemento();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!ECriacao)
            {
                GrupoDeComplementos = await ComplementosServices.GetGrupoDeComplementos(IdDoGrupo);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar Grupo de complementos: {ex.Message}", Severity.Error);
        }
        finally
        {
            CarregandoGrupoDeComplementos = false;
        }


    }



    private async Task Submit()
    {
        try
        {
            ReturnApiRefatored<ClsGrupoDeComplemento> ResponseAPi = new ReturnApiRefatored<ClsGrupoDeComplemento>(); // mudar quando colocar a logica

            if (ECriacao)
            {
                ResponseAPi = await ComplementosServices.CreateGrupoDeComplemento(GrupoDeComplementos);
            }
            else
            {

                ResponseAPi = await ComplementosServices.UpdateGrupoDeComplemento(GrupoDeComplementos);

            }


            string MensagemDeRetorno = string.Join(", ", ResponseAPi.Status == "success" ? ResponseAPi.Data.Messages : ResponseAPi.Messages);
            Snackbar.Add(MensagemDeRetorno, ResponseAPi.Status == "success" ? Severity.Success : Severity.Error);

            if (ResponseAPi.Status == "success")
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                MensagemDeErro = MensagemDeRetorno;
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar Grupo de complementos: {ex.Message}", Severity.Error);
        }

    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }



}