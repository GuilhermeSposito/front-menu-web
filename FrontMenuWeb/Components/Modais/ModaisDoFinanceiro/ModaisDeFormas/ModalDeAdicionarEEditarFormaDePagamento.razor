@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.FinanceroServices
@using System.Globalization
@inject ContasService ContasService
@inject FormasDeRecebimentoService FormasService

<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>

            <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                    <MudStack Class="w-100" Row=true AlignItems="AlignItems.Center" Justify="Justify.SpaceAround">

                        @if (!CarregandoForma)
                        {

                            <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                                <MudStack Class="w-100">
                                    <MudCard Class="w-100 p-2" style="background-color: var(--mud-palette-background);">

                                        <MudStack Row="true" Class="w-100">
                                            <MudTextField Class="w-50"
                                                          Label="Descrição"
                                                          @bind-Value=@FormaDeRecebimento.Descricao
                                                          Variant="Variant.Filled"
                                                          Required
                                                          RequiredError="A descrição é obrigatória"
                                                          Immediate="true" />

                                            <MudNumericField Class="w-50"
                                                             T="float"
                                                             Label="Taxa"
                                                             AdornmentIcon="@Icons.Material.Filled.Percent"
                                                             Adornment="Adornment.Start"
                                                             Variant="Variant.Filled"
                                                             Required="true"
                                                             Min="0"
                                                             Immediate="true"
                                                             RequiredError="A taxa é obrigatória"
                                                             @bind-Value="@FormaDeRecebimento.Taxa" />


                                        </MudStack>

                                        <MudNumericField Class="w-100 h-100 mt-1"
                                                         T="int"
                                                         Label="Quantidade Para Reembolso"
                                                         AdornmentIcon="@Icons.Material.Filled.CalendarViewDay"
                                                         Adornment="Adornment.Start"
                                                         Variant="Variant.Filled"
                                                         Required="true"
                                                         Min="0"
                                                         Immediate="true"
                                                         RequiredError="Os dias para reembolso é obrigatório"
                                                         @bind-Value="@FormaDeRecebimento.QtdDiasParaReembolso" />

                                        <MudStack Row="true" Class="w-100 mt-1" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center">

                                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                                <MudText>Ativo</MudText>

                                                <MudTooltip Text="Clique para ativar/desativar a forma" Color="Color.Primary">
                                                    <MudSwitch T="bool" Value=@FormaDeRecebimento.Ativo Color="Color.Success" ValueChanged="@(async valor => { FormaDeRecebimento.Ativo = valor; })" />
                                                </MudTooltip>
                                            </MudStack>

                                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                                <MudText>Pagamento Online ?</MudText>

                                                <MudTooltip Text="Clique para ativar/desativar o pagamento online da forma" Color="Color.Primary">
                                                    <MudSwitch T="bool" Value=@FormaDeRecebimento.PagamentoOnline Color="Color.Success" ValueChanged="@(async valor => { FormaDeRecebimento.PagamentoOnline = valor; })" />
                                                </MudTooltip>
                                            </MudStack>

                                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                                <MudText>Aceita Convenio com a forma ?</MudText>

                                                <MudTooltip Text="Clique para ativar/desativar o convenio da forma" Color="Color.Primary">
                                                    <MudSwitch T="bool" Value=@FormaDeRecebimento.Convenio Color="Color.Success" ValueChanged="@(async valor => { FormaDeRecebimento.Convenio = valor; })" />
                                                </MudTooltip>
                                            </MudStack>

                                           
                                        </MudStack>

                                        <MudStack>
                                            @if (FormaDeRecebimento.Descricao.Contains("pix", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <MudTextField Class="w-100"
                                                              Label="Chave Pix"
                                                              @bind-Value=@FormaDeRecebimento.ChavePix
                                                              Variant="Variant.Filled"
                                                              Immediate="true" />
                                            }
                                        </MudStack>
                                    </MudCard>

                                    <MudCard Class="w-100" style="background-color: var(--mud-palette-background);">
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.h6">Contas Relacionadas</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                <MudTooltip Text="Arraste e Solte as contas para adiciona-las na forma de Recebimento">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" />
                                                </MudTooltip>
                                            </CardHeaderActions>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            @*Aqui vai fazer as drops zone de contas*@

                                            <MudDropContainer T="ClsConta"
                                                              Items="Contas"
                                                              ItemsSelector="Selector"
                                                              ItemDropped="OnItemDropped"
                                                              Class="d-flex flex-column flex-grow-1"
                                                              @ref="@mudItemDropContainer"
                                                              Style="background-color: var(--mud-palette-surface); min-height: 100px; border: 2px dashed var(--mud-palette-primary);">

                                                <ChildContent>
                                                    <!-- Contas Disponíveis -->
                                                    <MudPaper class="d-flex flex-column flex-grow-1">
                                                        <MudListSubheader class="mt-4 pb-2">Contas Disponíveis</MudListSubheader>
                                                        <MudDropZone T="ClsConta" Identifier="Disponiveis"
                                                                     ItemDraggingClass="mud-info-text"
                                                                     Class="d-flex flex-wrap flex-grow-1 pa-2 rounded" />
                                                    </MudPaper>

                                                    <!-- Contas Vinculadas -->
                                                    <MudPaper class="d-flex flex-column flex-grow-1 p-2">
                                                        <MudListSubheader class="mt-4 pb-2">Contas vinculadas à forma</MudListSubheader>
                                                        <MudDropZone Style="background-color: var(--mud-palette-surface); min-height: 100px; border: 2px dashed var(--mud-palette-primary);"
                                                                     T="ClsConta" Identifier="Vinculadas"
                                                                     DraggingClass="mud-alert-text-normal"
                                                                     Class="d-flex flex-wrap flex-grow-1 pa-2 rounded">
                                                            @if (!FormaDeRecebimento.ContasIds.Any())
                                                            {
                                                                <MudStack Class="w-100" Row="false" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
                                                                    <MudIcon Icon="@Icons.Material.Filled.UploadFile" Size="Size.Large" Color="Color.Primary" />
                                                                    <MudText Typo="Typo.body1" Align="Align.Center">
                                                                        Arraste as contas desejadas para esta área
                                                                    </MudText>
                                                                    <MudText Typo="Typo.caption" Color="Color.Primary" Align="Align.Center">
                                                                        ou clique em uma conta para vinculá-la
                                                                    </MudText>
                                                                </MudStack>
                                                            }
                                                        </MudDropZone>
                                                    </MudPaper>
                                                </ChildContent>

                                                <ItemRenderer>
                                                    <MudPaper Class="rounded mud-paper-outlined d-flex align-center pa-3 ma-2 cursor-pointer"
                                                              onclick="@(() => OnContaClicked(context))">
                                                        <MudImage Width="15" Src="@AppState.GetBancoIcon(context.CodIconeDoBanco)" class="mr-2" />
                                                        @context.NomeConta
                                                    </MudPaper>
                                                </ItemRenderer>
                                            </MudDropContainer>




                                        </MudCardContent>

                                    </MudCard>
                                </MudStack>





                            </MudFocusTrap>


                        }
                        else
                        {
                            <MudStack Class="w-100">

                                <MudSkeleton Class="w-100"
                                             Height="500px" />

                               
                            </MudStack>

                        }


                    </MudStack>


                    <div>
                        @if (ErroAoAdicionarForma)
                        {
                            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                                @MensagemDeErro
                            </MudAlert>
                        }
                    </div>
                </MudFocusTrap>
            </MudForm>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">@(ECriacao ? "Adicionar" : "Atualizar")</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private MudTextField<string> _descricaoRef;
    private bool ErroAoAdicionarForma = false;
    private string MensagemDeErro = string.Empty;
    private bool CarregandoForma = true;

    [Parameter] public bool ECriacao { get; set; }
    [Parameter] public int idDaForma { get; set; } = 0;
    private ClsFormaDeRecebimento FormaDeRecebimento { get; set; } = new ClsFormaDeRecebimento();

    MudDropContainer<ClsConta> mudItemDropContainer;
    private List<ClsConta> Contas { get; set; } = new List<ClsConta>();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            Contas = await ContasService.GetContasAsync() ?? new List<ClsConta>();

            if (!ECriacao)
            {
                FormaDeRecebimento = await FormasService.GetFormaDeRecebimentoAsync(idDaForma) ?? new ClsFormaDeRecebimento();

                if (FormaDeRecebimento.ListasDeContasDaForma.Any())
                {
                    foreach (var contas in FormaDeRecebimento.ListasDeContasDaForma)
                    {
                        FormaDeRecebimento.ContasIds.Add(contas.Conta.Id);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar forma: {ex.Message}", Severity.Error);
        }
        finally
        {
            CarregandoForma = false;
        }


    }

    private async Task Submit()
    {
        try
        {
            ReturnApiRefatored<ClsFormaDeRecebimento> ResponseAPi;

            if (ECriacao)
            {
                ResponseAPi = await FormasService.AdicionarFormaDeRecebimentoAsync(FormaDeRecebimento);

            }
            else
            {
                ResponseAPi = await FormasService.AtualizarFormaDeRecebimentoAsync(FormaDeRecebimento);

            }


            string MensagemDeRetorno = string.Join(", ", ResponseAPi.Status == "success" ? ResponseAPi.Data.Messages : ResponseAPi.Messages);
            Snackbar.Add(MensagemDeRetorno, ResponseAPi.Status == "success" ? Severity.Success : Severity.Error);

            if (ResponseAPi.Status == "success")
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                MensagemDeErro = MensagemDeRetorno;


            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar forma: {ex.Message}", Severity.Error);
        }

    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }

    private bool Selector(ClsConta conta, string dropzone)
    {
        return dropzone switch
        {
            "Vinculadas" => FormaDeRecebimento.ContasIds.Contains(conta.Id),
            "Disponiveis" => !FormaDeRecebimento.ContasIds.Contains(conta.Id),
            _ => false
        };
    }

    private async Task OnItemDropped(MudItemDropInfo<ClsConta> dropInfo)
    {
        try
        {
            var conta = dropInfo.Item;

            if (dropInfo.DropzoneIdentifier == "Vinculadas")
            {
                if (!ECriacao)
                {
                    var respostaApi = await FormasService.AdicionarContaAFormaDeRecebimento(FormaDeRecebimento.Id, conta.Id);

                    string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                    Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);
                }

                if (!FormaDeRecebimento.ContasIds.Contains(conta.Id))
                    FormaDeRecebimento.ContasIds.Add(conta.Id);
            }
            else if (dropInfo.DropzoneIdentifier == "Disponiveis")
            {
                if (!ECriacao)
                {
                    var ReferenciaNaTabela = FormaDeRecebimento.ListasDeContasDaForma.FirstOrDefault(z => z.Conta.Id == conta.Id);

                    if (ReferenciaNaTabela is not null)
                    {
                        var respostaApi = await FormasService.RemoverContaDaFormaDeRecebimento(ReferenciaNaTabela.Id);

                        string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                        Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);
                    }
                }
                if (FormaDeRecebimento.ContasIds.Contains(conta.Id))
                    FormaDeRecebimento.ContasIds.Remove(conta.Id);
            }


            StateHasChanged();

        }
        catch (Exception ex)
        {

            Snackbar.Add("Erro ao processar a ação de arrastar e soltar.", Severity.Error);
        }

    }

    private async Task OnContaClicked(ClsConta conta)
    {
        try
        {
            if (FormaDeRecebimento.ContasIds.Contains(conta.Id))
            {
                if (!ECriacao)
                {
                    var ReferenciaNaTabela = FormaDeRecebimento.ListasDeContasDaForma.FirstOrDefault(z => z.Conta.Id == conta.Id);

                    if (ReferenciaNaTabela is not null)
                    {
                        var respostaApi = await FormasService.RemoverContaDaFormaDeRecebimento(ReferenciaNaTabela.Id);

                        string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                        Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);
                    }
                }
                FormaDeRecebimento.ContasIds.Remove(conta.Id);
            }
            else
            {
                if (!ECriacao)
                {
                    var respostaApi = await FormasService.AdicionarContaAFormaDeRecebimento(FormaDeRecebimento.Id, conta.Id);

                    string MensagemDeRetorno = string.Join(", ", respostaApi.Status == "success" ? respostaApi.Data.Messages : respostaApi.Messages);
                    Snackbar.Add(MensagemDeRetorno, respostaApi.Status == "success" ? Severity.Success : Severity.Error);
                }
                FormaDeRecebimento.ContasIds.Add(conta.Id);

            }

            mudItemDropContainer?.Refresh();


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao processar a ação de clicar na conta: {ex.Message}", Severity.Error);
        }
    }


}