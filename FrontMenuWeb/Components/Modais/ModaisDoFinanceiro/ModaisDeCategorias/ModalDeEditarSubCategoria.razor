@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.FinanceroServices
@using System.Globalization
@inject CategoriasService CategoriasService


<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>
            @if (!_isLoading)
            {
                <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">

                        <MudTextField @bind-Value=@SubCategoria.Descricao Variant="Variant.Filled" Required RequiredError="A descrição é obrigatória" />

                        <div>
                            @if (ErroAoAdicionarCategoria)
                            {
                                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                                    @MensagemDeErro
                                </MudAlert>
                            }
                        </div>
                    </MudFocusTrap>
                </MudForm>
            }
            else
            {
                <MudSkeleton Class="w-100" Height="120px" />
            }

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">Atualizar</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private bool _isLoading = true;

    private bool ErroAoAdicionarCategoria = false;
    private string MensagemDeErro = "Erro ao Atualizar a SubCategoria. Verifique os dados e tente novamente.";
    private ClsSubCategoria SubCategoria = new ClsSubCategoria();
    public CultureInfo _pt = CultureInfo.GetCultureInfo("pt-BR");

    [Parameter] public int IdDaSubCategoria { get; set; } = 0;

    private async Task Submit()
    {
        try
        {

            var retornoDaApi = await CategoriasService.UpdateSubCategoriaAsync(SubCategoria);

            if (retornoDaApi is not null)
            {
                if (retornoDaApi.Status == "success")
                {
                    Snackbar.Add("SubCategoria Atualizada com sucesso!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    string mensagemDeErroDaAPi = string.Join(", ", retornoDaApi.Messages);
                    MensagemDeErro = $"Erro ao Atualizar a Subcategoria: {mensagemDeErroDaAPi}";
                    ErroAoAdicionarCategoria = true;
                    Snackbar.Add(MensagemDeErro, Severity.Error);
                }
            }
            else
            {
                MensagemDeErro = "Erro ao Atualizar a categoria. Verifique os dados e tente novamente.";
                ErroAoAdicionarCategoria = true;
            }

        }
        catch (Exception ex)
        {
            MensagemDeErro = "Erro ao Atualizar a categoria. Verifique os dados e tente novamente.";
            ErroAoAdicionarCategoria = true;
            Snackbar.Add($"Erro ao Atualizar  Subcategoria: {ex.Message}", Severity.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SubCategoria = await CategoriasService.GetSubCategoriaAsync(IdDaSubCategoria);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar os dados: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }



}
