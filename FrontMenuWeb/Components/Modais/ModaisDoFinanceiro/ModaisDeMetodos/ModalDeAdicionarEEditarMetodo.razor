@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.FinanceroServices
@using System.Globalization
@inject MetodosDePagMerchantService MetodosService


<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>

            <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                    <MudStack Class="w-100" Row=true AlignItems="AlignItems.Center" Justify="Justify.SpaceAround">

                        @if (!CarregandoMetodo)
                        {

                            <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">

                                <MudTextField Class="w-100"
                                              @bind-Value=@Metodo.Descricao
                                              Variant="Variant.Filled"
                                              Required
                                              RequiredError="A descrição é obrigatória"
                                              Immediate="true" />

                                <MudStack>
                                    <MudText>Ativo</MudText>

                                    <MudTooltip Text="Clique para ativar/desativar o método" Color="Color.Primary">
                                        <MudSwitch T="bool" Value=@Metodo.Ativo Color="Color.Success" ValueChanged="@(async valor => { Metodo.Ativo = valor; })" />
                                    </MudTooltip>
                                </MudStack>
                            </MudFocusTrap>


                        }
                        else
                        {
                            <MudSkeleton Class="w-100"
                                         Height="120px" />

                        }


                    </MudStack>


                    <div>
                        @if (ErroAoAdicionarMetodo)
                        {
                            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                                @MensagemDeErro
                            </MudAlert>
                        }
                    </div>
                </MudFocusTrap>
            </MudForm>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">@(ECriacao ? "Adicionar" : "Atualizar")</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private MudTextField<string> _descricaoRef;
    private bool ErroAoAdicionarMetodo = false;
    private string MensagemDeErro = string.Empty;
    private bool CarregandoMetodo = true;

    [Parameter] public bool ECriacao { get; set; }
    [Parameter] public int IdMetodo { get; set; } = 0;
    private ClsMetodosDePagMerchant Metodo { get; set; } = new ClsMetodosDePagMerchant();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine(ECriacao);

            if (!ECriacao)
            {
                Metodo = await MetodosService.GetMetodoAsync(IdMetodo) ?? new ClsMetodosDePagMerchant();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar método: {ex.Message}", Severity.Error);
        }
        finally
        {
            CarregandoMetodo = false;
        }


    }

    private async Task Submit()
    {
        try
        {
            ReturnApiRefatored<ClsMetodosDePagMerchant> ResponseAPi;

            if (ECriacao)
            {
                ResponseAPi = await MetodosService.AdicionarMetodoAsync(Metodo);

            }
            else
            {
                ResponseAPi = await MetodosService.UpdateMetodoAsync(Metodo);
            }

            Console.WriteLine(ResponseAPi);

            string MensagemDeRetorno = string.Join(", ", ResponseAPi.Status == "success" ? ResponseAPi.Data.Messages : ResponseAPi.Messages);
            Snackbar.Add(MensagemDeRetorno, ResponseAPi.Status == "success" ? Severity.Success : Severity.Error);

            if (ResponseAPi.Status == "success")
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                MensagemDeErro = MensagemDeRetorno;
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar conta: {ex.Message}", Severity.Error);
        }

    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }



}