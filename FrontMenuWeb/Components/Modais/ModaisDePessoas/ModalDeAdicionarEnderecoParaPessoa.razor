@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.ServicosDeTerceiros
@inject CEPService CEPService
@inject PessoasService PessoasService


<MudPaper Square="false" Elevation="0" Class="full-height-container">

    <MudOverlay @bind-Visible="CarregandoRespostaDaApiDeCep"
                DarkBackground
                Class="overlay-fullscreen">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    </MudOverlay>

    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">

        <DialogContent>

            <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
               

         
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">                
                        <MudPaper Class="pa-4" style="background-color: var(--mud-palette-background); border-radius:8px">
                            <MudText Typo="Typo.h6" Class="d-flex justify-content-center align-items-center ">
                                Endereço do Cliente
                            </MudText>
                            <MudGrid>
                                <MudItem xs="12" sm="8">
                                    <MudTextField Required RequiredError="A Rua é obrigatório" Label="Rua" @onfocusout=ProcuraCepPorRua @bind-Value="NovoEndereco.Rua" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="4">
                                    <MudTextField Required RequiredError="O Número da casa é obrigatório" Label="Número" @ref=TextFieldDeNumeroDoCliente @bind-Value="NovoEndereco.Numero" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudTextField Required RequiredError="O bairro da casa é obrigatório" Label="Bairro" @bind-Value="NovoEndereco.Bairro" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudTextField Required RequiredError="A Cidade é obrigatório" Label="Cidade" @bind-Value="NovoEndereco.Cidade" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="3">
                                    <MudTextField Required RequiredError="O Estado é obrigatório" Label="Estado" @bind-Value="NovoEndereco.Estado" Variant="Variant.Outlined" MaxLength="2" />
                                </MudItem>

                                <MudItem xs="12" sm="5">
                                    <MudTextField Label="CEP" @bind-Value="NovoEndereco.Cep" Variant="Variant.Outlined"
                                                  Placeholder="_____-___" @onfocusout=ProcuraCep></MudTextField>
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField Label="Complemento" @bind-Value="NovoEndereco.Complemento" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField Label="Referência" @bind-Value="NovoEndereco.Referencia" Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField Label="Observações" @bind-Value="NovoEndereco.ObsEndereco" Variant="Variant.Outlined" />
                                </MudItem>


                                <MudItem xs="12">
                                    <MudTextField Label="Tipo Do Endereço" @bind-Value="NovoEndereco.TipoEndereco" Variant="Variant.Outlined" />
                                </MudItem>


                            </MudGrid>
                        </MudPaper>

                    </MudFocusTrap>

              

                @if (ErroAoAdicionarEndereco)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                        Verifique todos os campos e tente novamente.
                    </MudAlert>
                }

            </MudForm>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">Confirmar</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>



@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    public bool CarregandoRespostaDaApiDeCep { get; set; } = false;
    public bool ErroAoAdicionarEndereco { get; set; } = false;
    private MudTextField<string> TextFieldDeNumeroDoCliente = new MudTextField<string>();

    [Parameter]
    public ClsPessoas Pessoa { get; set; } = new ClsPessoas();//pessoa que vai ser enviada para adicionar o endereço nela

    private EnderecoPessoa NovoEndereco { get; set; } = new EnderecoPessoa()
    {
        TipoEndereco = "Casa"
    };

    private async Task ProcuraCep()
    {
        try
        {

            if (!string.IsNullOrWhiteSpace(NovoEndereco.Cep))
            {
                CarregandoRespostaDaApiDeCep = true;
                var endereco = await CEPService.ConsultarCepAsync(NovoEndereco.Cep);
                CarregandoRespostaDaApiDeCep = false;
                if (endereco != null)
                {
                    NovoEndereco.Rua = endereco.Logradouro!;
                    NovoEndereco.Bairro = endereco.Bairro!;
                    NovoEndereco.Cidade = endereco.Cidade!;
                    NovoEndereco.Estado = endereco.Uf!;

                    if (string.IsNullOrEmpty(TextFieldDeNumeroDoCliente.Text))
                        await TextFieldDeNumeroDoCliente.FocusAsync();
                }
                else
                {
                    // Tratar caso o CEP não seja encontrado
                    NovoEndereco.Rua = string.Empty;
                    NovoEndereco.Bairro = string.Empty;
                    NovoEndereco.Cidade = string.Empty;
                    NovoEndereco.Estado = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            ErroAoAdicionarEndereco = true;
        }
    }

    private async Task ProcuraCepPorRua()
    {
        try
        {

            if (!string.IsNullOrWhiteSpace(NovoEndereco.Rua))
            {
                CarregandoRespostaDaApiDeCep = true;
                var enderecos = await CEPService.ConsultarCepPorRuaAsync(NovoEndereco.Rua);
                CarregandoRespostaDaApiDeCep = false;
                if (enderecos != null && enderecos.Count > 0)
                {
                    var endereco = enderecos.FirstOrDefault();
                    if (enderecos.Count > 1)
                    {
                        if (!string.IsNullOrEmpty(NovoEndereco.Rua))
                            await OpenDialogAsync(enderecos);
                    }

                    if (_enderecoSelecionado is not null)
                    {
                        endereco = _enderecoSelecionado;
                    }

                    NovoEndereco.Cep = endereco.Cep!;
                    NovoEndereco.Rua = endereco.Logradouro!;
                    NovoEndereco.Bairro = endereco.Bairro!;
                    NovoEndereco.Cidade = endereco.Cidade!;
                    NovoEndereco.Estado = endereco.Uf!;

                    if (string.IsNullOrEmpty(TextFieldDeNumeroDoCliente.Text))
                        await TextFieldDeNumeroDoCliente.FocusAsync();
                }
                else
                {
                    // Tratar caso o CEP não seja encontrado
                    NovoEndereco.Bairro = string.Empty;
                    NovoEndereco.Cidade = string.Empty;
                    NovoEndereco.Estado = string.Empty;

                    Snackbar.Add("Rua não encontrada. Por favor, verifique o nome da rua.", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            // Tratar erro ao buscar CEP
            ErroAoAdicionarEndereco = true;
        }
    }

    private EnderecoViaCep? _enderecoSelecionado;
    private async Task OpenDialogAsync(List<EnderecoViaCep> enderecos)
    {
        _enderecoSelecionado = null;

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Enderecos", enderecos }
        };

        var dialogReference = await DialogService.ShowAsync<ModalDeVariosLogradouros>("Varios endereços encontrado com essa chave de pesquisa.", parameters, options);


        StateHasChanged();

        var dialogResult = await dialogReference.Result;
        if (dialogResult.Canceled)
        {
            _enderecoSelecionado = null;
            StateHasChanged();
        }
        else
        {
            _enderecoSelecionado = dialogResult.Data as EnderecoViaCep;
            StateHasChanged();
        }
    }

    private async Task Submit()
    {
        try
        {
            if (!string.IsNullOrEmpty(NovoEndereco.Rua) && !string.IsNullOrEmpty(NovoEndereco.Bairro) && !string.IsNullOrEmpty(NovoEndereco.Numero) && !string.IsNullOrEmpty(NovoEndereco.Cidade) && !string.IsNullOrEmpty(NovoEndereco.Estado))
            {
                var response = await PessoasService.CadastraEndereco(NovoEndereco, Pessoa.Id);

                if (response is not null)
                {
                   Snackbar.Add($"{response}", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
            }
            else
            {
                ErroAoAdicionarEndereco = true;

            }
        }
        catch (Exception ex)
        {
            ErroAoAdicionarEndereco = true;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar() => MudDialog.Cancel();

}
