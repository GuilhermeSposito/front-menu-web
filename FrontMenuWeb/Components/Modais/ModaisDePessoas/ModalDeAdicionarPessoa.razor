@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.ServicosDeTerceiros
@inject CEPService CEPService
@inject PessoasService PessoasService
@inject CnpjPesquisaService CnpjPesquisaService

<MudPaper Square="false" Elevation="0" Class="full-height-container">

    <MudOverlay @bind-Visible="CarregandoRespostaDaApi"
                DarkBackground
                Class="overlay-fullscreen">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    </MudOverlay>

    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">

        <DialogContent>

            <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                <MudRadioGroup @bind-Value="NovaPessoa.TipoPessoaId" @bind-Value:after="@(()=> {if(NovaPessoa.TipoPessoaId == 2){ NovoEndereco.TipoEndereco = "Principal"; }else{NovoEndereco.TipoEndereco = "Casa";}})">
                    <MudRadio Value="1" Color="Color.Secondary" Dense="false">Cliente</MudRadio>
                    <MudRadio Value="2" Color="Color.Success" Dense="true">Fornecedor</MudRadio>
                    <MudRadio Value="3" Color="Color.Secondary" Dense="false">Fornecedor/Cliente</MudRadio>
                </MudRadioGroup>

                @if (NovaPessoa.TipoPessoaId == 1)
                {
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                        <MudPaper Class="pa-4" style="background-color: var(--mud-palette-background); border-radius:8px">
                            <MudTextField Label="Nome Completo"
                                          Value="NovaPessoa.Nome"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, ArrumaNomePrimeiraLetraMAiuscula)"
                                          Variant="Variant.Text"
                                          Clearable
                                          Required
                                          RequiredError="O Nome é obrigatório" />

                            <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                                <MudItem xs="12" sm="12">
                                    <MudTextField Mask="@phoneMask" Label="Telefone (Brasil)" HelperText="Celular"
                                                  Value="@maskedPhone" ValueChanged="EventCallback.Factory.Create<string>(this, OnPhoneChanged)"
                                                  Variant="@Variant.Text" Clearable
                                                  RequiredError="O Telefone é obrigatório" />
                                </MudItem>
                            </MudGrid>
                            <MudTextField Label="Email" @bind-Value="NovaPessoa.Email" Variant="Variant.Text" Clearable />
                            <MudTextField Label="CPF" @bind-Value="NovaPessoa.Cpf" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Desconto" T="int?" @bind-Value="NovaPessoa.Desconto" Variant="Variant.Text" Clearable />
                        </MudPaper>
                    </MudFocusTrap>
                }
                else if (NovaPessoa.TipoPessoaId == 2)
                {
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">

                        <MudPaper Class="pa-4" style="background-color: var(--mud-palette-background); border-radius:8px">
                            <MudTextField Mask="@cnpjMask"
                                          Value="NovaPessoa.Cnpj"
                                          Label="CNPJ"
                                          Variant="Variant.Filled"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          HelperTextOnFocus="true" HelperText="Clique no icone de pesquisa para procurar o CNPJ digitado."
                                          OnAdornmentClick="@(async () => { await PesquisaCnpj(); })"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, OnCnpjChange)" />


                            <MudTextField Label="Razão Social"
                                          Value="NovaPessoa.RazaoSocial"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, ArrumaNomePrimeiraLetraMAiusculaRazaoSocial)"
                                          Variant="Variant.Text"
                                          Clearable
                                          Required
                                          RequiredError="A Razão Social é obrigatória" />

                            <MudGrid Class="justify-space-between" Style="max-width:100%">
                                <MudItem xs="12" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Celular (Brasil)" HelperText="Celular"
                                                  Value="@maskedPhone" ValueChanged="EventCallback.Factory.Create<string>(this, OnPhoneChanged)"
                                                  Variant="@Variant.Text" Clearable
                                                  RequiredError="O Telefone é obrigatório" />
                                </MudItem>
                                <MudItem xs="6" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Celular 2 (Brasil)" HelperText="Celular 2"
                                                  Value="@maskedPhone2" ValueChanged="EventCallback.Factory.Create<string>(this, OnPhoneChanged2)"
                                                  Variant="@Variant.Text" Clearable />
                                </MudItem>
                                <MudItem xs="6" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Telefone  (Brasil)" HelperText="Telefone"
                                                  Value="@NovaPessoa.Telefone2"
                                                  Variant="@Variant.Text" Clearable />
                                </MudItem>
                            </MudGrid>
                            <MudTextField Label="Email" @bind-Value="NovaPessoa.Email" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Contato" @bind-Value="NovaPessoa.Contato" HelperText="Nome do contato Principal da empresa" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Observação" @bind-Value="NovaPessoa.Observacao" HelperText="Observação sobre a empresa" Variant="Variant.Text" Clearable />
                        </MudPaper>
                    </MudFocusTrap>

                }
                else{
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">

                        <MudPaper Class="pa-4" style="background-color: var(--mud-palette-background); border-radius:8px">
                            <MudTextField Mask="@cnpjMask"
                                          Value="NovaPessoa.Cnpj"
                                          Label="CNPJ"
                                          Variant="Variant.Filled"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          HelperTextOnFocus="true" HelperText="Clique no icone de pesquisa para procurar o CNPJ digitado."
                                          OnAdornmentClick="@(async () => { await PesquisaCnpj(); })"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, OnCnpjChange)" />

                            <MudTextField Label="Nome Completo"
                                          Value="NovaPessoa.Nome"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, ArrumaNomePrimeiraLetraMAiuscula)"
                                          Variant="Variant.Text"
                                          Clearable
                                          Required
                                          RequiredError="O Nome é obrigatório" />
                     
                           
                            <MudTextField Label="CPF" @bind-Value="NovaPessoa.Cpf" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Desconto" T="int?" @bind-Value="NovaPessoa.Desconto" Variant="Variant.Text" Clearable />

                            <MudTextField Label="Razão Social"
                                          Value="NovaPessoa.RazaoSocial"
                                          ValueChanged="EventCallback.Factory.Create<string>(this, ArrumaNomePrimeiraLetraMAiusculaRazaoSocial)"
                                          Variant="Variant.Text"
                                          Clearable
                                          Required
                                          RequiredError="A Razão Social é obrigatória" />

                            <MudGrid Class="justify-space-between" Style="max-width:100%">
                                <MudItem xs="12" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Celular (Brasil)" HelperText="Celular"
                                                  Value="@maskedPhone" ValueChanged="EventCallback.Factory.Create<string>(this, OnPhoneChanged)"
                                                  Variant="@Variant.Text" Clearable
                                                  RequiredError="O Telefone é obrigatório" />
                                </MudItem>
                                <MudItem xs="6" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Celular 2 (Brasil)" HelperText="Celular 2"
                                                  Value="@maskedPhone2" ValueChanged="EventCallback.Factory.Create<string>(this, OnPhoneChanged2)"
                                                  Variant="@Variant.Text" Clearable />
                                </MudItem>
                                <MudItem xs="6" sm="6">
                                    <MudTextField Mask="@phoneMask" Label="Telefone  (Brasil)" HelperText="Telefone"
                                                  Value="@NovaPessoa.Telefone2"
                                                  Variant="@Variant.Text" Clearable />
                                </MudItem>
                            </MudGrid>
                            <MudTextField Label="Email" @bind-Value="NovaPessoa.Email" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Contato" @bind-Value="NovaPessoa.Contato" HelperText="Nome do contato Principal da empresa" Variant="Variant.Text" Clearable />
                            <MudTextField Label="Observação" @bind-Value="NovaPessoa.Observacao" HelperText="Observação sobre a empresa" Variant="Variant.Text" Clearable />
                        </MudPaper>
                    </MudFocusTrap>
                

                }

                <MudPaper Class="pa-4" style="background-color: var(--mud-palette-background); border-radius:8px">
                    <MudText Typo="Typo.h6" Class="d-flex justify-content-center align-items-center ">
                        Endereço
                    </MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="8">
                            <MudTextField Required RequiredError="A Rua é obrigatório" Label="Rua" @onfocusout=ProcuraCepPorRua @bind-Value="NovoEndereco.Rua" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" sm="4">
                            <MudTextField Required RequiredError="O Número da casa é obrigatório" Label="Número" @ref=TextFieldDeNumeroDoCliente @bind-Value="NovoEndereco.Numero" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField Required RequiredError="O bairro da casa é obrigatório" Label="Bairro" @bind-Value="NovoEndereco.Bairro" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField Required RequiredError="A Cidade é obrigatório" Label="Cidade" @bind-Value="NovoEndereco.Cidade" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" sm="3">
                            <MudTextField Required RequiredError="O Estado é obrigatório" Label="Estado" @bind-Value="NovoEndereco.Estado" Variant="Variant.Outlined" MaxLength="2" />
                        </MudItem>

                        <MudItem xs="12" sm="5">
                            <MudTextField Label="CEP" @bind-Value="NovoEndereco.Cep" Variant="Variant.Outlined"
                                          Placeholder="_____-___" @onfocusout=ProcuraCep></MudTextField>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField Label="Complemento" @bind-Value="NovoEndereco.Complemento" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField Label="Referência" @bind-Value="NovoEndereco.Referencia" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField Label="Observações" @bind-Value="NovoEndereco.ObsEndereco" Variant="Variant.Outlined" />
                        </MudItem>


                        <MudItem xs="12">
                            <MudTextField Label="Tipo Do Endereço" @bind-Value="NovoEndereco.TipoEndereco" Variant="Variant.Outlined" />
                        </MudItem>


                    </MudGrid>
                </MudPaper>




                @if (ErroAoModificarPessoa)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                        @MensagemErro
                    </MudAlert>
                }

            </MudForm>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">Confirmar</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private MudTextField<string> _descricaoRef;
    private string maskedPhone;
    private string maskedPhone2;
    private string CnpjSemMascara;
    private MudTextField<string> TextFieldDeNumeroDoCliente = new MudTextField<string>();
    private bool ErroAoModificarPessoa = false;
    private string MensagemErro = string.Empty;
    private bool CarregandoRespostaDaApi = false;

    public PatternMask phoneMask = new PatternMask("(##) #####-####")
    {
        MaskChars = new[] { new MaskChar('#', @"[0-9]") }
    };

    public PatternMask cnpjMask = new PatternMask("##.###.###/####-##")
    {
        MaskChars = new[] { new MaskChar('#', @"[0-9]") }
    };



    [Parameter]
    public IEnumerable<ClsPessoas> Pessoas { get; set; }

    private ClsPessoas NovaPessoa { get; set; } = new ClsPessoas()
    {
        TipoPessoaId = 1, // Cliente por padrão
    };

    private EnderecoPessoa NovoEndereco { get; set; } = new EnderecoPessoa()
    {
        TipoEndereco = "Casa"
    };


    private async Task OnPhoneChanged(string value) //remove a mascara e deixa só os números
    {
        maskedPhone = value;
        NovaPessoa.Telefone = new string(value?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());
        await Task.CompletedTask; // para manter a assinatura async
    }

    private async Task OnCnpjChange(string value) //remove a mascara do cnpj
    {
        //NovaPessoa.Cnpj
        NovaPessoa.Cnpj = value;

        CnpjSemMascara = value;
        CnpjSemMascara = new string(value?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());
        await Task.CompletedTask; // para manter a assinatura async
    }

    private async Task OnPhoneChanged2(string value)
    {
        maskedPhone2 = value;
        NovaPessoa.Telefone1 = new string(value?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());
        await Task.CompletedTask; // para manter a assinatura async
    }

    private async Task ArrumaNomePrimeiraLetraMAiuscula(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            NovaPessoa.Nome = string.Empty;

        var words = input.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0; i < words.Length; i++)
        {
            var w = words[i];
            if (w.Length == 1)
                words[i] = char.ToUpper(w[0]).ToString();
            else
                words[i] = char.ToUpper(w[0]) + w.Substring(1).ToLower();
        }
        NovaPessoa.Nome = string.Join(' ', words);
    }

    private async Task ArrumaNomePrimeiraLetraMAiusculaRazaoSocial(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            NovaPessoa.RazaoSocial = string.Empty;

        var words = input.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0; i < words.Length; i++)
        {
            var w = words[i];
            if (w.Length == 1)
                words[i] = char.ToUpper(w[0]).ToString();
            else
                words[i] = char.ToUpper(w[0]) + w.Substring(1).ToLower();
        }
        NovaPessoa.RazaoSocial = string.Join(' ', words);
        NovaPessoa.Nome = NovaPessoa.RazaoSocial; // Atualiza o nome com a razão social
    }

    private async Task ProcuraCep()
    {
        try
        {

            if (!string.IsNullOrWhiteSpace(NovoEndereco.Cep))
            {
                CarregandoRespostaDaApi = true;
                var endereco = await CEPService.ConsultarCepAsync(NovoEndereco.Cep);
                CarregandoRespostaDaApi = false;
                if (endereco != null)
                {
                    NovoEndereco.Rua = endereco.Logradouro!;
                    NovoEndereco.Bairro = endereco.Bairro!;
                    NovoEndereco.Cidade = endereco.Cidade!;
                    NovoEndereco.Estado = endereco.Uf!;

                    if (string.IsNullOrEmpty(TextFieldDeNumeroDoCliente.Text))
                        await TextFieldDeNumeroDoCliente.FocusAsync();
                }
                else
                {
                    // Tratar caso o CEP não seja encontrado
                    NovoEndereco.Rua = string.Empty;
                    NovoEndereco.Bairro = string.Empty;
                    NovoEndereco.Cidade = string.Empty;
                    NovoEndereco.Estado = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            ErroAoModificarPessoa = true;
        }
    }

    private async Task ProcuraCepPorRua()
    {
        try
        {


            if (!string.IsNullOrWhiteSpace(NovoEndereco.Rua))
            {
                CarregandoRespostaDaApi = true;
                var enderecos = await CEPService.ConsultarCepPorRuaAsync(NovoEndereco.Rua);
                CarregandoRespostaDaApi = false;
                if (enderecos != null && enderecos.Count > 0)
                {
                    var endereco = enderecos.FirstOrDefault();
                    if (enderecos.Count > 1)
                    {
                        if (!string.IsNullOrEmpty(NovoEndereco.Rua))
                            await OpenDialogAsync(enderecos);
                    }

                    if (_enderecoSelecionado is not null)
                    {
                        endereco = _enderecoSelecionado;
                    }

                    NovoEndereco.Cep = endereco.Cep!;
                    NovoEndereco.Rua = endereco.Logradouro!;
                    NovoEndereco.Bairro = endereco.Bairro!;
                    NovoEndereco.Cidade = endereco.Cidade!;
                    NovoEndereco.Estado = endereco.Uf!;

                    if (string.IsNullOrEmpty(TextFieldDeNumeroDoCliente.Text))
                        await TextFieldDeNumeroDoCliente.FocusAsync();
                }
                else
                {
                    // Tratar caso o CEP não seja encontrado
                    NovoEndereco.Bairro = string.Empty;
                    NovoEndereco.Cidade = string.Empty;
                    NovoEndereco.Estado = string.Empty;

                    Snackbar.Add("Rua não encontrada. Por favor, verifique o nome da rua.", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            // Tratar erro ao buscar CEP
            ErroAoModificarPessoa = true;
        }
    }

    private async Task PesquisaCnpj()
    {
        try
        {
            CarregandoRespostaDaApi = true;
            ClsCnpjInfoPesquisa? CnpjInfos = await CnpjPesquisaService.ConsultarCNPJAsync(CnpjSemMascara ?? " ");
            CarregandoRespostaDaApi = false;

            if (CnpjInfos is null)
                throw new Exception("CNPJ não encontrado ou inválido.");

            NovaPessoa.RazaoSocial = CnpjInfos.RazaoSocial ?? string.Empty;
            NovaPessoa.Nome = CnpjInfos.RazaoSocial ?? string.Empty;
            NovaPessoa.Telefone2 = CnpjInfos.DddTelefone1 ?? string.Empty;

            NovoEndereco.Cep = CnpjInfos.Cep ?? string.Empty;
            NovoEndereco.Rua = CnpjInfos.Logradouro ?? string.Empty;
            NovoEndereco.Bairro = CnpjInfos.Bairro ?? string.Empty;
            NovoEndereco.Cidade = CnpjInfos.Municipio ?? string.Empty;
            NovoEndereco.Estado = CnpjInfos.Uf ?? string.Empty;
            NovoEndereco.Complemento = CnpjInfos.Complemento ?? string.Empty;
            NovoEndereco.Numero = CnpjInfos.Numero ?? string.Empty;
            NovoEndereco.TipoEndereco = "Principal"; // Definindo o tipo de endereço como Principal para CNPJ
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao pesquisar CNPJ: " + ex.Message, Severity.Error);
        }
    }


    private EnderecoViaCep? _enderecoSelecionado;
    private async Task OpenDialogAsync(List<EnderecoViaCep> enderecos)
    {
        _enderecoSelecionado = null;

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Enderecos", enderecos }
        };

        var dialogReference = await DialogService.ShowAsync<ModalDeVariosLogradouros>("Varios endereços encontrado com essa chave de pesquisa.", parameters, options);


        StateHasChanged();

        var dialogResult = await dialogReference.Result;
        if (dialogResult.Canceled)
        {
            _enderecoSelecionado = null;
            StateHasChanged();
        }
        else
        {
            _enderecoSelecionado = dialogResult.Data as EnderecoViaCep;
            StateHasChanged();
        }
    }

    private async Task Submit()
    {
        try
        {
            if (!string.IsNullOrEmpty(NovoEndereco.Rua) && !string.IsNullOrEmpty(NovoEndereco.Bairro) && !string.IsNullOrEmpty(NovoEndereco.Numero) && !string.IsNullOrEmpty(NovoEndereco.Cidade) && !string.IsNullOrEmpty(NovoEndereco.Estado))
            {
                NovaPessoa.Endereco = NovoEndereco;
                var response = await PessoasService.CadastraPessoa(NovaPessoa);

                if (response is not null)
                {
                    if (response is null)
                    {
                        Snackbar.Add("Erro ao cadastrar pessoa.", severity: Severity.Error);
                        ErroAoModificarPessoa = true;
                    }

                    if (response is not null && response.Status != "success")
                    {
                        Snackbar.Add(response.message ?? "Erro ao cadastrar pessoa.", severity: Severity.Error);
                        ErroAoModificarPessoa = true;
                    }

                    if (response is not null && response.Status == "success")
                    {
                        Snackbar.Add(response.Data.Message ?? "Pessoa Cadastrada com sucesso!", severity: Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                    }
                }
            }
            else
            {
                ErroAoModificarPessoa = true;
                MensagemErro = "Por favor, preencha todos os campos obrigatórios do endereço.";

            }
        }
        catch (Exception ex)
        {
            ErroAoModificarPessoa = true;
            MensagemErro = ex.ToString();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar() => MudDialog.Cancel();
}
