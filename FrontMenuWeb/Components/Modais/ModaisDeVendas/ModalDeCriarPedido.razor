@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Pedidos
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@inject PedidosService AliquotaService
@inject ProdutoService ProdutoService
@inject GrupoServices GrupoService
@implements IBrowserViewportObserver
@implements IAsyncDisposable
@inject PessoasService PessoaService
@inject PedidosService PedidosService

<MudDialog OnKeyDown="HandleKeyDownDialog" TitleClass="p-0" ContentClass="p-0" Class="novo-pedido-dialog mud-width-full mud-height-full p-0" Style="background-color: var(--mud-palette-background)">
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="p-2" Style="background-color: var(--mud-palette-surface); box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);">
            <MudText Class="ms-3" Typo="Typo.h6">Novo Pedido</MudText>
            <MudStack Row="true" Spacing="2">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="Cancelar" />
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="Cancelar" />
            </MudStack>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="w-100 h-100">
            <MudGrid Class="w-100 h-100">
                @*MudItemDeGrupos*@
                @if (!UsandoMobile)
                {
                    <MudItem xs=12 sm="12" md="6" lg="2">
                        <MudPaper Class="h-100 rounded-3" Style="background-color: var(--mud-palette-surface);" Elevation="4">
                            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                                <MudText Typo="Typo.h6">Grupos</MudText>
                            </MudStack>
                            <MudStack Class="w-100 h-100">
                                @if (CarregandoGrupo)
                                {
                                    <MudStack Class="w-100 h-100" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                        <MudText Color="Color.Primary" Typo="Typo.body1">Carregando grupos...</MudText>
                                    </MudStack>
                                }
                                else
                                {
                                    <MudList T="ClsGrupo">
                                        @foreach (var grupo in Grupos)
                                        {
                                            <MudListItem OnClick=@(async () => { await ColocarFiltroPorGrupo(grupo); }) Class="mud-list-item-clickable">
                                                <MudText Typo="Typo.body1">@grupo.Descricao</MudText>
                                            </MudListItem>
                                        }
                                    </MudList>
                                }
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }

                @*MudItem De Produtos*@
                <MudItem xs=12 sm="12" md="6" lg="7">
                    <MudPaper Class="h-100 rounded-3" Style="background-color: var(--mud-palette-surface); overflow-y: auto" Elevation="4">
                        <MudStack Class="w-100 h-100">
                            <MudStack Class="w-100">
                                <MudTextField @ref=TextFieldProd Class="w-100 rounded-2" Label="Pesquisa" Adornment="Adornment.Start" PlaceHolder="Pesquise por produto (Ctrl + I)" Variant="Variant.Filled" T="string" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor=Color.Primary Immediate=true></MudTextField>
                            </MudStack>
                            <MudStack Class="w-100 h-100">
                                @if (CarregandoProduto)
                                {
                                    <MudStack Class="w-100 h-100" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                        <MudText Color="Color.Primary" Typo="Typo.body1">Carregando produtos...</MudText>
                                    </MudStack>
                                }
                                else if (Produtos.Count > 0)
                                {
                                    <MudStack Class="w-100 h-100 p-3" AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
                                        <MudGrid GutterSize="2">
                                            @foreach (var produto in Produtos)
                                            {
                                                <MudItem xs="12" sm="6" md="4" lg="3">
                                                    <MudPaper @onclick="async () => await AdicionarProdutoNoPedido(produto)"
                                                              Elevation="6"
                                                              Class="d-flex align-center pa-2 transition-all product-card"
                                                              Style="background-color: var(--mud-palette-surface); cursor:pointer; min-height:100px; max-height:100px; border-radius:12px;">
                                                        <MudGrid Class="h-100">
                                                            <!-- Avatar -->
                                                            <MudItem xs="3" Class="d-flex justify-center align-center">
                                                                <MudAvatar Size="Size.Large"
                                                                           Color="Color.Primary"
                                                                           Square="true"
                                                                           Class="fw-bold text-white">
                                                                    @produto.Descricao.Substring(0, 1)
                                                                </MudAvatar>
                                                            </MudItem>

                                                            <!-- Informações -->
                                                            <MudItem xs="9" Class="d-flex flex-column justify-center">
                                                                <MudText Typo="Typo.subtitle1" Class="fw-semibold text-truncate">
                                                                    @produto.Descricao
                                                                </MudText>
                                                                <MudText Typo="Typo.body2">
                                                                    @($"A Partir de: {produto.Precos.Min(p => p.Valor):C}")
                                                                </MudText>
                                                            </MudItem>
                                                        </MudGrid>
                                                    </MudPaper>
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </MudStack>

                                }
                                else
                                {
                                    <MudStack AlignItems="AlignItems.Center"
                                              Justify="Justify.Center"
                                              Style="width: 100%; height: 100%; opacity: 0.4;">
                                        <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" Class="mb-2" />
                                        <MudText Typo="Typo.subtitle1" Align="Align.Center">
                                            Nenhum item
                                        </MudText>
                                        <MudText Typo="Typo.caption" Align="Align.Center">
                                            Seus produtos aparecerão aqui quando existirem.
                                        </MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                @*MudItem De Carrinho*@
                <MudItem xs=12 sm="12" md="12" lg="3">
                    <MudPaper Class="h-100 rounded p-2" Style="background-color: var(--mud-palette-surface)" Elevation="4">
                        @*Informações do pedido*@
                        <MudStack Justify="Justify.SpaceBetween" Class="w-100 h-100 mt-2 rounded-2 mb-1" Style="background-color: var(--mud-palette-background);">
                            <MudStack>
                                <MudStack>
                                    <MudTextField Class="rounded-2" Value="PesquisaPessoa" Label="Pesquisa" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.People" PlaceHolder="Pesquisar cliente..." @onfocus="OnFocusAutoCompleteManual" @onfocusout="OnFocusOutAutoCompleteManual" Immediate=true ValueChanged="ValueDeAutoCompleteMudou" T="string" Variant="Variant.Outlined" />
                                    @if (MostrarSugestoes)
                                    {
                                        <MudPaper Elevation="4">
                                            <MudList T="ClsPessoas" Dense="true">
                                                @foreach (var pessoa in PessoasParaSelecionar)
                                                {
                                                    <MudListItem @onkeydown=@(async (e) => { await HandleKeyDown(e, pessoa); }) OnClick="@(async x => { await SelecionarPessoa(pessoa); })">
                                                        @pessoa.Nome
                                                    </MudListItem>
                                                }
                                                <MudListItem OnClick="AbreModalDeAdicionarPessoa">
                                                    <MudStack Row=true AlignItems="AlignItems.Center" Spacing="3">
                                                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                                                        <span>Adicionar Cliente</span>
                                                    </MudStack>
                                                </MudListItem>
                                            </MudList>
                                        </MudPaper>
                                    }
                                </MudStack>

                                <MudStack>
                                    <MudSelect Label="Tipo do Pedido" T="string" @bind-Value=@NovoPedido.TipoDePedido Variant="Variant.Outlined">
                                        <MudSelectItem Value="@("BALCÃO")">
                                            <MudStack Row=true AlignItems="AlignItems.Center" Spacing="3">
                                                <MudIcon Icon="@Icons.Material.Filled.EmojiPeople" />
                                                <span>BALCÃO</span>
                                            </MudStack>
                                        </MudSelectItem>
                                        <MudSelectItem Value="@("DELIVERY")">
                                            <MudStack Row=true AlignItems="AlignItems.Center" Spacing="3">
                                                @if (NovoPedido.Endereco is null)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.TwoWheeler" />
                                                    <span>DELIVERY</span>
                                                }
                                                else
                                                {
                                                    <MudStack Row=true>
                                                        <MudIcon Icon="@Icons.Material.Filled.TwoWheeler" />
                                                        <span>DELIVERY - @NovoPedido.Endereco.Rua, @NovoPedido.Endereco.Numero - @NovoPedido.Endereco.Bairro</span>
                                                    </MudStack>
                                                }
                                            </MudStack>
                                        </MudSelectItem>
                                    </MudSelect>
                                </MudStack>

                                <MudStack>
                                    <MudExpansionPanels>
                                        <MudExpansionPanel Icon="@Icons.Material.Filled.Notes" Text="Observações do pedido">
                                            <MudStack Class="w-100 h-100">
                                                <MudTextField T="string" Placeholder="Adicione uma observação no pedido" />
                                            </MudStack>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </MudStack>
                                <MudDivider Light=true Class="w-100" />

                                <MudStack>
                                    @*Carrinho*@
                                    <MudStack class="p-1" Row=true Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.h6" Style="font-weight:400">Carrinho</MudText>
                                        <MudButton OnClick="@(() => { NovoPedido.Itens.Clear(); })">Limpar</MudButton>
                                    </MudStack>

                                    @*itens*@
                                    <MudStack>
                                        @foreach (var produtoNoPedido in NovoPedido.Itens)
                                        {
                                            <MudPaper Elevation="1" Class="p-2 rounded-2" Outlined=true Style="background-color: var(--mud-palette-background)">
                                                <MudStack>
                                                    <MudText Style="font-weight: 700">@produtoNoPedido.Descricao</MudText>
                                                    <MudText>@produtoNoPedido.Quantidade X @produtoNoPedido.PrecoTotal.ToString("C")</MudText>
                                                    @if (produtoNoPedido.Complementos.Count > 0)
                                                    {
                                                        <MudDivider Light=true Class="w-100" />
                                                        @foreach (var complemento in produtoNoPedido.Complementos)
                                                        {
                                                            <MudStack Class="w-100" Justify="Justify.Center" AlignItems="AlignItems.End">
                                                                <MudText Color="Color.Primary" Typo="Typo.caption">@complemento.Descricao - @complemento.Quantidade X @complemento.PrecoUnitario.ToString("C")</MudText>
                                                            </MudStack>
                                                        }
                                                    }
                                                </MudStack>
                                            </MudPaper>
                                        }
                                    </MudStack>
                                </MudStack>
                            </MudStack>


                            <MudPaper Class="d-flex mb-2 flex-wrap gap-2 justify-content-center align-items-center"
                                      Style="position: sticky; bottom: 0; z-index: 10; background-color: var(--mud-palette-primary); box-shadow: 0 -2px 5px rgba(0,0,0,0.1); border-radius: 8px;">
                                <MudButton Variant="Variant.Filled" OnClick="PagarPedido" Color="Color.Primary" Class="w-100">
                                    PAGAR (Ctrl + Alt)
                                </MudButton>
                            </MudPaper>

                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudStack>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private MudTextField<string> _descricaoRef;
    private string MensagemDeErro = "Erro ao criar pedido. Verifique os dados e tente novamente.";
    private bool CarregandoProduto = true;
    private bool CarregandoGrupo = true;
    private MudTextField<string> TextFieldProd = new MudTextField<string>();

    //props das visualizações
    private List<ClsGrupo> Grupos = new();
    private List<ClsProduto> Produtos = new();

    //Lógica do pedido
    private ClsPedido NovoPedido = new();

    //Lógica do AutoComplete de Pessoas
    private List<ClsPessoas> PessoasParaSelecionar { get; set; } = new List<ClsPessoas>();
    private ClsPessoas? PessoaSelecionada = null;
    private string PesquisaPessoa = string.Empty;
    private bool MostrarSugestoes = false;


    public async Task AdicionarProdutoNoPedido(ClsProduto produto, bool AtualizandoItem = false)
    {

        if (produto.GruposDeComplementosDoProduto is not null && produto.GruposDeComplementosDoProduto.Count > 0)
        {
            var parameters = new DialogParameters
            {
               { "AtualizandoItem",AtualizandoItem},
               { "Produto", produto}
            };

            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

            var dialog = await DialogService.ShowAsync<ModalDeComplementoETamanhoDoItem>("Detalhes do item", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is ItensPedido itemPedido)
            {
                //Verifica se já existe o produto no pedido
                if (NovoPedido.Itens.Any(x => x.Produto?.Id == produto.Id &&
                    x.Complementos.SequenceEqual(itemPedido.Complementos) &&
                    x.Preco.Id == itemPedido.Preco.Id &&
                    x.Observacoes == itemPedido.Observacoes))
                {
                    var itemExistente = NovoPedido.Itens.First(x => x.Produto == produto);
                    itemExistente.Quantidade += 1;
                    itemExistente.PrecoTotal = itemExistente.PrecoUnitario * itemExistente.Quantidade;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                NovoPedido.Itens.Add(itemPedido);
                return;
            }
            else
            {
                Snackbar.Add("Produtos com informações obrigatórias não informadas", Severity.Error);
                return;
            }

        }

        //Verifica se já existe o produto no pedido
        if (NovoPedido.Itens.Any(x => x.Produto == produto))
        {
            var itemExistente = NovoPedido.Itens.First(x => x.Produto == produto);
            itemExistente.Quantidade += 1;
            itemExistente.PrecoTotal = itemExistente.PrecoUnitario * itemExistente.Quantidade;
            await InvokeAsync(StateHasChanged);
            return;
        }

        ItensPedido ItemParaAdicionarNoPedido = new()
        {
            Descricao = produto.Descricao,
            Produto = produto,
            Quantidade = 1,
            PrecoUnitario = produto.Precos.Min(p => p.Valor),
            PrecoTotal = produto.Precos.Min(p => p.Valor)
        };

        NovoPedido.Itens.Add(ItemParaAdicionarNoPedido);
        await InvokeAsync(StateHasChanged);
    }

    private async Task PagarPedido()
    {
        @if (NovoPedido.Itens.Count == 0)
        {
            Snackbar.Add("Adicione ao menos um item ao pedido para continuar.", Severity.Error);
            return;
        }

        await Submit();
    }

    protected override async Task OnInitializedAsync()
    {
        await CarregarGrupos();
        await CarregarProdutos();
    }

    private async Task Submit()
    {
        /*var json = System.Text.Json.JsonSerializer.Serialize(NovoPedido);
        Console.WriteLine(json);*/

        var ResponseAPi = await PedidosService.CreatePedido(NovoPedido);

        string MensagemDeRetorno = string.Join(", ", ResponseAPi.Status == "success" ? ResponseAPi.Data.Messages : ResponseAPi.Messages);
        Snackbar.Add(MensagemDeRetorno, ResponseAPi.Status == "success" ? Severity.Success : Severity.Error);

        if (ResponseAPi.Status != "success")
        {
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, ClsPessoas pessoa)
    {
        if (e.Key == "Enter")
        {
            await SelecionarPessoa(pessoa);
        }
    }

    private async Task HandleKeyDownDialog(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.AltKey)
        {
            await PagarPedido();
        }

        if (e.CtrlKey && e.Key == "i")
        {
            await TextFieldProd.FocusAsync();
        }
    }

    private async void AbreModalDeAdicionarPessoa()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ModalDeAdicionarPessoa>("Cadastrar Pessoa", options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            StateHasChanged();
        }
    }

    private async Task CarregarGrupos()
    {
        try
        {
            CarregandoGrupo = true;
            Grupos = await GrupoService.GetGrupos();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao carregar grupos. Tente novamente.", Severity.Error);
        }
        finally
        {
            CarregandoGrupo = false;
            StateHasChanged();
        }
    }

    private async Task CarregarProdutos()
    {
        try
        {
            CarregandoProduto = true;

            var response = await ProdutoService.GetProdutosPorPaginaAsync(1, 50, null, null);

            Produtos = response.Data;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao carregar produtos. Tente novamente.", Severity.Error);
        }
        finally
        {
            CarregandoProduto = false;
            StateHasChanged();

        }
    }

    public async Task ColocarFiltroPorGrupo(ClsGrupo grupo)
    {
        try
        {
            CarregandoProduto = true;
            var response = await ProdutoService.GetProdutosPorPaginaAsync(1, 50, null, grupo.Id);
            Produtos = response.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao carregar produtos. Tente novamente.", Severity.Error);
        }
        finally
        {
            CarregandoProduto = false;
        }
    }

    private async void Cancelar()
    {
        var parameters = new DialogParameters<ModalDeExcluir>
          {
              { x => x.ContentText, $"Ao sair da página, este pedido não será criado. Ele e as informações inseridas serão perdidas." },
              { x => x.ButtonText, "Sim" },
              { x => x.Color, Color.Error}
          };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ModalDeExcluir>("Sair da página", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is bool sucesso && sucesso)
        {
            MudDialog.Cancel();
        }

    }

    private async void OnFocusAutoCompleteManual(FocusEventArgs args)
    {
        MostrarSugestoes = true;
        await ValueDeAutoCompleteMudou(PesquisaPessoa);
    }
    private void OnFocusOutAutoCompleteManual(FocusEventArgs args)
    {

        //  MostrarSugestoes = false;
    }

    private async Task ValueDeAutoCompleteMudou(string? value)
    {
        PesquisaPessoa = value ?? string.Empty;

        try
        {
            var ResponseAPi = await PessoaService.GetPessoasPaginado(PesquisaPessoa);
            PessoasParaSelecionar = ResponseAPi.Data.Lista ?? new List<ClsPessoas>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao procurar pessoas: {ex.Message}", Severity.Error);

        }
    }

    private async Task SelecionarPessoa(ClsPessoas pessoa)
    {
        PessoaSelecionada = pessoa;
        NovoPedido.Cliente = pessoa;
        PesquisaPessoa = pessoa.Nome;
        MostrarSugestoes = false;
        NovoPedido.Endereco = null;

        //abri o modal de enderecose for delivery
        await AbreModalDeEnderecos(pessoa);

        await InvokeAsync(StateHasChanged);
    }

    private async Task AbreModalDeEnderecos(ClsPessoas Pessoa)
    {
        List<EnderecoPessoa> enderecos = await PessoaService.GetEnderecosPorPessoa(Pessoa.Id);

        if (enderecos.Count == 0)
        {
            var parameters = new DialogParameters
                {
                    { "Pessoa", Pessoa }
                };

            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true };

            var dialog = await DialogService.ShowAsync<ModalDeAdicionarEnderecoParaPessoa>("Cadastrar endereço", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled && result.Data is bool sucesso && sucesso)
            {
                enderecos = await PessoaService.GetEnderecosPorPessoa(Pessoa.Id);
                NovoPedido.Endereco = enderecos.First();
                NovoPedido.EnderecoId = NovoPedido.Endereco.Id;
                Snackbar.Add("Endereço adicionado com sucesso", Severity.Success);
                StateHasChanged();
            }
            return;
        }
        else if (enderecos.Count == 1)
        {
            NovoPedido.Endereco = enderecos.First();
            NovoPedido.EnderecoId = NovoPedido.Endereco.Id;
            Snackbar.Add("Endereço adicionado com sucesso", Severity.Success);
            return;
        }
        else if (enderecos.Count > 1)
        {
            Snackbar.Add("Esta pessoa possui varios enderecos", Severity.Info);
            return;
        }
    }

    //Lógica do Drawer de edição de produto
    private bool carregandoProdutoParaEdicao = true;
    private ClsProduto? ProdutoSelecionadoParaEdicao = null!;
    [Inject] private IBrowserViewportService BrowserViewportService { get; set; }
    private bool _open;
    private Anchor _anchor;
    private string _height = "100%";
    private int _width = 0;
    private string _drawerWidth = "65%";
    private bool UsandoMobile = false;
    //--------------------------------------------------------------------------------------


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
        => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs args)
    {
        _width = args.BrowserWindowSize.Width;

        // Atualiza o tamanho do drawer com base na largura
        _drawerWidth = _width < 768 ? "95%" : "65%";

        if (_width < 768)
        {
            UsandoMobile = true;
        }
        else
        {
            UsandoMobile = false;
        }

        return InvokeAsync(StateHasChanged);
    }
}
