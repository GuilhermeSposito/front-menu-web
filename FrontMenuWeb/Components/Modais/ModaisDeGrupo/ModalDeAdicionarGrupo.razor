@rendermode RenderMode.InteractiveWebAssembly
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Services
@inject GrupoServices GrupoService


<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>

            <MudForm @onkeydown="HandleKeyDown" class="" Spacing="5" @onsubmit="Submit">
                @if (UltimoGrupo.CodigoInterno is not null)
                {
                    <MudTextField T="string"
                                  Label="Descrição do Grupo"
                                  Value="@NovoGrupo.Descricao"
                                  ValueChanged="OnDescricaoChanged"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="A descrição é obrigatória"
                                  @ref="_descricaoRef"
                                  Style="text-transform: uppercase;" />
                    <MudTextField T="string" @bind-Value=NovoGrupo.CodigoInterno Label="Codigo interno" Required="true"
                    RequiredError="O código interno é obrigatório" />
                }
                else
                {

                    <MudTextField T="string"
                                  Label="Descrição do Grupo"
                                  Value="@NovoGrupo.Descricao"
                                  ValueChanged="OnDescricaoChanged"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="A descrição é obrigatória"
                                  @ref="_descricaoRef"
                                  Style="text-transform: uppercase;" />
                    <MudTextField T="string" @bind-Value=NovoGrupo.CodigoInterno Label="Codigo interno" Required="true"
                                  RequiredError="O código interno é obrigatório" />
                }
                <div>
                    <MudText>Ultilizar Carro Chefe?</MudText>
                    <div class="d-flex">

                        <MudRadioGroup @bind-Value="NovoGrupo.UltilizarCarroChefe">
                            <MudRadio Value="true" Color="Color.Success" Dense="true">Sim</MudRadio>
                            <MudRadio Value="false" Color="Color.Secondary" Dense="false">Não</MudRadio>
                        </MudRadioGroup>

                    </div>
                    @if (ErroAoAdicionarGrupo)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-2">
                            Verifique todos os campos e tente novamente.
                        </MudAlert>
                    }
                </div>
            </MudForm>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton style="color: #F88113" OnClick="Submit">Adicionar</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private MudTextField<string> _descricaoRef = new MudTextField<string>();

    [Parameter]
    public List<ClsGrupo> Grupos { get; set; }

    ClsGrupo UltimoGrupo = new ClsGrupo();
    ClsGrupo NovoGrupo = new ClsGrupo();
    private bool ErroAoAdicionarGrupo = false;

    protected override async Task OnInitializedAsync()
    {
        if (Grupos is not null)
        {
            UltimoGrupo = Grupos.OrderByDescending(g => g.Id).FirstOrDefault() ?? new ClsGrupo();
            NovoGrupo.CodigoInterno = int.TryParse(UltimoGrupo.CodigoInterno, out int codigo) ? (codigo + 1).ToString().PadLeft(4, '0') : "0001";
            await Task.Delay(10); // Simula um pequeno atraso para garantir que o campo esteja pronto para receber o foco
        }
    }

    private void OnDescricaoChanged(string val)
    {
        NovoGrupo.Descricao = val?.ToUpperInvariant();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (NovoGrupo.CodigoInterno is not null)
        {
            await _descricaoRef.FocusAsync();
        }
    }

    private async Task Submit()
    {
        if (NovoGrupo.Descricao is not null && NovoGrupo.CodigoInterno is not null)
        {
            NovoGrupo.Descricao = NovoGrupo.Descricao.ToUpperInvariant().Trim();
            var response = await GrupoService.AdicionaGrupo(NovoGrupo);
            if (!response.IsSuccessStatusCode)
            {
                ErroAoAdicionarGrupo = true;
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        else
        {
            ErroAoAdicionarGrupo = true;
        }


    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }
}