@rendermode RenderMode.InteractiveWebAssembly
@attribute [Authorize]
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FrontMenuWeb.Components.Modais.ModaisDePessoas
@using FrontMenuWeb.Models.Financeiro
@using FrontMenuWeb.Models.Merchant
@using FrontMenuWeb.Models.Pessoas
@using FrontMenuWeb.Services
@using FrontMenuWeb.Services.FinanceroServices
@using System.Globalization
@using FrontMenuWeb.Services.ServicosDeTerceiros
@inject IJSRuntime JS
@inject MesasServices MesasServices


<MudPaper Square="false" Elevation="0">
    <MudDialog class="rounded-3 w-100" style="background-color: var(--mud-palette-surface);">
        <DialogContent>

            @if (!Carregando)
            {
                @if (!ECriacao)
                {

                    <MudDivider DividerType="DividerType.FullWidth" Class="mb-2" Light=true />
                    <MudNumericField T="int" @bind-Value="Mesa.CodigoExterno" Variant="Variant.Filled" Immediate=true />

                    <MudDivider DividerType="DividerType.FullWidth" Class="mb-2 mt-2" Light=true />
                    <MudStack style="background-color: var(--mud-palette-background);">
                        <MudCheckBox @bind-Value="Mesa.Bloqueado" Label="Bloqueado" Color="Color.Primary" />
                        <MudCheckBox @bind-Value="Mesa.Reservado" Label="Reservado" Color="Color.Primary" />
                    </MudStack>
                }
                else
                {
                    <MudTabs Centered="true" Color="Color.Primary">
                        <MudTabPanel Text="Intervalo">
                            <MudStack Class="w-100">
                                <MudNumericField T="int?" @bind-Value=Mesa.InicioDoIntervalo Min="0" Immediate=true Label="Inicio Do Intervalo" Variant="Variant.Filled" />
                                <MudNumericField T="int?" @bind-Value=Mesa.FimDoIntervalo Min="0" Immediate=true Label="Fim Do Intervalo" Variant="Variant.Filled" />
                            </MudStack>
                        </MudTabPanel>
                        <MudTabPanel Text="Único">
                            <MudStack Class="w-100">
                                <MudNumericField T="int" @bind-Value="Mesa.CodigoExterno" Variant="Variant.Filled" Immediate=true />

                                <MudDivider DividerType="DividerType.FullWidth" Class="mb-2 mt-2" Light=true />
                                <MudStack style="background-color: var(--mud-palette-background);">
                                    <MudCheckBox @bind-Value="Mesa.Bloqueado" Label="Bloqueado" Color="Color.Primary" />
                                    <MudCheckBox @bind-Value="Mesa.Reservado" Label="Reservado" Color="Color.Primary" />
                                </MudStack>
                                </MudStack>
                        </MudTabPanel>
                    </MudTabs>
                }



            }


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancelar">Cancelar</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">@(ECriacao ? "Adicionar" : "Atualizar")</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    public CultureInfo _pt = CultureInfo.GetCultureInfo("pt-BR");
    private MudNumericField<float> _numeric;

    private bool Erro = false;
    private string MensagemDeErro = string.Empty;
    private bool Carregando = true;

    [Parameter] public bool ECriacao { get; set; }
    [Parameter] public int IdDaMesa { get; set; } = 0;

    private ClsMesasEComandas Mesa = new ClsMesasEComandas();


    protected override async Task OnInitializedAsync()
    {
        try
        {


            if (!ECriacao)
            {
                Mesa = await MesasServices.GetMesaAsync(IdDaMesa);
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar Lançamento: {ex.Message}", Severity.Error);
        }
        finally
        {
            Carregando = false;
        }

    }



    private async Task Submit()
    {
        try
        {
            if (Mesa.InicioDoIntervalo == 0 || Mesa.FimDoIntervalo == 0)
            {
                Mesa.InicioDoIntervalo = null;
                Mesa.FimDoIntervalo = null;
            }

            ReturnApiRefatored<ClsMesasEComandas> ResponseAPi = new ReturnApiRefatored<ClsMesasEComandas>();

            if (ECriacao)
            {
               

                ResponseAPi = await MesasServices.CreateMesaAsync(Mesa);
            }
            else
            {

                ResponseAPi = await MesasServices.UpdateMesaAsync(Mesa);

            }

            string MensagemDeRetorno = string.Join(", ", ResponseAPi.Status == "success" ? ResponseAPi.Data.Messages : ResponseAPi.Messages);
            Snackbar.Add(MensagemDeRetorno, ResponseAPi.Status == "success" ? Severity.Success : Severity.Error);

            if (ResponseAPi.Status == "success")
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                MensagemDeErro = MensagemDeRetorno;
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao adicionar mesa: {ex.Message}", Severity.Error);
        }

    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Submit();
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }

    private async Task HandleFocus(FocusEventArgs args)
    {
        // O campo interno do MudNumericField é um InputBase,
        // podemos chamar SelectAsync() nele.
        await _numeric.FocusAsync();  // garante o foco
        await _numeric.SelectAsync(); // seleciona todo o texto
    }

}
