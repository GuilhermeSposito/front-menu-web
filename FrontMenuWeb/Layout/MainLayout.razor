@using FrontMenuWeb.Models.Merchant
@using MudBlazor;
@using System.Text.Json

@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar Color="Color.Primary" Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText id="ProgramName" Typo="Typo.h5" Class="ml-3">@ProgramName</MudText>
                <MudSpacer />
                @if (AppState.MerchantLogado is not null)
                {
                    <MudText Typo="Typo.subtitle1" id="merchantName" Class="ml-3">@AppState.MerchantLogado.NomeFantasia</MudText>
                    @if (AppState.MerchantLogado.FuncionarioLogado is not null)
                    {
                        <MudText Typo="Typo.subtitle1" id="merchantName" Class="ml-3">/  @AppState.MerchantLogado.FuncionarioLogado.Nome</MudText>
                    }
                }

                <MudSpacer />
                <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
                <MudMenu Variant="Variant.Text"
                         Size="Size.Medium"
                         Color="Color.Inherit"
                         Icon="@Icons.Material.Filled.Info"
                         AnchorOrigin="Origin.TopRight"
                         TransformOrigin="Origin.TopRight">

                    <!-- Ifood -->
                    <MudMenuItem>
                        <MudPaper Class="p-3 rounded-xl shadow-sm w-80">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Color="Color.Success" Size="Size.Medium">
                                        <MudIcon Icon="@Icons.Material.Filled.Fastfood" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.h6">Ifood</MudText>
                                </MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </MudStack>
                            <MudText Typo="Typo.body2" Class="mt-1 text-gray-600">
                                Seu ifood está ativo/online e esperando por pedidos!
                            </MudText>
                        </MudPaper>
                    </MudMenuItem>

                    <!-- App do Garçom -->
                    <MudMenuItem>
                        <MudPaper Class="p-3 rounded-xl shadow-sm w-80">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Color="Color.Success" Size="Size.Medium">
                                        <MudIcon Icon="@Icons.Material.Filled.Sync" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.h6">App do Garçom</MudText>
                                </MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </MudStack>
                            <MudText Typo="Typo.body2" Class="mt-1 text-gray-600">
                                Seu app de Garçom está ativo/online e esperando por pedidos!
                            </MudText>
                        </MudPaper>
                    </MudMenuItem>

                    <!-- Entregas -->
                    <MudMenuItem>
                        <MudPaper Class="p-3 rounded-xl shadow-sm w-80">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Color="Color.Success" Size="Size.Medium">
                                        <MudIcon Icon="@Icons.Material.Filled.DeliveryDining" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.h6">Entregas</MudText>
                                </MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </MudStack>
                            <MudText Typo="Typo.body2" Class="mt-1 text-gray-600">
                                Sua integração com as plataformas de entregas estão ativas
                            </MudText>
                        </MudPaper>
                    </MudMenuItem>

                    <!-- Cardápio Digital -->
                    <MudMenuItem>
                        <MudPaper Class="p-3 rounded-xl shadow-sm w-80">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Color="Color.Error" Size="Size.Medium">
                                        <MudIcon Icon="@Icons.Material.Filled.RestaurantMenu" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.h6">Cardápio Digital</MudText>
                                </MudStack>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </MudStack>
                            <MudText Typo="Typo.body2" Class="mt-1 text-gray-600">
                                Sua integração com seu cardápio digital está ativa, mas seu cardápio está offline
                            </MudText>
                        </MudPaper>
                    </MudMenuItem>
                </MudMenu>



            </MudAppBar>

            <MudDrawer Style="background-color: var(--mud-palette-surface);" id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <MudNavMenu>
                    <MudDivider Class="my-2" />
                    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Inicio</MudNavLink>

                    <MudNavGroup Title="Catálogo" Icon="@Icons.Material.Filled.Inventory" Expanded="false">

                        <MudNavLink Icon="@Icons.Material.Filled.Category" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/grupos", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroGrupoProduto); })">Grupos</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Inventory" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/produtos", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroProduto); })">Produtos</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.AddCircle" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/complementos", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroProduto); })">Complementos</MudNavLink>

                    </MudNavGroup>

                    @*<MudNavLink Href="/claims" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Claims</MudNavLink>*@

                    @*Cadastros*@
                    <MudNavGroup Title="Cadastros" Icon="@Icons.Material.Filled.AppRegistration" Expanded="false">
                        <MudNavLink Icon="@Icons.Material.Filled.People" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/pessoas", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroDePessoa); })">Pessoas</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.GroupWork" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/funcionarios", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroDeFuncionarios); })">Funcionários</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Percent" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/aliquotas", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroDeAliquotas); })">Alíquotas</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.TableRestaurant" Href="/pagemconst">Mesas/Comandas</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Discount" Href="/pagemconst">Promoções</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Place" Href="/pagemconst">Bairros</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.FoodBank" Href="/pagemconst">Garçons</MudNavLink>
                    </MudNavGroup>

                    @*Financeiro*@
                    <MudNavGroup Title="Financeiro" Icon="@Icons.Material.Filled.CurrencyExchange" Expanded="false">

                        <MudNavGroup Title="Cadastros" Icon="@Icons.Material.Filled.AppRegistration" Expanded="false">
                            <MudNavLink Icon="@Icons.Material.Filled.AccountBalance" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/financeiro/contas", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroDeContas); })">Contas</MudNavLink>
                            <MudNavLink Icon="@Icons.Material.Filled.Category" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/financeiro/categorias", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroDeCategoriasFinanceiro); })">Categorias</MudNavLink>
                            <MudNavLink Icon="@Icons.Material.Filled.AttachMoney" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/financeiro/formas-de-recebimento", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastroFormasDeRecebimento); })">Forma de Recebimento</MudNavLink>
                            <MudNavLink Icon="@Icons.Material.Filled.MoneyOffCsred" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/financeiro/metodos", AppState.MerchantLogado.FuncionarioLogado?.AcessoCadastraFormaDePagamento); })">Método de Pagamentos</MudNavLink>
                        </MudNavGroup>

                        <MudNavLink Icon="@Icons.Material.Filled.Wallet" OnClick="@(() => { HandleNavClick(AppState.MerchantLogado, "/financeiro/lancamentos", AppState.MerchantLogado.FuncionarioLogado?.AcessoLancamentosFinanceiro); })">Lançamento financeiro</MudNavLink>
                    </MudNavGroup>

                    <MudNavGroup Title="Estatísticas" Icon="@Icons.Material.Filled.QueryStats" Expanded="false">
                        <MudNavLink Icon="@Icons.Material.Filled.Sell" Href="/pagemconst">Tiket Médio</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.TableRestaurant" Href="/pagemconst">Performance dos Garçons</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.AttachMoney" Href="/pagemconst">Posição Fiscal</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Sell" Href="/pagemconst">Vendas</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.AddBusiness" Href="/pagemconst">Compras</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.BusinessCenter" Href="/pagemconst">Operações de Caixa</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.NetworkCheck" Href="/pagemconst">Vendas Pela Internet</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.DeliveryDining" Href="/pagemconst">Entregas</MudNavLink>
                    </MudNavGroup>

                    <MudNavGroup Title="Configurações" Icon="@Icons.Material.Filled.Settings" Expanded="false">
                        <MudNavLink Icon="@Icons.Material.Filled.IntegrationInstructions" Href="/pagemconst">Integrações</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Print" Href="/pagemconst">Impressões</MudNavLink>
                        <MudNavLink Icon="@Icons.Material.Filled.Settings" Href="/pagemconst">Geral</MudNavLink>
                    </MudNavGroup>

                    <MudNavLink @onclick="Logout" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ExitToApp">Sair</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
        </Authorized>

    </AuthorizeView>

    <MudMainContent Class="pt-16 pa-4 mud-theme-background min-vh-100" Style="background-color: var(--mud-palette-background)">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    Ocorreu um erro. Por favor recarregue a página.
    <a href="." class="reload">Clique aqui para recarregar!</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private bool _open = false;
    private bool _dense = false;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;
    private string ProgramName = "Sophos";
    private const string ThemePreferenceKey = "themePreference"; // chave no localStorage

    private void ToggleDrawer()
    {
        _open = !_open;

    }

    private async void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;

        await SetThemeAsync(_isDarkMode);
    }

    private async Task SetThemeAsync(bool isDarkMode)
    {
        await LocalStorage.SetItemAsync(ThemePreferenceKey, isDarkMode);

    }


    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync(ThemePreferenceKey))
        {
            bool isDarkMode = await LocalStorage.GetItemAsync<bool>(ThemePreferenceKey);
            _isDarkMode = isDarkMode;
        }


        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity?.IsAuthenticated == true)
        {
            ClsMerchant? merchant = null;
            IEnumerable<System.Security.Claims.Claim> claims;

            claims = user.Claims;

            var merchantClaim = claims.FirstOrDefault(c => c.Type == "Merchant");
            if (merchantClaim != null)
            {
                merchant = JsonSerializer.Deserialize<ClsMerchant?>(
                    merchantClaim.Value,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );

                if (merchant is not null)
                    AppState.MerchantLogado = merchant;
            }
            //AppState.MerchantLogado = await MerchantServices.GetMerchantAsync();
        }
    }

    public async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");

        if (AuthStateProvider is CustomAuthStateProvider customAuthProvider)
        {
            customAuthProvider.NotifyAuthenticationStateChanged();
        }

        Navigation.NavigateTo("/login", forceLoad: true);
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    private readonly PaletteLight _lightPalette = new()
    {
        Primary = "#F88113",
        Secondary = "#192436",
        Black = "#110e2d",
        Background = "#FAFBFC",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
        Surface = "#FFFFFF",
        TextPrimary = "#000000",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#F88113",
        Surface = "#101628",
        Background = "#192436",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#ffffff",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d80", //"#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80", //#404553
        Secondary = "#192436"
    };

    //#404553

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };


    private async void HandleNavClick(ClsMerchant merchantLogado, string url, bool? temAcesso)
    {
        if (merchantLogado.FuncionarioLogado is null)
        {
            Navigation.NavigateTo(url);
            return;
        }

        if (temAcesso == true)
        {
            Navigation.NavigateTo(url);
        }
        else
        {
            await AbreMensagemDeAcessoNegado();
        }
    }

    private async Task AbreMensagemDeAcessoNegado()
    {
        try
        {
            var parameters = new DialogParameters<ModalDeAcessoNegado>
            {
                  { x => x.ContentText, $"Desculpe. Infelizmente você não tem acesso a esse modulo." },
                  { x => x.ButtonText, "OK" },
                  { x => x.Color, Color.Success}
             };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, Position = DialogPosition.BottomLeft, CloseOnEscapeKey = true };
            var dialog = await DialogService.ShowAsync<ModalDeAcessoNegado>("Acesso Negado", parameters, options);
            var result = await dialog.Result;


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao declarar acesso negado: {ex.Message}", Severity.Error);
        }

    }
}


